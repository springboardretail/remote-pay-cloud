{"version":3,"sources":["com/clover/util/ImageUtil.ts"],"names":[],"mappings":";;AAEA;IAAA;IA0DA,CAAC;IAxDG;;;;;;OAMG;IACI,kCAAc,GAArB,UAAsB,GAAqB,EAAE,QAAiC;QAC1E,iCAAiC;QACjC,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC;QAElC,wCAAwC;QACxC,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACpC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEzB,mCAAmC;QACnC,4DAA4D;QAC5D,gEAAgE;QAChE,4BAA4B;QAC5B,IAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC9C,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;;;;;OAMG;IACI,oCAAgB,GAAvB,UAAwB,GAAW,EAAE,MAA4B,EAAE,OAAuC;QACtG,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QAC1B,IAAM,gBAAgB,GAAG;YACrB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC;YACD,mBAAmB,EAAE,CAAC;QAC1B,CAAC,CAAC;QACF,IAAM,iBAAiB,GAAG;YACtB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,8DAA4D,GAAG,qBAAkB,CAAC,CAAC;YAC/F,CAAC;YACD,mBAAmB,EAAE,CAAC;QAC1B,CAAC,CAAC;QACF,IAAM,mBAAmB,GAAG;YACxB,KAAK,CAAC,mBAAmB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;YACpD,KAAK,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QAC1D,CAAC,CAAA;QACD,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QACjD,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACnD,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;QAChC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;IACpB,CAAC;IAEL,gBAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,8BAAS","file":"../../../../com/clover/util/ImageUtil.js","sourcesContent":["import {IImageUtil} from './IImageUtil';\n\nexport class ImageUtil implements IImageUtil {\n\n    /**\n     * Appropriate for browsers. Uses a canvas element to base64\n     * encode the image.\n     *\n     * @param {HTMLImageElement} img\n     * @param {(response: any) => void} onEncode\n     */\n    public getBase64Image(img: HTMLImageElement, onEncode: (response: any) => void): string | void {\n        // Create an empty canvas element\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = img.naturalWidth;\n        canvas.height = img.naturalHeight;\n\n        // Copy the image contents to the canvas\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n\n        // Get the data-URL formatted image\n        // Firefox supports PNG and JPEG. You could check img.src to\n        // guess the original format, but be aware the using \"image/jpg\"\n        // will re-encode the image.\n        const dataURL = canvas.toDataURL(\"image/png\");\n        onEncode(dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\"));\n    }\n\n    /**\n     * Appropriate for browsers.  Uses an image tag and the load event to load an image from a url.\n     *\n     * @param {string} url\n     * @param {(image: any) => void} onLoad\n     * @param {(errorMessage: string) => void} onError\n     */\n    public loadImageFromURL(url: string, onLoad: (image: any) => void, onError: (errorMessage: string) => void) {\n        const image = new Image();\n        const imageLoadHandler = () => {\n            if (onLoad) {\n                onLoad(image);\n            }\n            clearEventListeners();\n        };\n        const imageErrorHandler = () => {\n            if (onError) {\n                onError(`An Image could not be loaded. Please check that the URL (${url}) is accessible.`);\n            }\n            clearEventListeners();\n        };\n        const clearEventListeners = () => {\n            image.removeEventListener(\"load\", imageLoadHandler);\n            image.removeEventListener(\"error\", imageErrorHandler);\n        }\n        image.addEventListener(\"load\", imageLoadHandler);\n        image.addEventListener(\"error\", imageErrorHandler);\n        image.crossOrigin = \"Anonymous\";\n        image.src = url;\n    }\n\n}"]}