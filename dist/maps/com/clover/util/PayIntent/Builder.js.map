{"version":3,"sources":["com/clover/util/PayIntent/Builder.ts"],"names":[],"mappings":"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","file":"../../../../../com/clover/util/PayIntent/Builder.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\n\n/**\n * Used to more closely match patterns used in other SDK's to allow for easier maintenance.\n *\n */\nexport namespace PayIntent {\n    export class Builder {\n        private action: string;\n        private amount: number;\n        /** @Deprecated // Please use TransactionSettings */\n        private tippableAmount: number;\n        private tipAmount: number;\n        private taxAmount: number;\n        private orderId: string;\n        private paymentId: string;\n        private employeeId: string;\n        private transactionType: sdk.remotemessage.TransactionType;\n        private taxableAmountRates: Array<sdk.payments.TaxableAmountRate>;\n        private serviceChargeAmount: sdk.payments.ServiceChargeAmount;\n        /** @Deprecated // Please use TransactionSettings */\n        private isDisableCashBack: boolean = false;\n        private isTesting: boolean = false;\n        /** @Deprecated // Please use TransactionSettings */\n        private cardEntryMethods: number;\n        private voiceAuthCode: string;\n        private postalCode: string;\n        private streetAddress: string;\n        private isCardNotPresent: boolean = false;\n        private cardDataMessage: string;\n        /** @Deprecated // Please use TransactionSettings */\n        private remotePrint: boolean = false;\n        private transactionNo: string;\n        /** @Deprecated // Please use TransactionSettings */\n        private isForceSwipePinEntry: boolean = false;\n        /** @Deprecated // Please use TransactionSettings */\n        private disableRestartTransactionWhenFailed: boolean = false;\n        // Can be set to the properly formatted uuid for a payment (\n        private externalPaymentId: string;\n        private vaultedCard: sdk.payments.VaultedCard;\n        /** @Deprecated // Please use TransactionSettings */\n        private allowOfflinePayment: boolean;\n        /** @Deprecated // Please use TransactionSettings */\n        private approveOfflinePaymentWithoutPrompt: boolean;\n        private requiresRemoteConfirmation: boolean;\n        private applicationTracking: sdk.apps.AppTracking;\n        private allowPartialAuth: boolean = true;\n        private germanInfo: sdk.payments.GermanInfo;\n        private cashAdvanceCustomerIdentification: sdk.payments.CashAdvanceCustomerIdentification;\n        private transactionSettings: sdk.payments.TransactionSettings;\n\n        public static buildTransactionSettingsFromPayIntent(payIntent: sdk.remotemessage.PayIntent): sdk.payments.TransactionSettings {\n            let transactionSettings: sdk.payments.TransactionSettings = new sdk.payments.TransactionSettings();\n\n            transactionSettings.setCloverShouldHandleReceipts(!payIntent.getRemotePrint());\n            transactionSettings.setDisableRestartTransactionOnFailure(payIntent.getDisableRestartTransactionWhenFailed());\n            transactionSettings.setForcePinEntryOnSwipe(payIntent.getIsForceSwipePinEntry());\n            transactionSettings.setDisableCashBack(payIntent.getIsDisableCashBack());\n            transactionSettings.setAllowOfflinePayment(payIntent.getAllowOfflinePayment());\n            transactionSettings.setApproveOfflinePaymentWithoutPrompt(payIntent.getApproveOfflinePaymentWithoutPrompt());\n            transactionSettings.setCardEntryMethods(payIntent.getCardEntryMethods());\n            transactionSettings.setDisableDuplicateCheck(false); // default\n            transactionSettings.setDisableReceiptSelection(false); // default\n            transactionSettings.setSignatureEntryLocation(null); // will default to clover setting\n            transactionSettings.setTipMode(null); // will default to clover setting\n            transactionSettings.setTippableAmount(payIntent.getTippableAmount());\n\n            return transactionSettings;\n        }\n\n        public payment(payment: sdk.payments.Payment): Builder {\n            this.amount = payment.getAmount();\n            this.tipAmount = payment.getTipAmount();\n            this.taxAmount = payment.getTaxAmount();\n            this.employeeId = payment.getEmployee().getId();\n            this.transactionNo = payment.getCardTransaction() ? payment.getCardTransaction().getTransactionNo() : null;\n            this.transactionSettings = payment.getTransactionSettings();\n            return this;\n        }\n\n        public payIntent(payIntent: sdk.remotemessage.PayIntent): Builder {\n            this.action = payIntent.getAction();\n            this.amount = payIntent.getAmount();\n            this.tippableAmount = payIntent.getTippableAmount();\n            this.tipAmount = payIntent.getTipAmount();\n            this.taxAmount = payIntent.getTaxAmount();\n            this.orderId = payIntent.getOrderId();\n            this.paymentId = payIntent.getPaymentId();\n            this.employeeId = payIntent.getEmployeeId();\n            this.transactionType = payIntent.getTransactionType();\n            this.taxableAmountRates = payIntent.getTaxableAmountRates();\n            this.serviceChargeAmount = payIntent.getServiceChargeAmount();\n            this.isDisableCashBack = payIntent.getIsDisableCashBack();\n            this.isTesting = payIntent.getIsTesting();\n            this.cardEntryMethods = payIntent.getCardEntryMethods();\n            this.voiceAuthCode = payIntent.getVoiceAuthCode();\n            this.postalCode = payIntent.getPostalCode();\n            this.streetAddress = payIntent.getStreetAddress();\n            this.isCardNotPresent = payIntent.getIsCardNotPresent();\n            this.cardDataMessage = payIntent.getCardDataMessage();\n            this.remotePrint = payIntent.getRemotePrint();\n            this.transactionNo = payIntent.getTransactionNo();\n            this.isForceSwipePinEntry = payIntent.getIsForceSwipePinEntry();\n            this.disableRestartTransactionWhenFailed = payIntent.getDisableRestartTransactionWhenFailed();\n            this.externalPaymentId = payIntent.getExternalPaymentId();\n            this.vaultedCard = payIntent.getVaultedCard();\n            this.allowOfflinePayment = payIntent.getAllowOfflinePayment();\n            this.approveOfflinePaymentWithoutPrompt = payIntent.getApproveOfflinePaymentWithoutPrompt();\n            this.requiresRemoteConfirmation = payIntent.getRequiresRemoteConfirmation();\n            this.applicationTracking = payIntent.getApplicationTracking();\n            this.allowPartialAuth = payIntent.getAllowPartialAuth();\n            this.germanInfo = payIntent.getGermanInfo();\n            if (payIntent.getTransactionSettings() != null) {\n                this.transactionSettings = payIntent.getTransactionSettings();\n            } else {\n                this.transactionSettings = PayIntent.Builder.buildTransactionSettingsFromPayIntent(payIntent);\n            }\n            this.cashAdvanceCustomerIdentification = payIntent.getCashAdvanceCustomerIdentification();\n\n            return this;\n        }\n\n        public setAction(action: string): Builder {\n            this.action = action;\n            return this;\n        }\n\n        public setAmount(amount: number): Builder {\n            this.amount = amount;\n            return this;\n        }\n\n        /** @Deprecated */\n        public setTippableAmount(tippableAmount: number): Builder {\n            this.tippableAmount = tippableAmount;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setTippableAmount(tippableAmount);\n            }\n            return this;\n        }\n\n        public setTaxAmount(taxAmount: number): Builder {\n            this.taxAmount = taxAmount;\n            return this;\n        }\n\n        public setEmployeeId(employeeId: string): Builder {\n            this.employeeId = employeeId;\n            return this;\n        }\n\n        public setTipAmount(tipAmount: number): Builder {\n            this.tipAmount = tipAmount;\n            return this;\n        }\n\n        public setTransactionType(transactionType: sdk.remotemessage.TransactionType): Builder {\n            this.transactionType = transactionType;\n            return this;\n        }\n\n        /** @Deprecated */\n        public setCardEntryMethods(cardEntryMethods: number): Builder {\n            this.cardEntryMethods = cardEntryMethods;\n            return this;\n        }\n\n        public setCardDataMessage(cardDataMessage: string): Builder {\n            this.cardDataMessage = cardDataMessage;\n            return this;\n        }\n\n        public setTaxableAmountRates(taxableAmountRates: Array<sdk.payments.TaxableAmountRate>): Builder {\n            this.taxableAmountRates = new Array<sdk.payments.TaxableAmountRate>(taxableAmountRates);\n            return this;\n        }\n\n        public setServiceChargeAmount(serviceChargeAmount: sdk.payments.ServiceChargeAmount): Builder {\n            this.serviceChargeAmount = serviceChargeAmount;\n            return this;\n        }\n\n        public setOrderId(orderId: string): Builder {\n            this.orderId = orderId;\n            return this;\n        }\n\n        public setPaymentId(paymentId: string): Builder {\n            this.paymentId = paymentId;\n            return this;\n        }\n\n        /** @Deprecated */\n        public setRemotePrint(remotePrint: boolean = false): Builder {\n            this.remotePrint = remotePrint;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setCloverShouldHandleReceipts(!remotePrint);\n            }\n            return this;\n        }\n\n        /** @Deprecated */\n        public setDisableCashback(disableCashBack: boolean = false): Builder {\n            this.isDisableCashBack = disableCashBack;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setDisableCashBack(disableCashBack);\n            }\n            return this;\n        }\n\n        public setTransactionNo(transactionNo: string): Builder {\n            this.transactionNo = transactionNo;\n            return this;\n        }\n\n        /** @Deprecated */\n        public setForceSwipePinEntry(isForceSwipePinEntry: boolean = false): Builder {\n            this.isForceSwipePinEntry = isForceSwipePinEntry;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setForcePinEntryOnSwipe(isForceSwipePinEntry);\n            }\n            return this;\n        }\n\n        /** @Deprecated */\n        public setDisableRestartTransactionWhenFailed(disableRestartTransactionWhenFailed: boolean = false): Builder {\n            this.disableRestartTransactionWhenFailed = disableRestartTransactionWhenFailed;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setDisableRestartTransactionOnFailure(disableRestartTransactionWhenFailed);\n            }\n            return this;\n        }\n\n        public setExternalPaymentId(externalPaymentId: string): Builder {\n            this.externalPaymentId = externalPaymentId;\n            return this;\n        }\n\n        public setVaultedCard(vaultedCard: sdk.payments.VaultedCard): Builder {\n            this.vaultedCard = vaultedCard;\n            return this;\n        }\n\n        /** @Deprecated */\n        public setAllowOfflinePayment(allowOfflinePayment: boolean): Builder {\n            this.allowOfflinePayment = allowOfflinePayment;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setAllowOfflinePayment(allowOfflinePayment);\n            }\n            return this;\n        }\n\n        /** @Deprecated */\n        public setAapproveOfflinePaymentWithoutPrompt(approveOfflinePaymentWithoutPrompt: boolean): Builder {\n            this.approveOfflinePaymentWithoutPrompt = approveOfflinePaymentWithoutPrompt;\n            if (this.transactionSettings != null) { // ** Backward Compatibility **\n                this.transactionSettings.setApproveOfflinePaymentWithoutPrompt(approveOfflinePaymentWithoutPrompt);\n            }\n            return this;\n        }\n\n        public setRequiresRemoteConfirmation(requiresRemoteConfirmation: boolean): Builder {\n            this.requiresRemoteConfirmation = requiresRemoteConfirmation;\n            return this;\n        }\n\n        public setApplicationTracking(applicationTracking: sdk.apps.AppTracking): Builder {\n            this.applicationTracking = applicationTracking;\n            return this;\n        }\n\n        public setAllowPartialAuth(allowPartialAuth: boolean = false): Builder {\n            this.allowPartialAuth = allowPartialAuth;\n            return this;\n        }\n\n        public setGermanInfo(germanInfo: sdk.payments.GermanInfo): Builder {\n            this.germanInfo = germanInfo;\n            return this;\n        }\n\n        public setCustomerIdentification(customerIdentification: sdk.payments.CashAdvanceCustomerIdentification): Builder {\n            this.cashAdvanceCustomerIdentification = customerIdentification;\n            return this;\n        }\n\n        public setTransactionSettings(transactionSettings: sdk.payments.TransactionSettings): Builder {\n            this.transactionSettings = transactionSettings;\n            return this;\n        }\n\n        public setCardNotPresent(cardNotPresent: boolean = false): Builder {\n            this.isCardNotPresent = cardNotPresent;\n            return this;\n        }\n\n        public build(): sdk.remotemessage.PayIntent {\n            let payIntent: sdk.remotemessage.PayIntent = new sdk.remotemessage.PayIntent();\n            payIntent.setAction(this.action);\n            payIntent.setAmount(this.amount);\n            payIntent.setTippableAmount(this.tippableAmount);\n            payIntent.setTipAmount(this.tipAmount);\n            payIntent.setTaxAmount(this.taxAmount);\n            payIntent.setOrderId(this.orderId);\n            payIntent.setPaymentId(this.paymentId);\n            payIntent.setEmployeeId(this.employeeId);\n\n            payIntent.setTransactionType(this.transactionType);\n            payIntent.setTaxableAmountRates(this.taxableAmountRates);\n            payIntent.setServiceChargeAmount(this.serviceChargeAmount);\n            payIntent.setIsDisableCashBack(this.isDisableCashBack);\n            payIntent.setIsTesting(this.isTesting);\n            payIntent.setCardEntryMethods(this.cardEntryMethods);\n\n            payIntent.setVoiceAuthCode(this.voiceAuthCode);\n            payIntent.setPostalCode(this.postalCode);\n            payIntent.setStreetAddress(this.streetAddress);\n            payIntent.setIsCardNotPresent(this.isCardNotPresent);\n            payIntent.setCardDataMessage(this.cardDataMessage);\n            payIntent.setRemotePrint(this.remotePrint);\n            payIntent.setTransactionNo(this.transactionNo);\n\n            payIntent.setIsForceSwipePinEntry(this.isForceSwipePinEntry);\n            payIntent.setDisableRestartTransactionWhenFailed(this.disableRestartTransactionWhenFailed);\n            payIntent.setExternalPaymentId(this.externalPaymentId);\n            payIntent.setVaultedCard(this.vaultedCard);\n            payIntent.setAllowOfflinePayment(this.allowOfflinePayment);\n\n            payIntent.setApproveOfflinePaymentWithoutPrompt(this.approveOfflinePaymentWithoutPrompt);\n            payIntent.setRequiresRemoteConfirmation(this.requiresRemoteConfirmation);\n            payIntent.setApplicationTracking(this.applicationTracking);\n            payIntent.setAllowPartialAuth(this.allowPartialAuth);\n            payIntent.setGermanInfo(this.germanInfo);\n\n            payIntent.setCashAdvanceCustomerIdentification(this.cashAdvanceCustomerIdentification);\n            payIntent.setTransactionSettings(this.transactionSettings);\n            return payIntent;\n        }\n    }\n}\n"]}