{"version":3,"sources":["com/clover/util/HttpSupport.ts"],"names":[],"mappings":";;AAAA,uDAAoD;AAEpD;;;;GAIG;AACH;IAiBI,qBAAmB,gBAAqB;QAfxC,oCAAoC;QAC1B,WAAM,GAAW,eAAM,CAAC,MAAM,EAAE,CAAC;QAevC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC7C,CAAC;IAEO,wCAAkB,GAA1B,UAA2B,WAAgB,EAAE,QAAgB,EAAE,YAAsB,EAAE,OAAiB;QACpG,WAAW,CAAC,kBAAkB,GAAG;YAC7B,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;oBAC5B,IAAI,CAAC;wBACD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;4BACf,IAAI,IAAI,GAAG,IAAI,CAAC;4BAChB,EAAE,CAAC,CAAC,WAAW,CAAC,YAAY,IAAI,WAAW,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC;gCAC7D,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;4BAChD,CAAC;4BACD,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;wBACpC,CAAC;oBACL,CAAC;oBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBAC/B,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;4BACf,YAAY,CAAC,EAAE,CAAC,CAAC;wBACrB,CAAC;oBACL,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACV,OAAO,CAAC;4BACJ,OAAO,EAAE,6BAA6B;4BACtC,QAAQ,EAAE,QAAQ;4BAClB,MAAM,EAAE,WAAW,CAAC,MAAM;yBAC7B,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;YACR,CAAC;QACL,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,+BAAS,GAAhB,UAAiB,MAAc,EAAE,QAAgB,EAAE,YAAsB,EAAE,OAAiB;QACxF,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5C,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAClE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACrC,4FAA4F;QAC5F,qGAAqG;QACrG,EAAE,CAAC,CAAC,OAAM,CAAC,SAAS,CAAC,KAAK,WAAW,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7E,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO,CAAC,IAAI,EAAE,CAAC;IACnB,CAAC;IAEM,uCAAiB,GAAxB,UAAyB,MAAc,EAAE,QAAa,EAAE,QAAgB,EAAE,YAAsB,EAAE,OAAiB,EAAE,iBAAuB;QACxI,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5C,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAElE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,iBAAiB,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,iBAAiB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACxC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC1D,CAAC;YACL,CAAC;QACL,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,gBAAgB,CAAC,cAAc,EAAE,gCAAgC,CAAC,CAAC;YAC3E,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3C,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,CAAC;YACF,OAAO,CAAC,IAAI,EAAE,CAAC;QACnB,CAAC;IACL,CAAC;IAED;;OAEG;IACI,8BAAQ,GAAf,UAAgB,QAAgB,EAAE,YAAsB,EAAE,OAAiB,EAAE,QAAa,EAAE,iBAAuB;QAC/G,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;IACjG,CAAC;IAED;;OAEG;IACI,6BAAO,GAAd,UAAe,QAAgB,EAAE,YAAsB,EAAE,OAAiB;QACtE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAA;IAC1D,CAAC;IAED;;OAEG;IACI,6BAAO,GAAd,UAAe,QAAgB,EAAE,YAAsB,EAAE,OAAiB;QACtE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAA;IAC9D,CAAC;IAED;;OAEG;IACI,6BAAO,GAAd,UAAe,QAAgB,EAAE,YAAsB,EAAE,OAAiB,EAAE,QAAa;QACrF,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;IAED;;OAEG;IACI,gCAAU,GAAjB,UAAkB,QAAgB,EAAE,YAAsB,EAAE,OAAiB;QACzE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,CAAC,CAAA;IAC7D,CAAC;IACL,kBAAC;AAAD,CA9HA,AA8HC,IAAA;AA9HY,kCAAW","file":"../../../../com/clover/util/HttpSupport.js","sourcesContent":["import {Logger} from '../remote/client/util/Logger';\n\n/**\n * Interface used to abstract implementation details to allow for NodeJS and\n * Browser usage of the library.\n *\n */\nexport class HttpSupport {\n\n    // Create a logger - when we need it\n    protected logger: Logger = Logger.create();\n\n    /**\n     * This is the xmlhttprequest implementation.  This is odd,\n     * but it is how we can keep ourselves from being tied to a browser.\n     *\n     * A NodeJS app that uses this library would pass in a different\n     * object than a browser implementation.  NodeJS has an object that\n     * satisfies the requirements of the xmlhttprequest (looks the same).\n     *\n     * https://www.npmjs.com/package/xmlhttprequest\n     */\n    xmlHttpImplClass: any;\n\n    public constructor(xmlHttpImplClass: any) {\n        this.xmlHttpImplClass = xmlHttpImplClass;\n    }\n\n    private setXmlHttpCallback(xmlHttpInst: any, endpoint: string, onDataLoaded: Function, onError: Function): void {\n        xmlHttpInst.onreadystatechange = function () {\n            if (xmlHttpInst.readyState == 4) {\n                if (xmlHttpInst.status == 200) {\n                    try {\n                        if (onDataLoaded) {\n                            var data = null;\n                            if (xmlHttpInst.responseText && xmlHttpInst.responseText != \"\") {\n                                data = JSON.parse(xmlHttpInst.responseText);\n                            }\n                            onDataLoaded(data, xmlHttpInst);\n                        }\n                    } catch (e) {\n                        this.logger.error(endpoint, e);\n                        if (onDataLoaded) {\n                            onDataLoaded({});\n                        }\n                    }\n                }\n                else {\n                    if (onError) {\n                        onError({\n                            message: \"status returned was not 200\",\n                            endpoint: endpoint,\n                            status: xmlHttpInst.status\n                        });\n                    }\n                }\n            } else {\n            }\n        }.bind(this);\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public doXmlHttp(method: string, endpoint: string, onDataLoaded: Function, onError: Function): void {\n        const xmlHttp = new this.xmlHttpImplClass();\n        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);\n        xmlHttp.open(method, endpoint, true);\n        // Handle the following Firefox bug - https://bugzilla.mozilla.org/show_bug.cgi?id=433859#c4\n        // This check can only be performed in a browser environment so make sure navigator is defined first.\n        if (typeof(navigator) !== \"undefined\" && navigator.userAgent.search(\"Firefox\")) {\n            xmlHttp.setRequestHeader(\"Accept\", \"*/*\");\n        }\n\n        xmlHttp.send();\n    }\n\n    public doXmlHttpSendJson(method: string, sendData: any, endpoint: string, onDataLoaded: Function, onError: Function, additionalHeaders?: any): void {\n        const xmlHttp = new this.xmlHttpImplClass();\n        this.setXmlHttpCallback(xmlHttp, endpoint, onDataLoaded, onError);\n\n        xmlHttp.open(method, endpoint, true);\n        if (additionalHeaders) {\n            for (var key in additionalHeaders) {\n                if (additionalHeaders.hasOwnProperty(key)) {\n                    xmlHttp.setRequestHeader(key, additionalHeaders[key]);\n                }\n            }\n        }\n        if (sendData) {\n            xmlHttp.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            var sendDataStr = JSON.stringify(sendData);\n            xmlHttp.send(sendDataStr);\n        }\n        else {\n            xmlHttp.send();\n        }\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public postData(endpoint: string, onDataLoaded: Function, onError: Function, sendData: any, additionalHeaders?: any): void {\n        this.doXmlHttpSendJson(\"POST\", sendData, endpoint, onDataLoaded, onError, additionalHeaders);\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public getData(endpoint: string, onDataLoaded: Function, onError: Function): void {\n        this.doXmlHttp(\"GET\", endpoint, onDataLoaded, onError)\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public options(endpoint: string, onDataLoaded: Function, onError: Function): void {\n        this.doXmlHttp(\"OPTIONS\", endpoint, onDataLoaded, onError)\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public putData(endpoint: string, onDataLoaded: Function, onError: Function, sendData: any): void {\n        this.doXmlHttpSendJson(\"PUT\", sendData, endpoint, onDataLoaded, onError);\n    }\n\n    /**\n     * Make the REST call to get the data\n     */\n    public deleteData(endpoint: string, onDataLoaded: Function, onError: Function): void {\n        this.doXmlHttp(\"DELETE\", endpoint, onDataLoaded, onError)\n    }\n}"]}