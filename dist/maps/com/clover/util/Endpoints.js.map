{"version":3,"sources":["com/clover/util/Endpoints.ts"],"names":[],"mappings":"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","file":"../../../../com/clover/util/Endpoints.js","sourcesContent":["/**\n * Utility to centralize endpoints.\n *\n * This simplifies building urls to contact services.  If there is a need to add\n * a call to a service on the server, it should be added here.\n *\n */\nexport class Endpoints {\n\n    static ACCESS_TOKEN_KEY: string = \"axsTkn\";\n    static ACCESS_TOKEN_SUFFIX: string = \"?access_token={\" + Endpoints.ACCESS_TOKEN_KEY + \"}\";\n\n    static ACCOUNT_V3_KEY: string = \"acntId\";\n    static ACCOUNT_V3_PATH: string = \"v3/accounts/{\" + Endpoints.ACCOUNT_V3_KEY + \"}\";\n    static DEVELOPER_V3_KEY: string = \"dId\";\n    static DEVELOPER_V3_PATH: string = \"v3/developers/{\" + Endpoints.DEVELOPER_V3_KEY + \"}\";\n    static RESELLER_V3_KEY: string = \"rId\";\n    static RESELLER_V3_PATH: string = \"v3/resellers/{\" + Endpoints.RESELLER_V3_KEY + \"}\";\n\n    static MERCHANT_V2_KEY: string = \"mId\";\n    static MERCHANT_V2_PATH: string = \"v2/merchant/{\" + Endpoints.MERCHANT_V2_KEY + \"}\";\n    static MERCHANT_V3_KEY: string = \"mId\";\n    static MERCHANT_V3_PATH: string = \"v3/merchants/{\" + Endpoints.MERCHANT_V3_KEY + \"}\";\n    static APPS_V3_KEY: string = \"appId\";\n    static APPS_V3_PATH: string = \"v3/apps/{\" + Endpoints.APPS_V3_KEY + \"}\";\n\n    static ORDER_PATH: string = Endpoints.MERCHANT_V3_PATH + \"/orders\";\n    static ORDER_ID_KEY: string = \"appId\";\n    static ORDER_ID_PATH: string = Endpoints.ORDER_PATH + \"/{\" + Endpoints.ORDER_ID_KEY + \"}\";\n\n    static LINE_ITEM_PATH: string = Endpoints.ORDER_ID_PATH + \"/line_items\";\n    static LINE_ITEM_ID_KEY: string = \"lniId\";\n    static LINE_ITEM_ID_PATH: string = Endpoints.LINE_ITEM_PATH + \"/{\" + Endpoints.LINE_ITEM_ID_KEY + \"}\";\n\n    static DEVICE_PATH: string = Endpoints.MERCHANT_V3_PATH + \"/devices\";\n    static DEVICE_ID_KEY: string = \"devId\";\n    static DEVICE_ID_PATH: string = Endpoints.DEVICE_PATH + \"/{\" + Endpoints.DEVICE_ID_KEY + \"}\";\n\n    static REMOTE_PAY_PATH: string = Endpoints.MERCHANT_V2_PATH + \"/remote_pay\";\n\n    static WEBSOCKET_PATH: string = \"support/remote_pay/cs\";\n    static WEBSOCKET_TOKEN_KEY: string = \"wsTkn\";\n    static WEBSOCKET_TOKEN_SUFFIX: string = \"?token={\" + Endpoints.WEBSOCKET_TOKEN_KEY + \"}\";\n    static WEBSOCKET_FRIENDLY_ID_KEY: string = \"wsFriendlyId\";\n    static WEBSOCKET_FRIENDLY_ID_SUFFIX = \"&friendlyId={\" + Endpoints.WEBSOCKET_FRIENDLY_ID_KEY + \"}\";\n    static WEBSOCKET_FORCE_CONNECT_ID_KEY: string = \"wsForceConnect\";\n    static WEBSOCKET_FORCE_CONNECT_ID_SUFFIX = \"&forceConnect={\" + Endpoints.WEBSOCKET_FORCE_CONNECT_ID_KEY + \"}\";\n\n    static OAUTH_PATH: string = \"oauth/authorize?response_type=token\";\n    static OAUTH_CLIENT_ID_KEY = \"client_id\";\n    static OAUTH_CLIENT_ID_SUFFIX = \"&client_id={\" + Endpoints.OAUTH_CLIENT_ID_KEY + \"}\";\n    static OAUTH_MERCHANT_ID_KEY = \"merchant_id\";\n    static OAUTH_MERCHANT_ID_SUFFIX = \"&merchant_id={\" + Endpoints.OAUTH_MERCHANT_ID_KEY + \"}\";\n    static OAUTH_REDIRECT_URI_KEY = \"redirect_uri\";\n    static OAUTH_REDIRECT_URI_SUFFIX = \"&redirect_uri={\" + Endpoints.OAUTH_REDIRECT_URI_KEY + \"}\";\n\n    static DOMAIN_KEY: string = \"server_url\";\n    static DOMAIN_PATH: string = \"{server_url}\";\n\n    /**\n     * Builds the OAuth url to get an OAuth token.\n     *\n     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000\n     * @param {string} clientId - the clover application uuid\n     * @param {string} [merchantId] - the clover merchant id\n     * @param {string} [redirectUri] - the url to redirect to after authentication\n     * @returns {string}\n     */\n    public static getOAuthURL(domain: string, clientId: string, merchantId?: string, redirectUri?: string): string {\n        var variables = {};\n        variables[Endpoints.DOMAIN_KEY] = domain;\n        variables[Endpoints.OAUTH_CLIENT_ID_KEY] = clientId;\n        let oauthEndpointPath: string = Endpoints.DOMAIN_PATH + Endpoints.OAUTH_PATH + Endpoints.OAUTH_CLIENT_ID_SUFFIX;\n        if (merchantId) {\n            variables[Endpoints.OAUTH_MERCHANT_ID_KEY] = merchantId;\n            oauthEndpointPath += Endpoints.OAUTH_MERCHANT_ID_SUFFIX;\n        }\n        if (redirectUri) {\n            variables[Endpoints.OAUTH_REDIRECT_URI_KEY] = encodeURIComponent(redirectUri);\n            oauthEndpointPath += Endpoints.OAUTH_REDIRECT_URI_SUFFIX;\n        }\n        return Endpoints.setVariables(oauthEndpointPath, variables);\n    }\n\n    /**\n     * The endpoint used to connect to a websocket on the server that will proxy to a device.  Used by\n     * remote-pay cloud connectors.\n     *\n     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000\n     * @param {string} wsToken - the token used to contact the device.\n     * @param {string} friendlyId - an id used to identify the POS.\n     * @param {boolean} forceConnect - if true, then the attempt will overtake any existing connection\n     * @returns {string} The endpoint used to connect to a websocket on the server that will proxy to a device\n     */\n    public static getDeviceWebSocketEndpoint(domain: string, wsToken: string, friendlyId: string, forceConnect: boolean): string {\n        var variables = {};\n        variables[Endpoints.WEBSOCKET_TOKEN_KEY] = wsToken;\n        variables[Endpoints.DOMAIN_KEY] = domain;\n        variables[Endpoints.WEBSOCKET_FRIENDLY_ID_KEY] = friendlyId;\n        variables[Endpoints.WEBSOCKET_FORCE_CONNECT_ID_KEY] = forceConnect;\n\n        let merchantEndpointPath: string = Endpoints.DOMAIN_PATH + Endpoints.WEBSOCKET_PATH +\n            Endpoints.WEBSOCKET_TOKEN_SUFFIX +\n            Endpoints.WEBSOCKET_FRIENDLY_ID_SUFFIX +\n            Endpoints.WEBSOCKET_FORCE_CONNECT_ID_SUFFIX;\n\n        return Endpoints.setVariables(merchantEndpointPath, variables);\n    }\n\n    /**\n     * The endpoint used to obtain a merchant\n     *\n     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000\n     * @param {string} merchantId - the id of the merchant to use when getting the merchant.\n     * @param {string} accessToken - the OAuth token used when accessing the server\n     * @returns {string} endpoint - the url to use to retrieve the merchant\n     */\n    public static getMerchantEndpoint(domain: string, merchantId: string, accessToken: string): string {\n        var variables = {};\n        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;\n        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;\n        variables[Endpoints.DOMAIN_KEY] = domain;\n\n        let merchantEndpointPath: string = Endpoints.DOMAIN_PATH + Endpoints.MERCHANT_V3_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;\n        return Endpoints.setVariables(merchantEndpointPath, variables);\n    }\n\n    /**\n     * The endpoint used to obtain a list of devices\n     *\n     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000\n     * @param {string} merchantId - the id of the merchant to use when getting the merchant.\n     * @param {string} accessToken - the OAuth token used when accessing the server\n     * @returns {string}\n     */\n    public static getDevicesEndpoint(domain: string, merchantId: string, accessToken: string): string {\n        var variables = {};\n        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;\n        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;\n        variables[Endpoints.DOMAIN_KEY] = domain;\n\n        let devicesEndpointPath: string = Endpoints.DOMAIN_PATH + Endpoints.DEVICE_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;\n        return Endpoints.setVariables(devicesEndpointPath, variables);\n    }\n\n    /**\n     * Builds the endpoint to send the message to the server to let the device know we want to talk to it.\n     * @param {string} domain - the clover server.  EX: https://www.clover.com, http://localhost:9000\n     * @param {string} merchantId - the id of the merchant to use when getting the merchant.\n     * @param {string} accessToken - the OAuth token used when accessing the server\n     * @returns {string} endpoint - the url to use alert a device that we want to communicate with it\n     */\n    public static getAlertDeviceEndpoint(domain: string, merchantId: string, accessToken: string): string {\n        var variables = {};\n        variables[Endpoints.MERCHANT_V3_KEY] = merchantId;\n        variables[Endpoints.ACCESS_TOKEN_KEY] = accessToken;\n        variables[Endpoints.DOMAIN_KEY] = domain;\n\n        let alertDeviceEndpointPath: string = Endpoints.DOMAIN_PATH + Endpoints.REMOTE_PAY_PATH + Endpoints.ACCESS_TOKEN_SUFFIX;\n        return Endpoints.setVariables(alertDeviceEndpointPath, variables);\n    }\n\n    /**\n     * Does variable replacement on a template\n     *\n     * @private\n     * @param {string} template - a template string that will have tags replaced\n     * @param {map} variableMap - a named map of tag to value for the replacement process\n     * @returns {string}\n     */\n    public static setVariables(template: string, variableMap: any): string {\n        for (var key in variableMap) {\n            if (variableMap.hasOwnProperty(key)) {\n                var bracedKey = new RegExp(this.escapeRegExp(\"{\" + key + \"}\"), \"g\");\n                // If the value of DOMAIN_KEY does not have a trailing slash, add one.\n                if (key === Endpoints.DOMAIN_KEY) {\n                    variableMap[key] = Endpoints.appendTrailingSlashToDomain(variableMap[key]);\n                }\n                template = template.replace(bracedKey, variableMap[key]);\n            }\n        }\n        return template;\n    };\n\n    private static appendTrailingSlashToDomain(domain: string): string {\n        if (domain && domain.charAt(domain.length - 1) !== '/') {\n            return `${domain}/`;\n        }\n        return domain;\n    }\n\n    /**\n     *\n     * Does simple escaping to facilitate string replacement in a url\n     * @param {string} stringToGoIntoTheRegex - the unescaped regex\n     * @returns {XML|string|void} - the escaped regex\n     * @private\n     */\n    private static escapeRegExp(stringToGoIntoTheRegex: string): string {\n        return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n}"]}