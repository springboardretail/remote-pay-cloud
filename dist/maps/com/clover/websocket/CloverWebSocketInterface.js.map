{"version":3,"sources":["com/clover/websocket/CloverWebSocketInterface.ts"],"names":[],"mappings":";;AACA,mDAAgD;AAChD,uDAAoD;AAEpD;;;;;;;;;;;GAWG;AACH;IAWI,kCAAY,QAAgB;QAP5B,kBAAkB;QACV,WAAM,GAAW,eAAM,CAAC,MAAM,EAAE,CAAC;QAOrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAqB,CAAC;IACpD,CAAC;IAaM,0CAAO,GAAd;QAAA,iBAWC;QAVG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0OAA0O,CAAC,CAAC;QAClQ,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAxB,CAAwB,CAAC,CAAC;YAC7E,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAAC;YACnF,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC;YAC/E,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAC,KAAK,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAzB,CAAyB,CAAC,CAAC;QACnF,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,+CAAY,GAApB,UAAqB,KAAY;QAAjC,iBAUC;QATG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAA2B;YAC/C,IAAI,CAAC;gBACD,iEAAiE;gBACjE,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,CAAC;YAC/B,CAAC;YACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,kDAAe,GAAvB,UAAwB,KAAmB;QAA3C,iBASC;QARG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAA2B;YAC/C,IAAI,CAAC;gBACD,QAAQ,CAAC,aAAa,CAAC,KAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC;YACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACK,gDAAa,GAArB,UAAsB,KAAU;QAAhC,iBAmBC;QAlBG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAA2B;YAC/C,IAAI,CAAC;gBACD,sFAAsF;gBACtF,iEAAiE;gBACjE,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,EAAE,IAAI,+BAAc,CAAC,UAAU,CAAC,CAAC,CAAC;oBACpD,QAAQ,CAAC,cAAc,CAAC,KAAI,EAAE,KAAK,CAAC,CAAC;gBACzC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,EAAE,IAAI,+BAAc,CAAC,OAAO,CAAC,CAAC,CAAC;oBACxD,QAAQ,CAAC,iBAAiB,CAAC,KAAI,EAAE,KAAK,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,EAAE,IAAI,+BAAc,CAAC,MAAM,CAAC,CAAC,CAAC;oBACvD,QAAQ,CAAC,cAAc,CAAC,KAAI,EAAE,KAAK,CAAC,CAAC;gBACzC,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,EAAE,IAAI,+BAAc,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrD,QAAQ,CAAC,WAAW,CAAC,KAAI,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC;YACL,CAAC;YACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,gDAAa,GAArB,UAAsB,KAAiB;QAAvC,iBASC;QARG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,QAA2B;YAC/C,IAAI,CAAC;gBACD,QAAQ,CAAC,YAAY,CAAC,KAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YAC1D,CAAC;YACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,4CAAS,GAAhB,UAAiB,IAAa,EAAE,MAAe;QAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QAChE,IAAI,CAAC;YACD;;;;eAIG;YACH,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,EAAE,MAAM,IAAI,gBAAgB,CAAC,CAAC;QACnE,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,CAAC,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,2CAAQ,GAAf,UAAgB,IAAY;QACxB;;;;;;;WAOG;QACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,2CAAQ,GAAf;QACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAChC,CAAC;IAEM,yCAAM,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,+BAAc,CAAC,IAAI,CAAC;IACvD,CAAC;IAYM,8CAAW,GAAlB,UAAmB,QAA2B;QAC1C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAEM,iDAAc,GAArB,UAAsB,QAA2B;QAC7C,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,+CAAY,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED,8BAA8B;IACvB,yCAAM,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;IAC9B,CAAC;IAEM,gDAAa,GAApB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IACrC,CAAC;IAEM,oDAAiB,GAAxB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,CAAC,CAAC;IAC/F,CAAC;IAEM,8CAAW,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,CAAC;IACL,+BAAC;AAAD,CApLA,AAoLC,IAAA;AApLqB,4DAAwB","file":"../../../../com/clover/websocket/CloverWebSocketInterface.js","sourcesContent":["import {WebSocketListener} from './WebSocketListener'\nimport {WebSocketState} from './WebSocketState';\nimport {Logger} from '../remote/client/util/Logger';\n\n/**\n * Used to abstract implementation details to allow for NodeJS and\n * Browser usage of the library.\n *\n * WebSocket Clover Interface.  Abstracts the WebSocket implementation so that the library is not tied to a\n * Browser implementation.\n *\n * Interface to connect a websocket implementation to.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * or https://html.spec.whatwg.org/multipage/web-sockets.html\n */\nexport abstract class CloverWebSocketInterface {\n\n    private listeners: Array<WebSocketListener>;\n\n    // Create a logger\n    private logger: Logger = Logger.create();\n\n    private endpoint: string;\n\n    private webSocket: any;\n\n    constructor(endpoint: string) {\n        this.endpoint = endpoint;\n        this.listeners = new Array<WebSocketListener>();\n    }\n\n    /**\n     * For JS impls, we need to abstract out the WebSocket so that the library can be used in\n     * browsers and non-browsers.\n     *\n     * This MUST return immediately!  It cannot use any type of promise or deferral, or the listener\n     * will not be properly attached before events begin firing.\n     *\n     * @param endpoint - the uri to connect to\n     */\n    public abstract createWebSocket(endpoint: string): any;\n\n    public connect(): CloverWebSocketInterface {\n        this.webSocket = this.createWebSocket(this.endpoint);\n        if (typeof this.webSocket[\"addEventListener\"] !== \"function\") {\n            this.logger.error(\"FATAL: The websocket implementation being used must have an 'addEventListener' function.  Either use a supported websocket implementation (https://www.npmjs.com/package/ws) or override the connect method on CloverWebSocketInterface.\");\n        } else {\n            this.webSocket.addEventListener(\"open\", (event) => this.notifyOnOpen(event));\n            this.webSocket.addEventListener(\"message\", (event) => this.notifyOnMessage(event));\n            this.webSocket.addEventListener(\"close\", (event) => this.notifyOnClose(event));\n            this.webSocket.addEventListener(\"error\", (event) => this.notifyOnError(event));\n        }\n        return this;\n    }\n\n    private notifyOnOpen(event: Event): void {\n        this.listeners.forEach((listener: WebSocketListener) => {\n            try {\n                // check event here for any additional data we can see - headers?\n                listener.onConnected(this);\n            }\n            catch (e) {\n                this.logger.error(e);\n            }\n        });\n    }\n\n    private notifyOnMessage(event: MessageEvent): void {\n        this.listeners.forEach((listener: WebSocketListener) => {\n            try {\n                listener.onTextMessage(this, event.data);\n            }\n            catch (e) {\n                this.logger.error(e);\n            }\n        });\n    }\n\n    /**\n     * A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail\n     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.\n     *\n     * @param {any} event - simple event passed per websocket spec.\n     */\n    private notifyOnError(event: any): void {\n        this.listeners.forEach((listener: WebSocketListener) => {\n            try {\n                // According to the spec, only CLOSING or OPEN should occur. This is a 'simple' event.\n                // check event here for any additional data we can see - headers?\n                if (this.getReadyState() == WebSocketState.CONNECTING) {\n                    listener.onConnectError(this, event);\n                } else if (this.getReadyState() == WebSocketState.CLOSING) {\n                    listener.onUnexpectedError(this, event);\n                } else if (this.getReadyState() == WebSocketState.CLOSED) {\n                    listener.onDisconnected(this, event);\n                } else if (this.getReadyState() == WebSocketState.OPEN) {\n                    listener.onSendError(this, event);\n                }\n            }\n            catch (e) {\n                this.logger.error(e);\n            }\n        });\n    }\n\n    private notifyOnClose(event: CloseEvent): void {\n        this.listeners.forEach((listener: WebSocketListener) => {\n            try {\n                listener.onCloseFrame(this, event.code, event.reason);\n            }\n            catch (e) {\n                this.logger.error(e);\n            }\n        });\n    }\n\n    public sendClose(code?: number, reason?: string): CloverWebSocketInterface {\n        this.logger.debug(\"Close sent code \", code, \" reason \", reason);\n        try {\n            /** 1000 indicates normal closure.  To avoid InvalidAccessErrors if no code is available default to 1000.\n             *  Per the websocket spec:\n             *    \"If the method's first argument is present but is not an integer equal to 1000 or in the range 3000 to 4999,\n             *     throw an InvalidAccessError exception and abort these steps.\"\n             */\n            this.webSocket.close(code || 1000, reason || \"NORMAL_CLOSURE\");\n        } catch (e) {\n            this.logger.error('error disposing of transport.', e);\n        }\n        return this;\n    }\n\n    public sendText(data: string): CloverWebSocketInterface {\n        /*\n         Exceptions thrown\n\n         INVALID_STATE_ERR\n         The connection is not currently OPEN.\n         SYNTAX_ERR\n         The data is a string that has unpaired surrogates. (???)\n         */\n        this.webSocket.send(data);\n        return this;\n    }\n\n    public getState(): WebSocketState {\n        return this.getReadyState();\n    }\n\n    public isOpen(): boolean {\n        return this.getReadyState() == WebSocketState.OPEN;\n    }\n\n    /**\n     * Browser implementations do not do pong frames\n     */\n    public abstract sendPong(): CloverWebSocketInterface;\n\n    /**\n     * Browser implementations do not do ping frames\n     */\n    public abstract sendPing(): CloverWebSocketInterface;\n\n    public addListener(listener: WebSocketListener): void {\n        this.listeners.push(listener);\n    }\n\n    public removeListener(listener: WebSocketListener): boolean {\n        var indexOfListener = this.listeners.indexOf(listener);\n        if (indexOfListener !== -1) {\n            this.listeners.splice(indexOfListener, 1);\n            return true;\n        }\n        return false;\n    }\n\n    public getListeners(): Array<WebSocketListener> {\n        return this.listeners.slice();\n    }\n\n    // Wrapped functionality below\n    public getUrl(): String {\n        return this.webSocket.url;\n    }\n\n    public getReadyState(): WebSocketState {\n        return this.webSocket.readyState;\n    }\n\n    public getBufferedAmount(): number {\n        return this.webSocket.hasOwnProperty(\"bufferedAmount\") ? this.webSocket.bufferedAmount : 0;\n    }\n\n    public getProtocol(): string {\n        return this.webSocket.protocol;\n    }\n}\n"]}