{"version":3,"sources":["com/clover/json/JSONToCustomObject.ts"],"names":[],"mappings":"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","file":"../../../../com/clover/json/JSONToCustomObject.js","sourcesContent":["import {Logger} from '../../clover/remote/client/util/Logger';\n\n/**\n * A generic parser to take annotated javascript objects and populate them with\n * raw json data.\n *\n */\nexport class JSONToCustomObject {\n\n    // Create a logger\n    private log: Logger = Logger.create();\n\n    public constructor() {\n    }\n\n    /**\n     * Copies properties from a plain JavaScript object (sourceObject) into a remote-pay-cloud-api\n     * object (targetObject) that contains meta information.\n     *\n     * Sample call:\n     *\n     *  const saleRequestJSON = {\n     *    amount: 5000,\n     *    cardEntryMethods: 1,\n     *    externalId: \"testexternal\",\n     *    tipMode: \"NO_TIP\"\n     *  };\n     *\n     *  const saleRequest = new sdk.remotepay.SaleRequest();\n     *  new JSONToCustomObject.transfertoObject(saleRequestJSON, saleRequest, true);\n     *\n     * @param {Object} sourceObject - A plain JavaScript Object.\n     * @param {Object} targetObject - Generally an sdk object that has meta information (getter/setters, etc.)\n     * @param attachUnknownProperties - if true, then properties that are not recognized will still be\n     *  attached to the returned object, or; if the top level targetObject has no meta information,\n     *  then a copy of the passed sourceObject will be returned.\n     * @returns {Object | null}\n     */\n    public transfertoObject(sourceObject: any, targetObject: any, attachUnknownProperties: boolean): any {\n        if (typeof sourceObject === \"string\") {\n            // This should not happen, primitives are set outside this.\n            // Try to parse it as a json string\n            try {\n                sourceObject = JSON.parse(sourceObject);\n            } catch (e) {\n                this.log.warn(e);\n            }\n        }\n        // The sourceObject already has metainfo, we are done.\n        if (this.hasMetaInfo(sourceObject)) {\n            return sourceObject;\n        }\n        // First see if we can do this\n        if (this.hasMetaInfo(targetObject)) {\n            for (var key in sourceObject) {\n                // If the object is null or undefined (I don't think it can be undefined here...)\n                // Just set the field on the customobject to null or undefined.\n                if (sourceObject[key] === null || sourceObject[key] === undefined) {\n                    targetObject[key] = sourceObject[key];\n                } else {\n                    var metaInfo = targetObject.getMetaInfo(key);\n                    if (metaInfo) {\n                        // The field exists on the customObject.  Do some checks on type to\n                        // make sure we set the field to the proper value.\n                        if (this.isPrimitive(metaInfo)) {\n                            // Hope for the same type?  There is the possibility\n                            // of having different types that are compatible...\n                            targetObject[key] = sourceObject[key];\n                        } else if (this.isArray(metaInfo)) {\n                            var elementType = this.getArrayType(metaInfo);\n                            var jsonArray = sourceObject[key];\n                            // This must be an array.\n\n                            // The json from remote-pay has this structure for arrays:\n                            // foo: { elements : [ element ] }\n                            // handle this here\n                            if (jsonArray.hasOwnProperty(\"elements\")) {\n                                jsonArray = jsonArray.elements;\n                            }\n                            if (Array.isArray(jsonArray)) {\n                                targetObject[key] = [];\n                                for (var count = 0; count < jsonArray.length; count++) {\n                                    targetObject[key][count] = new elementType;\n                                    var copied = this.transfertoObject(jsonArray[count], targetObject[key][count], attachUnknownProperties);\n                                    if (copied) {\n                                        targetObject[key][count] = copied;\n                                    }\n                                }\n                            } else {\n                                // Warn.  We will be tolerant...\n                                this.log.warn(\"Passed json contains field \" + key + \" of type \" + typeof jsonArray +\n                                    \".  The field on the object is of type array.  No assignment will be made\", jsonArray, sourceObject);\n                                if (attachUnknownProperties) {\n                                    targetObject[\"x_\" + key] = jsonArray;\n                                }\n                            }\n                        } else if (this.isObject(metaInfo)) {\n                            // This is a base object.\n                            targetObject[key] = {};\n                            var copied = this.transfertoObject(sourceObject[key], targetObject[key], true);\n                            if (copied) {\n                                targetObject[key] = copied;\n                            }\n                        } else {\n                            var fieldType = metaInfo.type;\n                            // Might be an enum.  Check here.\n                            if (fieldType[sourceObject[key]]) {\n                                // It is an 'enum', grab the enum value.\n                                targetObject[key] = fieldType[sourceObject[key]];\n                            } else {\n                                try {\n                                    // The field is not primitive, or an array, or an 'enum'\n                                    // Try to create an instance of the type\n                                    targetObject[key] = new fieldType;\n                                } catch (e) {\n                                    this.log.error(\"fieldType is \", fieldType, \", key is \", key, \" for jsonobject \", sourceObject);\n                                    throw e;\n                                }\n                                var copied = this.transfertoObject(sourceObject[key], targetObject[key], attachUnknownProperties);\n                                if (copied) {\n                                    targetObject[key] = copied;\n                                }\n                            }\n                        }\n                    } else if (attachUnknownProperties) {\n                        // Add the unknown information as properties.\n                        targetObject[key] = JSON.parse(JSON.stringify(sourceObject));\n                    }\n                }\n            }\n        } else if (attachUnknownProperties) {\n            return JSON.parse(JSON.stringify(sourceObject));\n        }\n        return null;\n    };\n\n    public isPrimitive = function (metaInfo) {\n        var variableType = metaInfo.type;\n        return (\n            variableType === String ||\n            variableType === Number ||\n            variableType === Boolean );\n    };\n\n    public isArray = function (metaInfo) {\n        var variableType = metaInfo.type;\n        return ( variableType === Array );\n    };\n\n    public isObject = function (metaInfo) {\n        var variableType = metaInfo.type;\n        return ( variableType === Object );\n    };\n\n    public getArrayType = function (metaInfo) {\n        if (this.isArray(metaInfo)) {\n            return metaInfo.elementType;\n        }\n    };\n\n    /**\n     * Not used much.  Could be here for a map, but really do not want to see a map...\n     * @param metaInfo\n     * @returns {string}\n     */\n    public getValueType = function (metaInfo) {\n        return metaInfo.valueType;\n    }\n\n    private hasMetaInfo = function(obj: any) {\n        return obj[\"getMetaInfo\"] && typeof(obj.getMetaInfo) === 'function'\n    }\n}"]}