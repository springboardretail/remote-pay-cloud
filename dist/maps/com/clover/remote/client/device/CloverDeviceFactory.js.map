{"version":3,"sources":["com/clover/remote/client/device/CloverDeviceFactory.ts"],"names":[],"mappings":";;AAAA,yCAAsC;AAEtC;;;;GAIG;AACH;IACI;IACA,CAAC;IAED;;;;;OAKG;IACI,uBAAG,GAAV,UAAW,aAAa;QACpB,IAAI,YAAY,GAAG,aAAa,CAAC,mBAAmB,EAAE,CAAC;QAEvD,0CAA0C;QAC1C,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,CAAC;YACD,EAAE,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC,CAAC;QACzC,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,eAAM,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC;QAED,oCAAoC;QACpC,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IACL,0BAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,kDAAmB","file":"../../../../../../com/clover/remote/client/device/CloverDeviceFactory.js","sourcesContent":["import {Logger} from '../util/Logger';\n\n/**\n * Clover Device Factory\n *\n * The clover device factory returns new clover devices.\n */\nexport class CloverDeviceFactory {\n    constructor() {\n    }\n\n    /**\n     * Returns a new clover device based on the configuration\n     *\n     * @param {CloverDeviceConfiguration} configuration\n     * @returns CloverDevice\n     */\n    static get(configuration) {\n        var cloverDevice = configuration.getCloverDeviceType();\n\n        // Try to get the requested clover device.\n        var cd = null;\n        try {\n            cd = new cloverDevice(configuration);\n        }\n        catch (e) {\n            Logger.create().error(e);\n        }\n\n        // Return the clover device or null.\n        return cd;\n    }\n}\n"]}