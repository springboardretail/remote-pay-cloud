{"version":3,"sources":["com/clover/remote/client/device/WebSocketPairedCloverDeviceConfiguration.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,wGAAqG;AAGrG,2FAAwF;AAGxF;;;;;GAKG;AACH;IAAuE,4DAAkC;IAOrG;;;;;;;;;;;;OAYG;IACH,kDAAY,QAAgB,EAChB,aAAqB,EACrB,OAAe,EACf,YAAoB,EACpB,SAAiB,EACjB,wBAA6B,EAC7B,SAAqB,EACrB,iBAA0B,EAC1B,cAAuB;QARnC,YASI,kBAAM,aAAa,EACf,wBAAwB,EACxB,SAAS,EACT,iBAAiB,EACjB,cAAc,CAAC,SAMtB;QArCO,SAAG,GAAW,IAAI,CAAC;QAgCvB,KAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,KAAI,CAAC,kBAAkB,GAAG,wBAAwB,CAAC;;IACvD,CAAC;IAEM,wEAAqB,GAA5B;QACI,MAAM,CAAC,0CAA0C,CAAC;IACtD,CAAC;IAEM,0DAAO,GAAd;QACI,MAAM,CAAC,mCAAmC,CAAC;IAC/C,CAAC;IAEM,qEAAkB,GAAzB;QACI,yDAAyD;QACzD,4BAA4B;QAC5B,IAAI,SAAS,GAAG,IAAI,+DAA8B,CAC9C,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,6BAA6B,EAClC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7B,SAAS,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAEM,+DAAY,GAAnB,UAAoB,SAAiB;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAKL,+CAAC;AAAD,CAxEA,AAwEC,CAxEsE,uEAAkC,GAwExG;AAxEqB,4FAAwC","file":"../../../../../../com/clover/remote/client/device/WebSocketPairedCloverDeviceConfiguration.js","sourcesContent":["import {WebSocketPairedCloverTransport} from '../transport/websocket/WebSocketPairedCloverTransport';\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {PairingDeviceConfiguration} from '../transport/PairingDeviceConfiguration';\nimport {WebSocketCloverDeviceConfiguration} from './WebSocketCloverDeviceConfiguration';\nimport {IImageUtil} from '../../../util/IImageUtil';\n\n/**\n * This is the base class that is used when connecting directly to a device via the \"Network Pay Display\".\n *\n * A pairing scheme is used when connecting, so the function callbacks for when a pairing code is received,\n * and when the pairing completes must be implemented here.\n */\nexport abstract class WebSocketPairedCloverDeviceConfiguration extends WebSocketCloverDeviceConfiguration implements PairingDeviceConfiguration {\n\n    private uri: string = null;\n    private posName: string;\n    private serialNumber: string;\n    private authToken: string;\n\n    /**\n     *\n     * @param {string} endpoint - the endpoint of the Clover device. e.g. wss://192.168.1.15:12345/remote_pay\n     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1\n     * @param {string} posName - Displayed during pairing to display the POS name on the Mini. e.g. MyPOS\n     * @param {string} serialNumber - Displayed during pairing to display the device identifier. e.g. 'Aisle 3' or 'POS-35153234'\n     * @param {string} authToken - The authToken retrieved from a previous pairing activity, passed as an argument to onPairingSuccess. This will be null for the first connection\n     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface\n     *    that will be used when connecting.\n     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.\n     * @param {number} [heartbeatInterval] - duration to wait for a PING before disconnecting\n     * @param {number} [reconnectDelay] - duration to wait until a reconnect is attempted\n     */\n    constructor(endpoint: string,\n                applicationId: string,\n                posName: string,\n                serialNumber: string,\n                authToken: string,\n                webSocketFactoryFunction: any,\n                imageUtil: IImageUtil,\n                heartbeatInterval?: number,\n                reconnectDelay?: number) {\n        super(applicationId,\n            webSocketFactoryFunction,\n            imageUtil,\n            heartbeatInterval,\n            reconnectDelay);\n        this.uri = endpoint;\n        this.posName = posName;\n        this.serialNumber = serialNumber;\n        this.authToken = authToken;\n        this.webSocketImplClass = webSocketFactoryFunction;\n    }\n\n    public getMessagePackageName(): string {\n        return 'com.clover.remote_protocol_broadcast.app';\n    }\n\n    public getName(): string {\n        return 'Clover Secure WebSocket Connector';\n    }\n\n    public getCloverTransport(): CloverTransport {\n        // this is where we determine more about the transport...\n        // The connection is paired:\n        let transport = new WebSocketPairedCloverTransport(\n            this.uri,\n            this.heartbeatInterval,\n            this.reconnectDelay,\n            this.pingRetryCountBeforeReconnect,\n            this.posName,\n            this.serialNumber,\n            this.authToken,\n            this.webSocketImplClass);\n        transport.setPairingDeviceConfiguration(this);\n        return transport;\n    }\n\n    public setAuthToken(authToken: string) {\n        this.authToken = authToken;\n    }\n\n    abstract onPairingCode(pairingCode: string): void;\n\n    abstract onPairingSuccess(authToken: string): void;\n}\n"]}