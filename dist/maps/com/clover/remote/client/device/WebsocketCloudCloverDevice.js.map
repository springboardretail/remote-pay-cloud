{"version":3,"sources":["com/clover/remote/client/device/WebsocketCloudCloverDevice.ts"],"names":[],"mappings":"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","file":"../../../../../../com/clover/remote/client/device/WebsocketCloudCloverDevice.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\n\nimport {CloverDeviceConfiguration} from './CloverDeviceConfiguration';\nimport {DefaultCloverDevice} from './DefaultCloverDevice';\n\n/**\n * Device definition that has Cloud specific implementation details.\n */\nexport class WebsocketCloudCloverDevice extends DefaultCloverDevice {\n\n    constructor(configuration: CloverDeviceConfiguration) {\n        super(configuration);\n    }\n\n    /**\n     * The cloud sends a message to the device to let it know that the client is disconnecting\n     *\n     * @override\n     */\n    public dispose(): void {\n        let remoteMessage: sdk.remotemessage.RemoteMessage = this.buildRemoteMessageToSend(new sdk.remotemessage.ShutDownMessage());\n        this.sendRemoteMessage(remoteMessage);\n        super.dispose();\n    }\n\n    private disposeWithoutMessage(): void {\n        super.dispose();\n    }\n\n    /**\n     * Cloud connections can be interrupted by another terminal.  This handles this unique case by\n     * disconnecting without sending the shutdown command to the device.\n     *\n     * @param rMessage\n     */\n    protected handleRemoteMessageEVENT(rMessage: sdk.remotemessage.RemoteMessage) {\n        let method: sdk.remotemessage.Method = sdk.remotemessage.Method[rMessage.getMethod()];\n        if (method == null) {\n            this.logger.error('Unsupported method type: ' + rMessage.getMethod());\n        }\n        else {\n            let sdkMessage: sdk.remotemessage.Message = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);\n            if (method == sdk.remotemessage.Method.FORCECONNECT) {\n                this.logger.info(\"Connection was stolen!  Will not attempt reconnect.\", rMessage);\n                // Do we need to notify anyone?\n                this.notifyObserversForceConnect(sdkMessage);\n                this.disposeWithoutMessage();\n            }\n        }\n    }\n\n    /**\n     * Reports that this connection has been severed via a onDeviceError() notification\n     * @param message\n     */\n    private notifyObserversForceConnect(message: sdk.remotemessage.ForceConnectMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            let deviceErrorEvent: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.Interrupted);\n            deviceErrorEvent.setMessage(JSON.stringify(message));\n            deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);\n            obs.onDeviceError(deviceErrorEvent);\n        });\n    }\n\n    /**\n     * Handles \"RESET\" and \"SHUTDOWN\" messages that originate from the server. The RESET message is a request that the connection be\n     * severed and re-established.  This is done because open long-lived connections can cause load balancers orother proxy\n     * type servers to hang when an attempt to restart them is made. The SHUTDOWN message is sent when Cloud Pay Display stops.\n     *\n     * @param rMessage\n     */\n    protected handleRemoteMessage(rMessage: sdk.remotemessage.RemoteMessage) {\n        try {\n            if (rMessage.getMethod() === sdk.remotemessage.Method.RESET) {\n                this.logger.info(\"Reset requested!  Will reconnect.\");\n                this.transport.reset();\n            } else if (rMessage.getMethod() === sdk.remotemessage.Method.SHUTDOWN) {\n                this.logger.info(\"Cloud Pay Display has stopped!  Will disconnect.\");\n                this.transport.dispose();\n            } else {\n                super.handleRemoteMessage(rMessage);\n            }\n        }\n        catch (eM) {\n            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);\n        }\n    }\n}"]}