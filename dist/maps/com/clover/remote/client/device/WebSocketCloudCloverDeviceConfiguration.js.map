{"version":3,"sources":["com/clover/remote/client/device/WebSocketCloudCloverDeviceConfiguration.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sGAAmG;AAEnG,2EAAwE;AAExE,2FAAwF;AAIxF;;GAEG;AACH;IAA6D,2DAAkC;IAU3F;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,iDAAY,aAAqB,EACrB,wBAA6B,EAC7B,SAAqB,EACrB,YAAoB,EACpB,WAAmB,EACnB,WAAwB,EACxB,UAAkB,EAClB,QAAgB,EAChB,UAAkB,EAClB,YAA6B,EAC7B,iBAA0B,EAC1B,cAAuB;QAFvB,6BAAA,EAAA,oBAA6B;QATzC,YAYI,kBAAM,aAAa,EACf,wBAAwB,EACxB,SAAS,EACT,iBAAiB,EACjB,cAAc,CAAC,SAQtB;QAPG,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;IACrC,CAAC;IAEM,uEAAqB,GAA5B;QACI,MAAM,CAAC,sCAAsC,CAAC;IAClD,CAAC;IAEM,yDAAO,GAAd;QACI,MAAM,CAAC,kCAAkC,CAAC;IAC9C,CAAC;IAEM,qEAAmB,GAA1B;QACI,MAAM,CAAC,uDAA0B,CAAC;IACtC,CAAC;IAEM,oEAAkB,GAAzB;QACI,yDAAyD;QACzD,4BAA4B;QAC5B,IAAI,SAAS,GAAG,IAAI,6DAA6B,CAC7C,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,6BAA6B,EAClC,IAAI,CAAC,kBAAkB,EAEvB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,CACnB,CAAC;QACF,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IACL,8CAAC;AAAD,CAxFA,AAwFC,CAxF4D,uEAAkC,GAwF9F;AAxFY,0FAAuC","file":"../../../../../../com/clover/remote/client/device/WebSocketCloudCloverDeviceConfiguration.js","sourcesContent":["import {WebSocketCloudCloverTransport} from '../transport/websocket/WebSocketCloudCloverTransport';\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {WebsocketCloudCloverDevice} from './WebsocketCloudCloverDevice';\n\nimport {WebSocketCloverDeviceConfiguration} from './WebSocketCloverDeviceConfiguration';\nimport {HttpSupport} from '../../../util/HttpSupport';\nimport {IImageUtil} from '../../../util/IImageUtil';\n\n/**\n * Configuration used to create a connection to a device via the Clover cloud.\n */\nexport class WebSocketCloudCloverDeviceConfiguration extends WebSocketCloverDeviceConfiguration {\n\n    private cloverServer: string;\n    private accessToken: string;\n    private httpSupport: HttpSupport;\n    private merchantId: string;\n    private deviceId: string;\n    private friendlyId: string;\n    private forceConnect: boolean;\n\n    /**\n     *\n     * @param {string} applicationId - the applicationId that uniquely identifies the POS.\n     *    e.g. com.company.MyPOS:2.3.1 for the first connection\n     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the\n     *  CloverWebSocketInterface that will be used when connecting.  For Browser implementations, this can be\n     *  BrowserWebSocketImpl.createInstance.  For NodeJS implementations, this will be defined differently.\n     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.\n     * @param {string} cloverServer the base url for the clover server used in the cloud connection.\n     *    EX:  https://www.clover.com, http://localhost:9000\n     * @param {string} accessToken - the OAuth access token that will be used when contacting the clover server\n     * @param {HttpSupport} httpSupport - the helper object used when making http requests.\n     * @param {string} merchantId - the merchant the device belongs to.\n     * @param {string} deviceId - the id (not uuid) of the device to connect to\n     * @param {string} friendlyId - an identifier for the specific terminal connected to this device.  This id is used\n     *  in debugging and may be sent to other clients if they attempt to connect to the same device.  It will also be\n     *  sent to other clients that are currently connected if this device does a forceConnect.\n     * @param {boolean} forceConnect - if true, overtake any existing connection.\n     * @param {number} heartbeatInterval - duration to wait for a PING before disconnecting\n     * @param {number} reconnectDelay - duration to wait until a reconnect is attempted\n     */\n    constructor(applicationId: string,\n                webSocketFactoryFunction: any,\n                imageUtil: IImageUtil,\n                cloverServer: string,\n                accessToken: string,\n                httpSupport: HttpSupport,\n                merchantId: string,\n                deviceId: string,\n                friendlyId: string,\n                forceConnect: boolean = false,\n                heartbeatInterval?: number,\n                reconnectDelay?: number) {\n        super(applicationId,\n            webSocketFactoryFunction,\n            imageUtil,\n            heartbeatInterval,\n            reconnectDelay);\n        this.cloverServer = cloverServer;\n        this.accessToken = accessToken;\n        this.httpSupport = httpSupport;\n        this.merchantId = merchantId;\n        this.deviceId = deviceId;\n        this.friendlyId = friendlyId;\n        this.forceConnect = forceConnect;\n    }\n\n    public getMessagePackageName(): string {\n        return 'com.clover.remote.protocol.websocket';\n    }\n\n    public getName(): string {\n        return 'Clover Cloud WebSocket Connector';\n    }\n\n    public getCloverDeviceType(): any {\n        return WebsocketCloudCloverDevice;\n    }\n\n    public getCloverTransport(): CloverTransport {\n        // this is where we determine more about the transport...\n        // The connection is paired:\n        let transport = new WebSocketCloudCloverTransport(\n            this.heartbeatInterval,\n            this.reconnectDelay,\n            this.pingRetryCountBeforeReconnect,\n            this.webSocketImplClass,\n\n            this.cloverServer,\n            this.merchantId,\n            this.accessToken,\n            this.deviceId,\n            this.friendlyId,\n            this.forceConnect,\n            this.httpSupport\n        );\n        return transport;\n    }\n}\n"]}