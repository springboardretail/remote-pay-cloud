{"version":3,"sources":["com/clover/remote/client/device/DefaultCloverDevice.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,0CAA4C;AAC5C,yEAAsE;AACtE,+CAA4C;AAC5C,sDAAmD;AAMnD,yCAAsC;AACtC,4CAAyC;AAEzC;;;;GAIG;AACH;IAAkD,uCAAY;IAoB1D,6BAAY,aAAwC;QAApD,YACI,kBACI,aAAa,CAAC,qBAAqB,EAAE,EACrC,aAAa,CAAC,kBAAkB,EAAE,EAClC,aAAa,CAAC,gBAAgB,EAAE,CAAC,SAKxC;QA3BS,YAAM,GAAW,eAAM,CAAC,MAAM,EAAE,CAAC;QACjC,mBAAa,GAAwB,yCAAmB,CAAC,kBAAkB,EAAE,CAAC;QAKhF,2BAAqB,GAAW,mBAAmB,CAAC,8BAA8B,CAAC;QAQnF,iBAAW,GAAiC,EAAE,CAAC;QASnD,KAAI,CAAC,SAAS,GAAG,aAAa,CAAC,YAAY,EAAE,CAAC;QAC9C,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,uBAAuB,EAAE,CAAC,CAAC;QACrF,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAI,CAAC,CAAC;QAC/B,KAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,KAAI,CAAC,CAAC;;IAChD,CAAC;IAED;;;;OAIG;IACI,+CAAiB,GAAxB,UAAyB,SAA0B;QAC/C,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IACI,2CAAa,GAApB,UAAqB,SAA0B;QAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,kDAAoB,GAA3B,UAA4B,SAA0B,EAAE,OAAgB;QACpE,IAAI,CAAC,2BAA2B,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,2CAAa,GAApB,UAAqB,WAAiD;QAClE,IAAI,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;IAEM,8CAAgB,GAAvB;QACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAES,qDAAuB,GAAjC,UAAkC,QAAyC;QACvE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAES,qDAAuB,GAAjC,UAAkC,QAAyC;QACvE,QAAQ;IACZ,CAAC;IAED,sBAAW,qDAAoB;aAA/B;YACI,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;QACtC,CAAC;QAED;;;;;;WAMG;aACH,UAAgC,oBAA4B;YACxD,EAAE,CAAC,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBACpD,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;YACtD,CAAC;QACL,CAAC;;;OAbA;IAeS,wDAA0B,GAApC,UAAqC,QAAyC;QAC1E,IAAI,CAAC,oBAAoB,GAAG,OAAO,QAAQ,CAAC,YAAY,CAAC,KAAK,UAAU,GAAG,QAAQ,CAAC,UAAU,EAAE,GAAG,mBAAmB,CAAC,8BAA8B,CAAC;QACtJ,IAAI,MAAM,GAA6B,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QACtF,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,UAAU,GAA8B,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;YAC1G,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC5E,CAAC;YACD,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACb,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK;oBAC/B,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,IAAI,CAAC,+BAA+B,CAA6C,UAAU,CAAC,CAAC;oBAC7F,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG;oBAC7B,IAAI,CAAC,iBAAiB,CAA4C,UAAU,CAAC,CAAC;oBAC9E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB;oBAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;oBAC9C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAA+C,UAAU,CAAC,CAAC;oBACnG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,uBAAuB;oBACjD,IAAI,CAAC,6BAA6B,CAA2C,UAAU,CAAC,CAAC;oBACzF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,aAAa;oBACvC,IAAI,CAAC,2BAA2B,CAAyC,UAAU,CAAC,CAAC;oBACrF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS;oBACnC,IAAI,CAAC,uBAAuB,CAAqC,UAAU,CAAC,CAAC;oBAC7E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS;oBACnC,IAAI,CAAC,yBAAyB,CAAqC,UAAU,CAAC,CAAC;oBAC/E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,qBAAqB;oBAC/C,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY;oBACtC,IAAI,CAAC,0BAA0B,CAAwC,UAAU,CAAC,CAAC;oBACnF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc;oBACxC,yFAAyF;oBACzF,mGAAmG;oBACnG,+GAA+G;oBAC/G,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS;oBACnC,IAAI,CAAC,uBAAuB,CAAqC,UAAU,CAAC,CAAC;oBAC7E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,IAAI,CAAC,qBAAqB,CAA4C,UAAU,CAAC,CAAC;oBAClF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ;oBAClC,IAAI,CAAC,sBAAsB,CAAoC,UAAU,CAAC,CAAC;oBAC3E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ;oBAClC,IAAI,CAAC,sBAAsB,CAAoC,UAAU,CAAC,CAAC;oBAC3E,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,IAAI,CAAC,8BAA8B,CAA4C,UAAU,CAAC,CAAC;oBAC3F,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe;oBACzC,IAAI,CAAC,oCAAoC,CAA2C,UAAU,CAAC,CAAC;oBAChG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc;oBACxC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,mBAAmB;oBAC7C,IAAI,CAAC,0BAA0B,CAA8C,UAAU,CAAC,CAAC;oBACzF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,mBAAmB;oBAC7C,IAAI,CAAC,+BAA+B,CAA8C,UAAU,CAAC,CAAC;oBAC9F,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,wBAAwB;oBAClD,IAAI,CAAC,6BAA6B,CAAmD,UAAU,CAAC,CAAC;oBACjG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,IAAI,CAAC,uBAAuB,CAA6C,UAAU,CAAC,CAAC;oBACrF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,kCAAkC;oBAC5D,IAAI,CAAC,sCAAsC,CAA4D,UAAU,CAAC,CAAC;oBACnH,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB;oBAC5C,IAAI,CAAC,2BAA2B,CAA6C,UAAU,CAAC,CAAC;oBACzF,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,8BAA8B;oBACxD,IAAI,CAAC,6BAA6B,CAAiD,UAAU,CAAC,CAAC;oBAC/F,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,yBAAyB;oBACnD,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,0BAA0B;oBACpD,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,6BAA6B;oBACvD,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,4BAA4B;oBACtD,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW;oBACrC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU;oBACpC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,IAAI,CAAC,+BAA+B,CAA6C,UAAU,CAAC,CAAC;oBAC7F,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY;oBACtC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;oBAC5C,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,+BAA+B;oBACzD,IAAI,CAAC,2CAA2C,CAAyD,UAAU,CAAC,CAAC;oBACrH,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,qBAAqB;oBAC/C,IAAI,CAAC,kCAAkC,CAAgD,UAAU,CAAC,CAAC;oBACnG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,yBAAyB;oBACnD,IAAI,CAAC,sCAAsC,CAAoD,UAAU,CAAC,CAAC;oBAC3G,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,qBAAqB;oBAC/C,IAAI,CAAC,uCAAuC,CAAgD,UAAU,CAAC,CAAC;oBACxG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,yBAAyB;oBACnD,IAAI,CAAC,qCAAqC,CAAmD,UAAU,CAAC,CAAC;oBACzG,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,qBAAqB;oBAC/C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,mBAAmB;oBAC7C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,kBAAkB;oBAC5C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ;oBAClC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,YAAY;oBACtC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe;oBACzC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB;oBAC3C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU;oBACpC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,4BAA4B;oBACtD,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU;oBACpC,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,gBAAgB;oBAC1C,gBAAgB;oBAChB,KAAK,CAAC;gBACV,KAAK,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,wBAAwB;oBAClD,gBAAgB;oBAChB,KAAK,CAAC;gBACV;oBACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;oBAChF,KAAK,CAAC;YACd,CAAC;QACL,CAAC;IACL,CAAC;IAES,sDAAwB,GAAlC,UAAmC,QAAyC;QACxE,QAAQ;IACZ,CAAC;IAES,sDAAwB,GAAlC,UAAmC,QAAyC;QACxE,QAAQ;IACZ,CAAC;IAES,iDAAmB,GAA7B,UAA8B,QAAyC;QACnE,IAAI,CAAC;YACD,IAAI,OAAO,GAAwC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACtE,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtD,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YACpF,CAAC;QACL,CAAC;QACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QAChF,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,uCAAS,GAAhB,UAAiB,OAAe;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC;YACD,oBAAoB;YACpB,IAAI,QAAQ,GAAoC,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACjG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;IACL,CAAC;IAED;;;;OAIG;IACK,sCAAQ,GAAhB,UAAiB,WAA4C;QACzD,IAAI,aAAa,GAAoC,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QAC3F,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChE,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,aAAa,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACjE,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED;;;;OAIG;IACK,sDAAwB,GAAhC,UAAiC,SAA0B;QAA3D,iBAIC;QAHG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,iBAAiB,CAAC,KAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACK,yDAA2B,GAAnC,UAAoC,SAA0B,EAAE,OAAgB;QAAhF,iBAIC;QAHG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,oBAAoB,CAAC,KAAI,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACK,wDAA0B,GAAlC,UAAmC,UAAgD;QAC/E,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACK,kDAAoB,GAA5B,UAA6B,SAA0B,EAAE,GAA+C;QAAxG,iBAIC;QAHG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,aAAa,CAAC,KAAI,EAAE,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,+CAAiB,GAAzB,UAA0B,UAAoD;QAC1E,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC;YACzD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QACD,2CAA2C;QAC3C,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,2DAA6B,GAArC,UAAsC,OAAsD;QACxF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,qBAAqB,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,6DAA+B,GAAvC,UAAwC,GAA8C;QAClF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,IAAI,MAAM,GAAmC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;gBAClE,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO;gBACtC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC;YAC1C,GAAG,CAAC,kBAAkB,CAAC,MAAM,EAAE,GAAG,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,aAAa,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,yDAA2B,GAAnC,UAAoC,KAAgD;QAChF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,kBAAkB,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,yEAA2C,GAAnD,UAAoD,OAA8D;QAC9G,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,sBAAsB,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/H,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oEAAsC,GAA9C,UAA+C,OAAyD;QACpG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,yBAAyB,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,oBAAoB,EAAE,EAAE,OAAO,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC;QAC3K,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,qEAAuC,GAA/C,UAAgD,OAAqD;QACjG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,0BAA0B,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,mEAAqC,GAA7C,UAA8C,OAAwD;QAClG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,wBAAwB,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,qBAAqB,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3H,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,gEAAkC,GAA1C,UAA2C,OAAqD;QAC5F,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,wDAA0B,GAAlC,UAAmC,OAAsC;QACrE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,0BAA0B;YAC1B,IAAI,gBAAgB,GAAyC,IAAI,GAAG,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;YACxG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC1E,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YACrD,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC5D,GAAG,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,kEAAoC,GAA3C,UAA4C,GAA4C;QACpF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,uDAAyB,GAAhC,UAAiC,QAA2C;QACxE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,6DAA+B,GAAtC,UAAuC,UAAqD;QACxF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,kBAAkB,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qDAAuB,GAA9B,UAA+B,QAA2C;QACtE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,mDAAqB,GAA5B,UAA6B,KAA+C;QACxE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;QACnG,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,wDAA0B,GAAjC,UAAkC,IAAgD;QAC9E,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,wDAA0B,GAAjC,UAAkC,WAAiD;QAC/E,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0DAA4B,GAAnC,UAAoC,OAA6B,EAAE,UAAgC,EAAE,MAAsC,EAAE,MAAc,EAAE,OAAe;QACxK,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,4DAA8B,GAArC,UAAsC,YAAsD;QACxF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,YAAY,CAAC,YAAY,EAAE,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2DAA6B,GAApC,UAAqC,qBAA8D;QAC/F,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,UAAU,EAAE,EAAE,qBAAqB,CAAC,aAAa,EAAE,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,6DAA+B,GAAtC,UAAuC,wBAAoE;QACvG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,OAAO,EAAE,EAAE,wBAAwB,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE,wBAAwB,CAAC,SAAS,EAAE,CAAC,CAAC;QACvJ,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oDAAsB,GAA7B,UAA8B,UAA4C;QACtE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE,UAAU,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,cAAc,EAAE,EAAE,UAAU,CAAC,eAAe,EAAE,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2DAA6B,GAApC,UAAqC,KAAsD;QACvF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;QAC9H,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qDAAuB,GAA9B,UAA+B,GAA8C;QACzE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,SAAS,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oEAAsC,GAA7C,UAA8C,KAA+D;QACzG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,yBAAyB,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,wBAAwB,EAAE,CAAC,CAAC;QACjI,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oDAAsB,GAA7B,UAA8B,UAA4C;QACtE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,yDAA2B,GAAlC,UAAmC,GAA0C;QACzE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qDAAuB,GAA9B,UAA+B,GAAsC;QACjE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAG;YAC7B,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBACnB,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,YAAY,EAAE,EAAE,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;YAC/E,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACzB,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBACzB,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;YACpC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACI,wDAA0B,GAAjC,UAAkC,OAAe,EAAE,SAAiB;QAChE,IAAM,OAAO,GAAuD,IAAI,GAAG,CAAC,aAAa,CAAC,gCAAgC,EAAE,CAAC;QAC7H,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,wCAAU,GAAjB,UAAkB,QAAoC;QAClD,IAAI,OAAO,GAAsC,IAAI,GAAG,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QACzF,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,kDAAoB,GAA3B;QACI,IAAM,OAAO,GAAsC,IAAI,GAAG,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QAC3F,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAEpC,CAAC;IAED;;OAEG;IACI,iDAAmB,GAA1B;QACI,IAAM,OAAO,GAAqC,IAAI,GAAG,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;QACzF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,iDAAmB,GAA1B,UAA2B,OAA6B,EAAE,QAAiB;QACvE,IAAM,OAAO,GAA+C,IAAI,GAAG,CAAC,aAAa,CAAC,wBAAwB,EAAE,CAAC;QAC7G,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,uDAAyB,GAAhC;QACI,IAAM,OAAO,GAAqD,IAAI,GAAG,CAAC,aAAa,CAAC,8BAA8B,EAAE,CAAC;QACzH,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,+CAAiB,GAAxB,UAAyB,IAAY;QACjC,IAAM,OAAO,GAAsC,IAAI,GAAG,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QAC3F,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,8CAAgB,GAAvB,UAAwB,MAAc,EAAE,QAAiB;QACrD,IAAM,OAAO,GAA4C,IAAI,GAAG,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;QACvG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,IAAI,GAAG,GAAwB,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACzD,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpB,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,wCAAU,GAAjB,UAAkB,aAAsB,EAAE,OAAe;QACrD,IAAM,OAAO,GAA6C,IAAI,GAAG,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;QACzG,OAAO,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QACxC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACI,uCAAS,GAAhB,UAAiB,SAAsC,EAAE,KAAsB,EAAE,WAAmB;QAChG,IAAM,OAAO,GAA4C,IAAI,GAAG,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;QACvG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxB,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACpC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACI,6CAAe,GAAtB,UAAuB,OAAe,EAAE,SAAiB,EAAE,MAAc;QACrE,IAAM,OAAO,GAAuC,IAAI,GAAG,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAC7F,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,4CAAc,GAArB,UAAsB,SAAsC;QACxD,IAAM,OAAO,GAA6C,IAAI,GAAG,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;QACzG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,qDAAuB,GAA9B,UAA+B,QAAgB,EAAE,OAAe;QAC5D,IAAM,OAAO,GAAgD,IAAI,GAAG,CAAC,aAAa,CAAC,yBAAyB,EAAE,CAAC;QAC/G,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC5B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,yCAAW,GAAlB,UAAmB,SAAwB,EAAE,cAAuB,EAAE,aAAsB;QACxF,IAAM,OAAO,GAAuC,IAAI,GAAG,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAC7F,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,OAAO,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAClD,CAAC;QACD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAChB,IAAI,GAAG,GAAwB,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACzD,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACzB,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,gDAAkB,GAAzB,UAA0B,MAAW,EAAE,cAAuB,EAAE,aAAsB;QAAtF,iBAsBC;QArBG,IAAM,OAAO,GAAwC,IAAI,GAAG,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;QAC/F,4BAA4B;QAC5B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,UAAC,WAAW;YAC9C,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC5B,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACjB,OAAO,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAClD,CAAC;YACD,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChB,IAAI,GAAG,GAAwB,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACzD,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;gBACzB,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC;YACD,EAAE,CAAC,CAAC,KAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;gBAClC,8FAA8F;gBAC9F,IAAI,SAAS,GAAW,OAAO,CAAC,MAAM,EAAE,CAAC;gBACzC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrB,KAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC3E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;;;OAUG;IACI,6CAAe,GAAtB,UAAuB,GAAW,EAAE,cAAuB,EAAE,aAAsB;QAAnF,iBAUC;QATG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,GAAG,EAAE,UAAC,KAAK;YACvC,KAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;QAClE,CAAC,EAAE,UAAC,YAAY;YACZ,IAAI,gBAAgB,GAAyC,IAAI,GAAG,CAAC,SAAS,CAAC,sBAAsB,EAAE,CAAC;YACxG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC1E,gBAAgB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAC1C,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC5D,KAAI,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,6CAAe,GAAtB,UAAuB,MAAc,EAAE,OAAe,EAAE,WAAoB;QACxE,IAAM,OAAO,GAAsC,IAAI,GAAG,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;QAC3F,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACpC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,2CAAa,GAApB,UAAqB,OAA6B,EAAE,MAA4B;QAAhF,iBAsBC;QArBG,IAAI,OAAO,GAAyC,IAAI,GAAG,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;QAC/F,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAE9B,IAAI,aAAa,GAAoC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAC5F,IAAI,KAAK,GAAW,aAAa,CAAC,KAAK,EAAE,CAAC;QAE1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YACtC,IAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC3G,CAAC;QACD,IAAI,CAAC,CAAC;YACF,iDAAiD;YACjD,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;gBACtB,KAAI,CAAC,4BAA4B,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3G,CAAC,CAAC,CAAC;YACH,mCAAmC;YACnC,6GAA6G;YAC7G,IAAI;YACJ,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IAES,2CAAa,GAAvB,UAAwB,KAAa,EAAE,IAAc;QACjD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACnC,CAAC;IAED;;;;;;;OAOG;IACI,6CAAe,GAAtB,UAAuB,OAAe,EAAE,SAAiB,EAAE,MAAc,EAAE,UAAmB;QAC1F,IAAM,OAAO,GAA2C,IAAI,GAAG,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC;QACrG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,yCAAW,GAAlB,UAAmB,gBAAwB;QACvC,IAAM,OAAO,GAAuC,IAAI,GAAG,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;QAC7F,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QAC9C,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACI,2CAAa,GAApB,UAAqB,SAAiB,EAAE,MAAc,EAAE,SAAiB;QACrE,IAAM,OAAO,GAA4C,IAAI,GAAG,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;QACvG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1B,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,6CAAe,GAAtB,UAAuB,OAA6B;QAChD,IAAM,OAAO,GAA8C,IAAI,GAAG,CAAC,aAAa,CAAC,uBAAuB,EAAE,CAAC;QAC3G,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,6CAAe,GAAtB,UAAuB,OAA6B,EAAE,SAA6B;QAC/E,IAAM,OAAO,GAA6C,IAAI,GAAG,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;QACzG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,gDAAkB,GAAzB;QACI,IAAM,GAAG,GAA8C,IAAI,GAAG,CAAC,aAAa,CAAC,uBAAuB,EAAE,CAAC;QACvG,GAAG,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACI,2CAAa,GAApB,UAAqB,KAA6B,EAAE,cAAmB;QACnE,IAAM,OAAO,GAAyC,IAAI,GAAG,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;QACjG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBACxE,OAAO,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;YACvD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC,CAAC;gBACjF,OAAO,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;YACzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAC/E,OAAO,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;YACvD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC,CAAC;gBACjF,OAAO,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;YACzD,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,cAAc,YAAY,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC7E,OAAO,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;YACrD,CAAC;QACL,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,2CAAa,GAApB;QACI,IAAM,OAAO,GAAmC,IAAI,GAAG,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;QACrF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,oDAAsB,GAA7B,UAA8B,OAAkD;QAC5E,IAAM,OAAO,GAAyD,IAAI,GAAG,CAAC,aAAa,CAAC,kCAAkC,EAAE,CAAC;QACjI,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC;QACzD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,+CAAiB,GAAxB,UAAyB,iBAAyB;QAC9C,IAAM,OAAO,GAAoD,IAAI,GAAG,CAAC,aAAa,CAAC,6BAA6B,EAAE,CAAC;QACvH,OAAO,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QAChD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,gDAAkB,GAAzB,UAA0B,QAAoC;QAC1D,IAAM,OAAO,GAAgD,IAAI,GAAG,CAAC,aAAa,CAAC,yBAAyB,EAAE,CAAC;QAC/G,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,sDAAwB,GAA/B,UAAgC,cAAsB;QAClD,IAAM,OAAO,GAAmD,IAAI,GAAG,CAAC,aAAa,CAAC,4BAA4B,EAAE,CAAC;QACrH,OAAO,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAC9C,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,qCAAO,GAAd;QACI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;IACL,CAAC;IAEM,+CAAiB,GAAxB,UAAyB,aAAwC,EAAE,UAAmB,EAAE,kBAA2B;QAC/G,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC,iDAAiD;IACrI,CAAC;IAEO,oDAAsB,GAA9B,UAA+B,aAAwC;QACnE,oCAAoC;QACpC,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,2BAA2B;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,IAAI,KAAK,CAAC,mBAAmB,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAChG,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,2BAA2B;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;YAClE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7C,CAAC;QAED,IAAM,SAAS,GAAW,CAAC,EAAE,mBAAmB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QAC1D,IAAM,qBAAqB,GAAoC,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QACrG,qBAAqB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACvC,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAC3E,qBAAqB,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACvD,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtE,qBAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC5D,qBAAqB,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzE,qBAAqB,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACjE,MAAM,CAAC,qBAAqB,CAAC;IACjC,CAAC;IAED;;;;;;;;;;OAUG;IACK,wDAA0B,GAAlC,UAAmC,OAAkC;QACjE,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;YAC3B,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBACvC,OAAO,CAAC,QAAQ,CAAC,CAAC,uBAAuB,GAAG,IAAI,CAAC;YACrD,CAAC;QACL,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAES,sDAAwB,GAAlC,UAAmC,OAAkC;QACjE,IAAM,aAAa,GAAoC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC5F,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACnD,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC,CAAC;QACvF,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IAES,iDAAmB,GAA7B,UAA8B,OAAkC,EAAE,UAAmB,EAAE,kBAA2B;QAC9G,IAAM,aAAa,GAAoC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC5F,OAAO,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,mBAAmB,CAAC,eAAe,CAAC,CAAC;QAElF,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;YAClC,IAAM,eAAe,GAAG,CAAC,cAAc,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC;YAClG,EAAE,CAAC,CAAC,eAAe,IAAI,UAAU,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,iCAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACrE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2EAA2E,CAAC,CAAC;oBAC/F,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBACD,IAAI,aAAa,GAAW,CAAC,CAAC;gBAC9B,+BAA+B;gBAC/B,OAAO,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC/B,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBACrC,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBACtD,aAAa,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;wBACzC,cAAc,GAAG,EAAE,CAAC;wBACpB,0EAA0E;wBAC1E,aAAa,CAAC,eAAe,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC;oBACtD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,aAAa,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;wBAC/E,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;oBACvE,CAAC;oBACD,aAAa,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,CAAC;oBAChD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;gBAC1C,CAAC,CAAC,2BAA2B;gBAC7B,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC/B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACb,iCAAiC;oBACjC,EAAE,CAAC,CAAC,kBAAkB,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnD,aAAa,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAC;wBAC3E,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;4BAC3B,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;4BACrC,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gCAClD,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gCACxC,UAAU,GAAG,EAAE,CAAC;gCAChB,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;4BACxC,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gCAC9E,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;4BAC/D,CAAC;4BACD,aAAa,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,CAAC;4BAChD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;wBAC1C,CAAC,CAAC,8BAA8B;oBACpC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,mDAAmD;wBACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4EAA4E,CAAC,CAAC;wBAChG,kHAAkH;oBACtH,CAAC;gBACL,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sNAAsN,CAAC,CAAC;gBAC7O,CAAC;gBACD,aAAa,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBACzC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACb,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC5C,CAAC;gBACD,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,+CAA+C;YAC/C,aAAa,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAEgB,mCAAe,GAAhC,UAAiC,GAAW,EAAE,KAAU;QACpD,yFAAyF;QACzF,sEAAsE;QACtE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;YACpB,CAAC,KAAK,CAAC,cAAc,CAAC,yBAAyB,CAAC;YAChD,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,2DAA2D;YAC3D,gBAAgB;YAChB,2BAA2B;YAC3B,MAAM,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAES,+CAAiB,GAA3B,UAA4B,aAA8C;QACtE,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAY,OAAS,CAAC,CAAC;YACzC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA2C,OAAS,CAAC,CAAC;QAC5E,CAAC;IACL,CAAC;IAED;;;;OAIG;IACK,sDAAwB,GAAhC;QACI,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;IACzC,CAAC;IA1oCD,8GAA8G;IAC9G,sEAAsE;IACvD,kDAA8B,GAAW,CAAC,CAAC;IAG3C,8BAAU,GAAW,iBAAO,CAAC,gBAAgB,GAAG,GAAG,GAAG,iBAAO,CAAC,wBAAwB,CAAC;IACvF,0BAAM,GAAW,QAAQ,CAAC;IAC1B,qCAAiB,GAAW,mBAAmB,CAAC,MAAM,GAAG,aAAa,CAAC;IAEvE,sBAAE,GAAW,CAAC,CAAC;IAkoClC,0BAAC;CAhpCD,AAgpCC,CAhpCiD,2BAAY,GAgpC7D;AAhpCqB,kDAAmB","file":"../../../../../../com/clover/remote/client/device/DefaultCloverDevice.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\nimport {RemoteMessageParser} from '../../../json/RemoteMessageParser';\nimport {CloverDevice} from './CloverDevice';\nimport {CloverConnector} from '../CloverConnector';\nimport {CloverTransport} from '../transport/CloverTransport';\nimport {ObjectMessageSender} from '../transport/ObjectMessageSender';\nimport {CloverTransportObserver} from '../transport/CloverTransportObserver';\nimport {CloverDeviceConfiguration} from './CloverDeviceConfiguration';\nimport {IImageUtil} from '../../../util/IImageUtil';\nimport {Logger} from '../util/Logger';\nimport {Version} from '../../../Version';\n\n/**\n * Default Clover Device\n *\n * This is a default implementation of the clover device.\n */\nexport abstract class DefaultCloverDevice extends CloverDevice implements CloverTransportObserver, ObjectMessageSender {\n\n    protected logger: Logger = Logger.create();\n    protected messageParser: RemoteMessageParser = RemoteMessageParser.getDefaultInstance();\n\n    // Remote message version and message version are not the same.  Remote message version is used for high-level\n    // feature detection - e.g. is message fragmentation supported or not?\n    private static DEFAULT_REMOTE_MESSAGE_VERSION: number = 1;\n    private _remoteMessageVersion: number = DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;\n\n    private static REMOTE_SDK: string = Version.CLOVER_CLOUD_SDK + \":\" + Version.CLOVER_CLOUD_SDK_VERSION;\n    private static BASE64: string = \"BASE64\";\n    private static BASE64_ATTACHMENT: string = DefaultCloverDevice.BASE64 + \".ATTACHMENT\";\n\n    private static id: number = 0;\n\n    private msgIdToTask: { [key: string]: Function; } = {};\n    private imageUtil: IImageUtil;\n    private maxMessageSizeInChars: number;\n\n    constructor(configuration: CloverDeviceConfiguration) {\n        super(\n            configuration.getMessagePackageName(),\n            configuration.getCloverTransport(),\n            configuration.getApplicationId());\n        this.imageUtil = configuration.getImageUtil();\n        this.maxMessageSizeInChars = Math.max(1000, configuration.getMaxMessageCharacters());\n        this.transport.subscribe(this);\n        this.transport.setObjectMessageSender(this);\n    }\n\n    /**\n     * Device is there but not yet ready for use\n     *\n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceConnected(transport: CloverTransport): void {\n        this.notifyObserversConnected(transport);\n    }\n\n    /**\n     * Device is there and ready for use\n     *\n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceReady(transport: CloverTransport): void {\n        this.doDiscoveryRequest();\n    }\n\n    /**\n     * Device is not there anymore\n     *\n     * @param {CloverTransport} transport - the transport holding the notifications\n     */\n    public onDeviceDisconnected(transport: CloverTransport, message?: string): void {\n        this.notifyObserversDisconnected(transport, message);\n    }\n\n    public onDeviceError(deviceError: sdk.remotepay.CloverDeviceErrorEvent): void {\n        this.notifyObserversDeviceError(deviceError);\n    }\n\n    public getApplicationId(): string {\n        return this.applicationId;\n    }\n\n    protected handleRemoteMessagePING(rMessage: sdk.remotemessage.RemoteMessage) {\n        this.sendPong(rMessage);\n    }\n\n    protected handleRemoteMessagePONG(rMessage: sdk.remotemessage.RemoteMessage) {\n        // no-op\n    }\n\n    public get remoteMessageVersion(): number {\n        return this._remoteMessageVersion;\n    }\n\n    /**\n     * Remote Message version is used for high-level feature detection e.g. is chunking supported.\n     * We set the remote version when incoming messages are handled (handleRemoteMessageCOMMAND).\n     * We only want to set _remoteMessageVersion if the inbound message is > than the version already set.\n     *\n     * @param {number} remoteMessageVersion\n     */\n    public set remoteMessageVersion(remoteMessageVersion: number) {\n        if (remoteMessageVersion > this._remoteMessageVersion) {\n            this._remoteMessageVersion = remoteMessageVersion;\n        }\n    }\n\n    protected handleRemoteMessageCOMMAND(rMessage: sdk.remotemessage.RemoteMessage) {\n        this.remoteMessageVersion = typeof rMessage[\"getVersion\"] === \"function\" ? rMessage.getVersion() : DefaultCloverDevice.DEFAULT_REMOTE_MESSAGE_VERSION;\n        let method: sdk.remotemessage.Method = sdk.remotemessage.Method[rMessage.getMethod()];\n        if (method == null) {\n            this.logger.error('Unsupported method type: ' + rMessage.getMethod());\n        }\n        else {\n            var sdkMessage: sdk.remotemessage.Message = this.messageParser.parseMessageFromRemoteMessageObj(rMessage);\n            if (sdkMessage == null) {\n                this.logger.error('Error parsing message: ' + JSON.stringify(rMessage));\n            }\n            switch (method) {\n                case sdk.remotemessage.Method.BREAK:\n                    break;\n                case sdk.remotemessage.Method.CASHBACK_SELECTED:\n                    this.notifyObserversCashbackSelected(<sdk.remotemessage.CashbackSelectedMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.ACK:\n                    this.notifyObserverAck(<sdk.remotemessage.AcknowledgementMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.DISCOVERY_RESPONSE:\n                    this.logger.debug('Got a Discovery Response');\n                    this.notifyObserversReady(this.transport, <sdk.remotemessage.DiscoveryResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.CONFIRM_PAYMENT_MESSAGE:\n                    this.notifyObserversConfirmPayment(<sdk.remotemessage.ConfirmPaymentMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.FINISH_CANCEL:\n                    this.notifyObserversFinishCancel(<sdk.remotemessage.FinishCancelMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.FINISH_OK:\n                    this.notifyObserversFinishOk(<sdk.remotemessage.FinishOkMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.KEY_PRESS:\n                    this.notifyObserversKeyPressed(<sdk.remotemessage.KeyPressMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.ORDER_ACTION_RESPONSE:\n                    break;\n                case sdk.remotemessage.Method.PARTIAL_AUTH:\n                    this.notifyObserversPartialAuth(<sdk.remotemessage.PartialAuthMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.PAYMENT_VOIDED:\n                    // currently this only gets called during a TX, so falls outside our current process flow\n                    //PaymentVoidedMessage vpMessage = (PaymentVoidedMessage) Message.fromJsonString(rMessage.payload);\n                    //this.notifyObserversPaymentVoided(vpMessage.payment, vpMessage.voidReason, ResultStatus.SUCCESS, null, null);\n                    break;\n                case sdk.remotemessage.Method.TIP_ADDED:\n                    this.notifyObserversTipAdded(<sdk.remotemessage.TipAddedMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.TX_START_RESPONSE:\n                    this.notifyObserverTxStart(<sdk.remotemessage.TxStartResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.TX_STATE:\n                    this.notifyObserversTxState(<sdk.remotemessage.TxStateMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.UI_STATE:\n                    this.notifyObserversUiState(<sdk.remotemessage.UiStateMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.VERIFY_SIGNATURE:\n                    this.notifyObserversVerifySignature(<sdk.remotemessage.VerifySignatureMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.REFUND_RESPONSE:\n                    this.notifyObserversPaymentRefundResponse(<sdk.remotemessage.RefundResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.REFUND_REQUEST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.TIP_ADJUST_RESPONSE:\n                    this.notifyObserversTipAdjusted(<sdk.remotemessage.TipAdjustResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.VAULT_CARD_RESPONSE:\n                    this.notifyObserverVaultCardResponse(<sdk.remotemessage.VaultCardResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.CAPTURE_PREAUTH_RESPONSE:\n                    this.notifyObserversCapturePreAuth(<sdk.remotemessage.CapturePreAuthResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.CLOSEOUT_RESPONSE:\n                    this.notifyObserversCloseout(<sdk.remotemessage.CloseoutResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.RETRIEVE_PENDING_PAYMENTS_RESPONSE:\n                    this.notifyObserversPendingPaymentsResponse(<sdk.remotemessage.RetrievePendingPaymentsResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.CARD_DATA_RESPONSE:\n                    this.notifyObserversReadCardData(<sdk.remotemessage.CardDataResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.ACTIVITY_MESSAGE_FROM_ACTIVITY:\n                    this.notifyObserverActivityMessage(<sdk.remotemessage.ActivityMessageFromActivity> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.DISCOVERY_REQUEST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ORDER_ACTION_ADD_DISCOUNT:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ORDER_ACTION_ADD_LINE_ITEM:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_LINE_ITEM:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ORDER_ACTION_REMOVE_DISCOUNT:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.PRINT_IMAGE:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.PRINT_TEXT:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ACTIVITY_RESPONSE:\n                    this.notifyObserversActivityResponse(<sdk.remotemessage.ActivityResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.REMOTE_ERROR:\n                    this.notifyObserversRemoteError(sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.RETRIEVE_DEVICE_STATUS_RESPONSE:\n                    this.notifyObserversRetrieveDeviceStatusResponse(<sdk.remotemessage.RetrieveDeviceStatusResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.RESET_DEVICE_RESPONSE:\n                    this.notifyObserversResetDeviceResponse(<sdk.remotemessage.ResetDeviceResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_RESPONSE:\n                    this.notifyObserversRetrievePaymentResponse(<sdk.remotemessage.RetrievePaymentResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.GET_PRINTERS_RESPONSE:\n                    this.notifyObserversRetrievePrintersResponse(<sdk.remotemessage.GetPrintersResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.PRINT_JOB_STATUS_RESPONSE:\n                    this.notifyObserversPrintJobStatusResponse(<sdk.remotemessage.PrintJobStatusResponseMessage> sdkMessage);\n                    break;\n                case sdk.remotemessage.Method.SHOW_ORDER_SCREEN:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.SHOW_THANK_YOU_SCREEN:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.SHOW_WELCOME_SCREEN:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.SIGNATURE_VERIFIED:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.TERMINAL_MESSAGE:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.TX_START:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.VOID_PAYMENT:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.CAPTURE_PREAUTH:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.LAST_MSG_REQUEST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.LAST_MSG_RESPONSE:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.TIP_ADJUST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.OPEN_CASH_DRAWER:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.SHOW_PAYMENT_RECEIPT_OPTIONS:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.VAULT_CARD:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.CLOSEOUT_REQUEST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.ACTIVITY_REQUEST:\n                    //Outbound no-op\n                    break;\n                case sdk.remotemessage.Method.RETRIEVE_PAYMENT_REQUEST:\n                    //Outbound no-op\n                    break;\n                default:\n                    this.logger.error('COMMAND not supported with method: ' + rMessage.getMethod());\n                    break;\n            }\n        }\n    }\n\n    protected handleRemoteMessageQUERY(rMessage: sdk.remotemessage.RemoteMessage) {\n        // no-op\n    }\n\n    protected handleRemoteMessageEVENT(rMessage: sdk.remotemessage.RemoteMessage) {\n        // no-op\n    }\n\n    protected handleRemoteMessage(rMessage: sdk.remotemessage.RemoteMessage) {\n        try {\n            let msgType: sdk.remotemessage.RemoteMessageType = rMessage.getType();\n            if (msgType == sdk.remotemessage.RemoteMessageType.PING) {\n                this.handleRemoteMessagePING(rMessage);\n            }\n            else if (msgType == sdk.remotemessage.RemoteMessageType.PONG) {\n                this.handleRemoteMessagePONG(rMessage);\n            }\n            else if (msgType == sdk.remotemessage.RemoteMessageType.COMMAND) {\n                this.handleRemoteMessageCOMMAND(rMessage);\n            }\n            else if (msgType == sdk.remotemessage.RemoteMessageType.QUERY) {\n                this.handleRemoteMessageQUERY(rMessage);\n            }\n            else if (msgType == sdk.remotemessage.RemoteMessageType.EVENT) {\n                this.handleRemoteMessageEVENT(rMessage);\n            }\n            else {\n                this.logger.error('Unsupported message type: ' + rMessage.getType().toString());\n            }\n        }\n        catch (eM) {\n            this.logger.error('Error processing message: ' + rMessage.getPayload(), eM);\n        }\n    }\n\n    /**\n     * Called when a raw message is received from the device\n     *\n     * @param {string} message - the raw message from the device\n     */\n    public onMessage(message: string): void {\n        this.logger.debug('onMessage: ' + message);\n        try {\n            // Parse the message\n            let rMessage: sdk.remotemessage.RemoteMessage = this.messageParser.parseToRemoteMessage(message);\n            this.handleRemoteMessage(rMessage);\n        }\n        catch (e) {\n            this.logger.error(e);\n        }\n    }\n\n    /**\n     * Send a PONG response\n     *\n     * @param pingMessage\n     */\n    private sendPong(pingMessage: sdk.remotemessage.RemoteMessage): void {\n        let remoteMessage: sdk.remotemessage.RemoteMessage = new sdk.remotemessage.RemoteMessage();\n        remoteMessage.setType(sdk.remotemessage.RemoteMessageType.PONG);\n        remoteMessage.setPackageName(this.packageName);\n        remoteMessage.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);\n        remoteMessage.setRemoteApplicationID(this.applicationId);\n        this.logger.debug('Sending PONG...');\n        this.sendRemoteMessage(remoteMessage);\n    }\n\n    /**\n     * Notify the observers that the device is connected\n     *\n     * @param transport\n     */\n    private notifyObserversConnected(transport: CloverTransport): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onDeviceConnected(this);\n        });\n    }\n\n    /**\n     * Notify the observers that the device has disconnected\n     *\n     * @param transport\n     */\n    private notifyObserversDisconnected(transport: CloverTransport, message?: string): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onDeviceDisconnected(this, message);\n        });\n    }\n\n    /**\n     * Notify the observers that the transport failed.\n     *\n     * @param transport\n     */\n    private notifyObserversDeviceError(errorEvent: sdk.remotepay.CloverDeviceErrorEvent): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onDeviceError(errorEvent);\n        });\n    }\n\n    /**\n     * Notify the observers that the device is ready\n     *\n     * @param transport\n     * @param drm\n     */\n    private notifyObserversReady(transport: CloverTransport, drm: sdk.remotemessage.DiscoveryResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onDeviceReady(this, drm);\n        });\n    }\n\n    private notifyObserverAck(ackMessage: sdk.remotemessage.AcknowledgementMessage): void {\n        let ackTask = this.msgIdToTask[ackMessage.getSourceMessageId()];\n        if (ackTask) {\n            delete this.msgIdToTask[ackMessage.getSourceMessageId()];\n            ackTask.call(null);\n        }\n        // go ahead and notify listeners of the ACK\n        this.deviceObservers.forEach((obs) => {\n            obs.onMessageAck(ackMessage.getSourceMessageId());\n        });\n    }\n\n    private notifyObserverActivityMessage(message: sdk.remotemessage.ActivityMessageFromActivity): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onMessageFromActivity(message.getAction(), message.getPayload());\n        });\n    }\n\n    private notifyObserversActivityResponse(arm: sdk.remotemessage.ActivityResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            let status: sdk.remotemessage.ResultStatus = arm.getResultCode() == -1 ?\n                sdk.remotemessage.ResultStatus.SUCCESS :\n                sdk.remotemessage.ResultStatus.CANCEL;\n            obs.onActivityResponse(status, arm.getPayload(), arm.getFailReason(), arm.getAction());\n        });\n    }\n\n    private notifyObserversReadCardData(rcdrm: sdk.remotemessage.CardDataResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onReadCardResponse(rcdrm.getStatus(), rcdrm.getReason(), rcdrm.getCardData());\n        });\n    }\n\n    private notifyObserversRetrieveDeviceStatusResponse(message: sdk.remotemessage.RetrieveDeviceStatusResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onDeviceStatusResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getState(), message.getData());\n        });\n    }\n\n    private notifyObserversRetrievePaymentResponse(message: sdk.remotemessage.RetrievePaymentResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onRetrievePaymentResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getExternalPaymentId(), message.getQueryStatus(), message.getPayment());\n        });\n    }\n\n    private notifyObserversRetrievePrintersResponse(message: sdk.remotemessage.GetPrintersResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onRetrievePrintersResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getPrinters());\n        });\n    }\n\n    private notifyObserversPrintJobStatusResponse(message: sdk.remotemessage.PrintJobStatusResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPrintJobStatusResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getExternalPrintJobId(), message.getStatus());\n        });\n    }\n\n    private notifyObserversResetDeviceResponse(message: sdk.remotemessage.ResetDeviceResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onResetDeviceResponse(sdk.remotepay.ResponseCode.SUCCESS, message.getReason(), message.getState());\n        });\n    }\n\n    private notifyObserversRemoteError(message: sdk.remotemessage.RemoteError): void {\n        this.deviceObservers.forEach((obs) => {\n            // todo:  Add remote error\n            let deviceErrorEvent: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);\n            deviceErrorEvent.setMessage(JSON.stringify(message));\n            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);\n            obs.onDeviceError(deviceErrorEvent);\n        });\n    }\n\n    public notifyObserversPaymentRefundResponse(rrm: sdk.remotemessage.RefundResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPaymentRefundResponse(rrm.getOrderId(), rrm.getPaymentId(), rrm.getRefund(), rrm.getCode(), rrm.getReason(), rrm.getMessage());\n        });\n    }\n\n    public notifyObserversKeyPressed(keyPress: sdk.remotemessage.KeyPressMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onKeyPressed(keyPress.getKeyPress());\n        });\n    }\n\n    public notifyObserversCashbackSelected(cbSelected: sdk.remotemessage.CashbackSelectedMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCashbackSelected(cbSelected.getCashbackAmount());\n        });\n    }\n\n    public notifyObserversTipAdded(tipAdded: sdk.remotemessage.TipAddedMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTipAdded(tipAdded.getTipAmount());\n        });\n    }\n\n    public notifyObserverTxStart(txsrm: sdk.remotemessage.TxStartResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTxStartResponse(txsrm.getResult(), txsrm.getExternalPaymentId(), txsrm.getRequestInfo());\n        });\n    }\n\n    public notifyObserversTipAdjusted(tarm: sdk.remotemessage.TipAdjustResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onAuthTipAdjusted(tarm.getPaymentId(), tarm.getAmount(), tarm.getSuccess());\n        });\n    }\n\n    public notifyObserversPartialAuth(partialAuth: sdk.remotemessage.PartialAuthMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPartialAuth(partialAuth.getPartialAuthAmount());\n        });\n    }\n\n    public notifyObserversPaymentVoided(payment: sdk.payments.Payment, voidReason: sdk.order.VoidReason, result: sdk.remotemessage.ResultStatus, reason: string, message: string): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPaymentVoided(payment, voidReason, result, reason, message);\n        });\n    }\n\n    public notifyObserversVerifySignature(verifySigMsg: sdk.remotemessage.VerifySignatureMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onVerifySignature(verifySigMsg.getPayment(), verifySigMsg.getSignature());\n        });\n    }\n\n    public notifyObserversConfirmPayment(confirmPaymentMessage: sdk.remotemessage.ConfirmPaymentMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onConfirmPayment(confirmPaymentMessage.getPayment(), confirmPaymentMessage.getChallenges());\n        });\n    }\n\n    public notifyObserverVaultCardResponse(vaultCardResponseMessage: sdk.remotemessage.VaultCardResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onVaultCardResponse(vaultCardResponseMessage.getCard(), vaultCardResponseMessage.getStatus().toString(), vaultCardResponseMessage.getReason());\n        });\n    }\n\n    public notifyObserversUiState(uiStateMsg: sdk.remotemessage.UiStateMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onUiState(uiStateMsg.getUiState(), uiStateMsg.getUiText(), uiStateMsg.getUiDirection(), uiStateMsg.getInputOptions());\n        });\n    }\n\n    public notifyObserversCapturePreAuth(cparm: sdk.remotemessage.CapturePreAuthResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCapturePreAuth(cparm.getStatus(), cparm.getReason(), cparm.getPaymentId(), cparm.getAmount(), cparm.getTipAmount());\n        });\n    }\n\n    public notifyObserversCloseout(crm: sdk.remotemessage.CloseoutResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onCloseoutResponse(crm.getStatus(), crm.getReason(), crm.getBatch());\n        });\n    }\n\n    public notifyObserversPendingPaymentsResponse(rpprm: sdk.remotemessage.RetrievePendingPaymentsResponseMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onPendingPaymentsResponse(rpprm.getStatus() == sdk.remotemessage.ResultStatus.SUCCESS, rpprm.getPendingPaymentEntries());\n        });\n    }\n\n    public notifyObserversTxState(txStateMsg: sdk.remotemessage.TxStateMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onTxState(txStateMsg.getTxState());\n        });\n    }\n\n    public notifyObserversFinishCancel(msg: sdk.remotemessage.FinishCancelMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            obs.onFinishCancel(msg.getRequestInfo());\n        });\n    }\n\n    public notifyObserversFinishOk(msg: sdk.remotemessage.FinishOkMessage): void {\n        this.deviceObservers.forEach((obs) => {\n            if (msg.getPayment()) {\n                obs.onFinishOk(msg.getPayment(), msg.getSignature(), msg.getRequestInfo());\n            } else if (msg.getCredit()) {\n                obs.onFinishOk(msg.getCredit());\n            } else if (msg.getRefund()) {\n                obs.onFinishOk(msg.getRefund());\n            }\n        });\n    }\n\n    /**\n     * Show Payment Receipt Screen\n     *\n     * @param {string} orderId\n     * @param {string} paymentId\n     */\n    public doShowPaymentReceiptScreen(orderId: string, paymentId: string): void {\n        const message: sdk.remotemessage.ShowPaymentReceiptOptionsMessage = new sdk.remotemessage.ShowPaymentReceiptOptionsMessage();\n        message.setOrderId(orderId);\n        message.setPaymentId(paymentId);\n        message.setVersion(2);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Key Press\n     *\n     * @param {sdk.remotemessage.KeyPress} keyPress\n     */\n    public doKeyPress(keyPress: sdk.remotemessage.KeyPress): void {\n        let message: sdk.remotemessage.KeyPressMessage = new sdk.remotemessage.KeyPressMessage();\n        message.setKeyPress(keyPress);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Show Thank You Screen\n     */\n    public doShowThankYouScreen(): void {\n        const message: sdk.remotemessage.ThankYouMessage = new sdk.remotemessage.ThankYouMessage();\n        this.sendObjectMessage(message);\n\n    }\n\n    /**\n     * Show Welcome Screen\n     */\n    public doShowWelcomeScreen(): void {\n        const message: sdk.remotemessage.WelcomeMessage = new sdk.remotemessage.WelcomeMessage();\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Signature Verified\n     *\n     * @param {sdk.payments.Payment} payment\n     * @param {boolean} verified\n     */\n    public doSignatureVerified(payment: sdk.payments.Payment, verified: boolean): void {\n        const message: sdk.remotemessage.SignatureVerifiedMessage = new sdk.remotemessage.SignatureVerifiedMessage();\n        message.setPayment(payment);\n        message.setVerified(verified);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Retrieve Pending Payments\n     */\n    public doRetrievePendingPayments(): void {\n        const message: sdk.remotemessage.RetrievePendingPaymentsMessage = new sdk.remotemessage.RetrievePendingPaymentsMessage();\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Terminal Message\n     *\n     * @param {string} text\n     */\n    public doTerminalMessage(text: string): void {\n        const message: sdk.remotemessage.TerminalMessage = new sdk.remotemessage.TerminalMessage();\n        message.setText(text);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Open Cash Drawer\n     *\n     * @param {string} reason\n     * @param {string} deviceId (optional)\n     */\n    public doOpenCashDrawer(reason: string, deviceId?: string): void {\n        const message: sdk.remotemessage.OpenCashDrawerMessage = new sdk.remotemessage.OpenCashDrawerMessage();\n        message.setReason(reason);\n        if (deviceId) {\n            let ptr: sdk.printer.Printer = new sdk.printer.Printer();\n            ptr.setId(deviceId);\n            message.setPrinter(ptr);\n        }\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Closeout\n     *\n     * @param {boolean} allowOpenTabs\n     * @param {string} batchId\n     */\n    public doCloseout(allowOpenTabs: boolean, batchId: string): void {\n        const message: sdk.remotemessage.CloseoutRequestMessage = new sdk.remotemessage.CloseoutRequestMessage();\n        message.setAllowOpenTabs(allowOpenTabs);\n        message.setBatchId(batchId);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Transaction Start\n     *\n     * @param {sdk.remotemessage.PayIntent} payIntent\n     * @param {sdk.remotemessage.Order} order\n     * @param {string} requestInfo - request type.\n     */\n    public doTxStart(payIntent: sdk.remotemessage.PayIntent, order: sdk.order.Order, requestInfo: string): void {\n        const message: sdk.remotemessage.TxStartRequestMessage = new sdk.remotemessage.TxStartRequestMessage();\n        message.setPayIntent(payIntent);\n        message.setOrder(order);\n        message.setRequestInfo(requestInfo);\n        message.setVersion(2);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Tip Adjust Auth\n     *\n     * @param {string} orderId\n     * @param {string} paymentId\n     * @param {number} amount\n     */\n    public doTipAdjustAuth(orderId: string, paymentId: string, amount: number): void {\n        const message: sdk.remotemessage.TipAdjustMessage = new sdk.remotemessage.TipAdjustMessage();\n        message.setOrderId(orderId);\n        message.setPaymentId(paymentId);\n        message.setTipAmount(amount);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Read Cart Data\n     *\n     * @param {PayIntent} payIntent\n     */\n    public doReadCardData(payIntent: sdk.remotemessage.PayIntent): void {\n        const message: sdk.remotemessage.CardDataRequestMessage = new sdk.remotemessage.CardDataRequestMessage();\n        message.setPayIntent(payIntent);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Send a message to a running custom activity\n     *\n     * @param {string} actionId - the id used when the custom action was started\n     * @param {string} payload - the message content, unrestricted format\n     */\n    public doSendMessageToActivity(actionId: string, payload: string): void {\n        const message: sdk.remotemessage.ActivityMessageToActivity = new sdk.remotemessage.ActivityMessageToActivity();\n        message.setAction(actionId);\n        message.setPayload(payload);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Print Text\n     *\n     * @param {Array<string>} textLines\n     */\n    public doPrintText(textLines: Array<string>, printRequestId?: string, printDeviceId?: string): void {\n        const message: sdk.remotemessage.TextPrintMessage = new sdk.remotemessage.TextPrintMessage();\n        message.setTextLines(textLines);\n        if (printRequestId) {\n            message.setExternalPrintJobId(printRequestId);\n        }\n        if (printDeviceId) {\n            let ptr: sdk.printer.Printer = new sdk.printer.Printer();\n            ptr.setId(printDeviceId);\n            message.setPrinter(ptr);\n        }\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Print Image (Bitmap)\n     *\n     * @param {any} bitmap\n     */\n    public doPrintImageObject(bitmap: any, printRequestId?: string, printDeviceId?: string): void {\n        const message: sdk.remotemessage.ImagePrintMessage = new sdk.remotemessage.ImagePrintMessage();\n        // bitmap - HTMLImageElement\n        this.imageUtil.getBase64Image(bitmap, (imageString) => {\n            message.setPng(imageString);\n            if (printRequestId) {\n                message.setExternalPrintJobId(printRequestId);\n            }\n            if (printDeviceId) {\n                let ptr: sdk.printer.Printer = new sdk.printer.Printer();\n                ptr.setId(printDeviceId);\n                message.setPrinter(ptr);\n            }\n            if (this.isFragmentationSupported()) {\n                // We need to be putting this in the attachment instead of the payload (for the remoteMessage)\n                let base64Png: string = message.getPng();\n                message.setPng(null);\n                this.sendObjectMessage(message, base64Png, DefaultCloverDevice.BASE64);\n            } else {\n                this.sendObjectMessage(message);\n            }\n        });\n    }\n\n    /**\n     * Printing images from a url from the device is problematic.\n     * See - https://jira.dev.clover.com/browse/SEMI-1352\n     * and - https://jira.dev.clover.com/browse/SEMI-1377\n     *\n     * Instead of relying on the device, we can retrieve the image from the URL\n     * and call doPrintImageObject instead of doPrintImageUrl. The doPrintImageObject\n     * method is more robust (can handle large images via chunking, etc.).\n     *\n     * @param {string} url\n     */\n    public doPrintImageUrl(url: string, printRequestId?: string, printDeviceId?: string): void {\n        this.imageUtil.loadImageFromURL(url, (image) => {\n            this.doPrintImageObject(image, printRequestId, printDeviceId);\n        }, (errorMessage) => {\n            let deviceErrorEvent: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n            deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.UnknownError);\n            deviceErrorEvent.setMessage(errorMessage);\n            deviceErrorEvent.setType(sdk.remotepay.ErrorType.EXCEPTION);\n            this.notifyObserversDeviceError(deviceErrorEvent);\n        });\n    }\n\n    public doStartActivity(action: string, payload: string, nonBlocking: boolean): void {\n        const request: sdk.remotemessage.ActivityRequest = new sdk.remotemessage.ActivityRequest();\n        request.setAction(action);\n        request.setPayload(payload);\n        request.setNonBlocking(nonBlocking);\n        request.setForceLaunch(false);\n        this.sendObjectMessage(request);\n    }\n\n    /**\n     * Void Payment\n     *\n     * @param {sdk.payments.Payment} payment\n     * @param {sdk.order.VoidReason} reason\n     */\n    public doVoidPayment(payment: sdk.payments.Payment, reason: sdk.order.VoidReason): void {\n        let message: sdk.remotemessage.VoidPaymentMessage = new sdk.remotemessage.VoidPaymentMessage();\n        message.setPayment(payment);\n        message.setVoidReason(reason);\n\n        let remoteMessage: sdk.remotemessage.RemoteMessage = this.buildRemoteMessageToSend(message);\n        let msgId: string = remoteMessage.getId();\n\n        if (!this.supportsAcks()) {\n            this.sendRemoteMessage(remoteMessage);\n            this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);\n        }\n        else {\n            // we will send back response after we get an ack\n            this.addTaskForAck(msgId, () => {\n                this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);\n            });\n            //this.msgIdToTask[msgId] = () => {\n            //    this.notifyObserversPaymentVoided(payment, reason, sdk.remotemessage.ResultStatus.SUCCESS, null, null);\n            //};\n            this.sendRemoteMessage(remoteMessage);\n        }\n    }\n\n    protected addTaskForAck(msgId: string, task: Function) {\n        this.msgIdToTask[msgId] = task;\n    }\n\n    /**\n     * Payment Refund\n     *\n     * @param {string} orderId\n     * @param {string} paymentId\n     * @param {number} amount\n     * @param {boolean} fullRefund\n     */\n    public doPaymentRefund(orderId: string, paymentId: string, amount: number, fullRefund: boolean): void {\n        const message: sdk.remotemessage.RefundRequestMessage = new sdk.remotemessage.RefundRequestMessage();\n        message.setOrderId(orderId);\n        message.setPaymentId(paymentId);\n        message.setAmount(amount);\n        message.setFullRefund(fullRefund);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Vault Card\n     *\n     * @param {number} cardEntryMethods\n     */\n    public doVaultCard(cardEntryMethods: number): void {\n        const message: sdk.remotemessage.VaultCardMessage = new sdk.remotemessage.VaultCardMessage();\n        message.setCardEntryMethods(cardEntryMethods);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Capture Auth\n     *\n     * @param {string} paymentId\n     * @param {number} amount\n     * @param {number} tipAmount\n     */\n    public doCaptureAuth(paymentId: string, amount: number, tipAmount: number): void {\n        const message: sdk.remotemessage.CapturePreAuthMessage = new sdk.remotemessage.CapturePreAuthMessage();\n        message.setPaymentId(paymentId);\n        message.setAmount(amount);\n        message.setTipAmount(tipAmount);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Accept Payment\n     *\n     * @param {Payment} payment\n     */\n    public doAcceptPayment(payment: sdk.payments.Payment): void {\n        const message: sdk.remotemessage.PaymentConfirmedMessage = new sdk.remotemessage.PaymentConfirmedMessage();\n        message.setPayment(payment);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Reject Payment\n     *\n     * @param {Payment} payment\n     * @param {Challenge} challenge\n     */\n    public doRejectPayment(payment: sdk.payments.Payment, challenge: sdk.base.Challenge): void {\n        const message: sdk.remotemessage.PaymentRejectedMessage = new sdk.remotemessage.PaymentRejectedMessage();\n        message.setPayment(payment);\n        message.setReason(challenge.getReason());\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Discovery request\n     */\n    public doDiscoveryRequest(): void {\n        const drm: sdk.remotemessage.DiscoveryRequestMessage = new sdk.remotemessage.DiscoveryRequestMessage();\n        drm.setSupportsOrderModification(false);\n        this.sendObjectMessage(drm);\n    }\n\n    /**\n     * Order Update\n     *\n     * @param {DisplayOrder} order\n     * @param {any} orderOperation\n     */\n    public doOrderUpdate(order: sdk.order.DisplayOrder, orderOperation: any): void {\n        const message: sdk.remotemessage.OrderUpdateMessage = new sdk.remotemessage.OrderUpdateMessage();\n        message.setOrder(order);\n\n        if (orderOperation) {\n            if (orderOperation instanceof sdk.order.operation.DiscountsAddedOperation) {\n                message.setDiscountsAddedOperation(orderOperation);\n            } else if (orderOperation instanceof sdk.order.operation.DiscountsDeletedOperation) {\n                message.setDiscountsDeletedOperation(orderOperation);\n            } else if (orderOperation instanceof sdk.order.operation.LineItemsAddedOperation) {\n                message.setLineItemsAddedOperation(orderOperation);\n            } else if (orderOperation instanceof sdk.order.operation.LineItemsDeletedOperation) {\n                message.setLineItemsDeletedOperation(orderOperation);\n            } else if (orderOperation instanceof sdk.order.operation.OrderDeletedOperation) {\n                message.setOrderDeletedOperation(orderOperation);\n            }\n        }\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Reset Device\n     */\n    public doResetDevice(): void {\n        const message: sdk.remotemessage.BreakMessage = new sdk.remotemessage.BreakMessage();\n        this.sendObjectMessage(message);\n    }\n\n    public doRetrieveDeviceStatus(request: sdk.remotepay.RetrieveDeviceStatusRequest): void {\n        const message: sdk.remotemessage.RetrieveDeviceStatusRequestMessage = new sdk.remotemessage.RetrieveDeviceStatusRequestMessage();\n        message.setSendLastMessage(request.getSendLastMessage());\n        this.sendObjectMessage(message);\n    }\n\n    public doRetrievePayment(externalPaymentId: string): void {\n        const message: sdk.remotemessage.RetrievePaymentRequestMessage = new sdk.remotemessage.RetrievePaymentRequestMessage();\n        message.setExternalPaymentId(externalPaymentId);\n        this.sendObjectMessage(message);\n    }\n\n    public doRetrievePrinters(category?: sdk.printer.PrintCategory): void {\n        const message: sdk.remotemessage.GetPrintersRequestMessage = new sdk.remotemessage.GetPrintersRequestMessage();\n        if (category) {\n            message.setCategory(category);\n        }\n        this.sendObjectMessage(message);\n    }\n\n    public doRetrievePrintJobStatus(printRequestId: string): void {\n        const message: sdk.remotemessage.PrintJobStatusRequestMessage = new sdk.remotemessage.PrintJobStatusRequestMessage();\n        message.setExternalPrintJobId(printRequestId);\n        this.sendObjectMessage(message);\n    }\n\n    /**\n     * Dispose\n     */\n    public dispose(): void {\n        this.deviceObservers.splice(0, this.deviceObservers.length);\n        if (this.transport) {\n            this.transport.dispose();\n            this.transport = null;\n        }\n    }\n\n    public sendObjectMessage(remoteMessage: sdk.remotemessage.Message, attachment?: string, attachmentEncoding?: string): string {\n        return this.buildRemoteMessages(remoteMessage, attachment, attachmentEncoding); // this now sends the messages and returns the ID\n    }\n\n    private buildBaseRemoteMessage(remoteMessage: sdk.remotemessage.Message): sdk.remotemessage.RemoteMessage {\n        // Make sure the message is not null\n        if (remoteMessage == null) {\n            this.logger.debug('Message is null');\n            return null;\n        }\n\n        // Check the message method\n        this.logger.info(remoteMessage.toString());\n        if (remoteMessage.getMethod() == null) {\n            this.logger.error('Invalid Message', new Error('Invalid Message: ' + remoteMessage.toString()));\n            return null;\n        }\n\n        // Check the application id\n        if (this.applicationId == null) {\n            this.logger.error('Invalid ApplicationID: ' + this.applicationId);\n            throw new Error('Invalid applicationId');\n        }\n\n        const messageId: string = (++DefaultCloverDevice.id) + '';\n        const remoteMessageToReturn: sdk.remotemessage.RemoteMessage = new sdk.remotemessage.RemoteMessage();\n        remoteMessageToReturn.setId(messageId);\n        remoteMessageToReturn.setType(sdk.remotemessage.RemoteMessageType.COMMAND);\n        remoteMessageToReturn.setPackageName(this.packageName);\n        remoteMessageToReturn.setMethod(remoteMessage.getMethod().toString());\n        remoteMessageToReturn.setVersion(this.remoteMessageVersion);\n        remoteMessageToReturn.setRemoteSourceSDK(DefaultCloverDevice.REMOTE_SDK);\n        remoteMessageToReturn.setRemoteApplicationID(this.applicationId);\n        return remoteMessageToReturn;\n    }\n\n    /**\n     * Special serialization handling\n     * The top level elements should not have the \"elements\" wrapper on collections (arrays).\n     * sdk.remotemessage.Message instances are the only ones this needs to happen for.  This\n     * is the result of the manner in which the serialization/deserialization happens in the\n     * Android code.  The top level objects are not (de)serialized by a\n     * com.clover.sdk.GenericClient#extractListOther\n     * (in the Clover common repo).  The GenericClient is the tool that adds the elements\n     * wrapper.  The top level objects are (de)serialized by themselves\n     * com.clover.remote.message.Message#fromJsonString\n     */\n    private addSuppressElementsWrapper(message: sdk.remotemessage.Message): sdk.remotemessage.Message {\n        for (var fieldKey in message) {\n            var metaInfo = message.getMetaInfo(fieldKey);\n            if (metaInfo && (metaInfo.type == Array)) {\n                message[fieldKey].suppressElementsWrapper = true;\n            }\n        }\n        return message;\n    }\n\n    protected buildRemoteMessageToSend(message: sdk.remotemessage.Message): sdk.remotemessage.RemoteMessage {\n        const remoteMessage: sdk.remotemessage.RemoteMessage = this.buildBaseRemoteMessage(message);\n        message = this.addSuppressElementsWrapper(message);\n        remoteMessage.setPayload(JSON.stringify(message, DefaultCloverDevice.stringifyClover));\n        return remoteMessage;\n    }\n\n    protected buildRemoteMessages(message: sdk.remotemessage.Message, attachment?: string, attachmentEncoding?: string): string {\n        const remoteMessage: sdk.remotemessage.RemoteMessage = this.buildBaseRemoteMessage(message);\n        message = this.addSuppressElementsWrapper(message);\n        if (attachmentEncoding) {\n            remoteMessage.setAttachmentEncoding(attachmentEncoding);\n        }\n        let messagePayload = JSON.stringify(message, DefaultCloverDevice.stringifyClover);\n\n        if (this.isFragmentationSupported()) {\n            const payloadTooLarge = (messagePayload ? messagePayload.length : 0) > this.maxMessageSizeInChars;\n            if (payloadTooLarge || attachment) { // need to fragment\n                if (attachment && attachment.length > CloverConnector.MAX_PAYLOAD_SIZE) {\n                    this.logger.error('Error sending message - payload size is greater than the maximum allowed.');\n                    return null;\n                }\n                let fragmentIndex: number = 0;\n                // fragmenting loop for payload\n                while (messagePayload.length > 0) {\n                    remoteMessage.setLastFragment(false);\n                    if (messagePayload.length <= this.maxMessageSizeInChars) {\n                        remoteMessage.setPayload(messagePayload);\n                        messagePayload = \"\";\n                        // If the attachment is null at this point, then this is the last fragment\n                        remoteMessage.setLastFragment(attachment == null);\n                    } else {\n                        remoteMessage.setPayload(messagePayload.substr(0, this.maxMessageSizeInChars));\n                        messagePayload = messagePayload.substr(this.maxMessageSizeInChars);\n                    }\n                    remoteMessage.setFragmentIndex(fragmentIndex++);\n                    this.sendRemoteMessage(remoteMessage);\n                } //end fragment payload loop\n                remoteMessage.setPayload(null);\n                if (attachment) {\n                    //fragmenting loop for attachment\n                    if (attachmentEncoding == DefaultCloverDevice.BASE64) {\n                        remoteMessage.setAttachmentEncoding(DefaultCloverDevice.BASE64_ATTACHMENT);\n                        while (attachment.length > 0) {\n                            remoteMessage.setLastFragment(false);\n                            if (attachment.length <= this.maxMessageSizeInChars) {\n                                remoteMessage.setAttachment(attachment);\n                                attachment = \"\";\n                                remoteMessage.setLastFragment(true);\n                            } else {\n                                remoteMessage.setAttachment(attachment.substr(0, this.maxMessageSizeInChars));\n                                attachment = attachment.substr(this.maxMessageSizeInChars);\n                            }\n                            remoteMessage.setFragmentIndex(fragmentIndex++);\n                            this.sendRemoteMessage(remoteMessage);\n                        } //end fragment attachment loop\n                    } else {\n                        // We got an attachment, but no encoding, complain.\n                        this.logger.error('Attachment on message, but no encoding specified.  No idea how to send it.');\n                        // TODO:  Probably a good idea to throw here, but  then we need to handle that in the top level.  Leave for later.\n                    }\n                }\n            } else { // no need to fragment\n                if (messagePayload.length > this.maxMessageSizeInChars) {\n                    this.logger.warn(`The message payload is larger than the maxMessageSizeInChars but fragmentation is not supported by the apps installed on the device.  This may result in a payload that is too large to handle and a silent failure.`);\n                }\n                remoteMessage.setPayload(messagePayload);\n                if (attachment) {\n                    remoteMessage.setAttachment(attachment);\n                }\n                this.sendRemoteMessage(remoteMessage);\n            }\n        } else {\n            // fragmenting is not possible, just send as is\n            remoteMessage.setPayload(messagePayload);\n            this.sendRemoteMessage(remoteMessage);\n        }\n        return remoteMessage.getId();\n    }\n\n    protected static stringifyClover(key: string, value: any): any {\n        // If the element is an array, and it does NOT have the suppressElementsWrapper property,\n        // and the key is NOT \"elements\", then add the elements wrapper object\n        if (Array.isArray(value) &&\n            !value.hasOwnProperty(\"suppressElementsWrapper\") &&\n            (key != \"elements\")) {\n            //converts array into the format that clover devices expect\n            //from) foo : []\n            //to) foo : {elements : []}\n            return {elements: value};\n        }\n        return value;\n    }\n\n    protected sendRemoteMessage(remoteMessage: sdk.remotemessage.RemoteMessage): void {\n        const message = JSON.stringify(remoteMessage);\n        if (this.transport) {\n            this.logger.debug(`Sending: ${message}`);\n            this.transport.sendMessage(message);\n        } else {\n            this.logger.error(`Cannot send message, transport is null: ${message}`);\n        }\n    }\n\n    /**\n     * If the remote message version is 2, fragmentation is supported.\n     *\n     * @returns {boolean}\n     */\n    private isFragmentationSupported() {\n        return this.remoteMessageVersion > 1;\n    }\n}"]}