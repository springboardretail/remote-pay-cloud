{"version":3,"sources":["com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.ts"],"names":[],"mappings":";;AAEA,6DAA0D;AAG1D;;GAEG;AACH;IAUI;;;;;;;OAOG;IACH,4CAAY,aAAqB,EACrB,wBAA6B,EAC7B,SAAqB,EACrB,iBAA0B,EAC1B,cAAuB;QApBzB,sBAAiB,GAAW,IAAI,CAAC;QACjC,mBAAc,GAAW,IAAI,CAAC;QAC9B,kCAA6B,GAAW,CAAC,CAAC;QAC7C,qBAAgB,GAAW,KAAK,CAAC;QAkBpC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;QAC3B,IAAI,CAAC,kBAAkB,GAAG,wBAAwB,CAAC;QACnD,EAAE,CAAC,CAAC,iBAAiB,CAAC;YAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QACjF,EAAE,CAAC,CAAC,cAAc,CAAC;YAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IAC5E,CAAC;IAEM,6DAAgB,GAAvB;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,iEAAoB,GAA3B;QACI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAEM,iEAAoB,GAA3B,UAA4B,iBAAyB;QACjD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC/C,CAAC;IAEM,8DAAiB,GAAxB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,8DAAiB,GAAxB,UAAyB,cAAsB;QAC3C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAEM,6EAAgC,GAAvC;QACI,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC;IAC9C,CAAC;IAEM,6EAAgC,GAAvC,UAAwC,6BAAqC;QACzE,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;IACvE,CAAC;IAEM,gEAAmB,GAA1B;QACI,MAAM,CAAC,yCAAmB,CAAC;IAC/B,CAAC;IAEM,oDAAO,GAAd;QACI,MAAM,CAAC,4BAA4B,CAAC;IACxC,CAAC;IAED;;OAEG;IACI,yDAAY,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAYM,oEAAuB,GAA9B;QACI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IACL,yCAAC;AAAD,CAtFA,AAsFC,IAAA;AAtFqB,gFAAkC","file":"../../../../../../com/clover/remote/client/device/WebSocketCloverDeviceConfiguration.js","sourcesContent":["import {CloverTransport} from '../transport/CloverTransport';\nimport {CloverDeviceConfiguration} from './CloverDeviceConfiguration';\nimport {DefaultCloverDevice} from './DefaultCloverDevice';\nimport {IImageUtil} from '../../../util/IImageUtil';\n\n/**\n * The base for WebSocket device configurations.\n */\nexport abstract class WebSocketCloverDeviceConfiguration implements CloverDeviceConfiguration {\n\n    protected heartbeatInterval: number = 1000;\n    protected reconnectDelay: number = 3000;\n    protected pingRetryCountBeforeReconnect: number = 4;\n    public maxCharInMessage: number = 50000;\n    private appId: string;\n    protected webSocketImplClass: any;\n    protected imageUtil: IImageUtil;\n\n    /**\n     * @param {string} applicationId - the applicationId that uniquely identifies the POS. e.g. com.company.MyPOS:2.3.1\n     * @param {Object} webSocketFactoryFunction - the function that will return an instance of the CloverWebSocketInterface\n     *    that will be used when connecting.\n     * @param {IImageUtil} imageUtil - utility to translate images into base64 strings.\n     * @param {number} [heartbeatInterval] - duration to wait for a PING before disconnecting\n     * @param {number} [reconnectDelay] - duration to wait until a reconnect is attempted\n     */\n    constructor(applicationId: string,\n                webSocketFactoryFunction: any,\n                imageUtil: IImageUtil,\n                heartbeatInterval?: number,\n                reconnectDelay?: number) {\n        this.imageUtil = imageUtil;\n        this.appId = applicationId;\n        this.webSocketImplClass = webSocketFactoryFunction;\n        if (heartbeatInterval) this.heartbeatInterval = Math.max(100, heartbeatInterval);\n        if (reconnectDelay) this.reconnectDelay = Math.max(100, reconnectDelay);\n    }\n\n    public getApplicationId(): string {\n        return this.appId;\n    }\n\n    public getHeartbeatInterval(): number {\n        return this.heartbeatInterval;\n    }\n\n    public setHeartbeatInterval(heartbeatInterval: number): void {\n        this.heartbeatInterval = heartbeatInterval;\n    }\n\n    public getReconnectDelay(): number {\n        return this.reconnectDelay;\n    }\n\n    public setReconnectDelay(reconnectDelay: number): void {\n        this.reconnectDelay = reconnectDelay;\n    }\n\n    public getPingRetryCountBeforeReconnect(): number {\n        return this.pingRetryCountBeforeReconnect;\n    }\n\n    public setPingRetryCountBeforeReconnect(pingRetryCountBeforeReconnect: number): void {\n        this.pingRetryCountBeforeReconnect = pingRetryCountBeforeReconnect;\n    }\n\n    public getCloverDeviceType(): any {\n        return DefaultCloverDevice;\n    }\n\n    public getName(): string {\n        return 'Clover WebSocket Connector';\n    }\n\n    /**\n     * @override\n     */\n    public getImageUtil(): IImageUtil {\n        return this.imageUtil;\n    }\n\n    /**\n     * @override\n     */\n    public abstract getMessagePackageName(): string;\n\n    /**\n     * @override\n     */\n    public abstract getCloverTransport(): CloverTransport;\n\n    public getMaxMessageCharacters(): number {\n        return this.maxCharInMessage;\n    }\n}\n"]}