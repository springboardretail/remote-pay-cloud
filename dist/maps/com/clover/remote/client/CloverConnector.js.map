{"version":3,"sources":["com/clover/remote/client/CloverConnector.ts"],"names":[],"mappings":"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","file":"../../../../../com/clover/remote/client/CloverConnector.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\n\nimport {CardEntryMethods} from './CardEntryMethods';\nimport {CloverConnectorBroadcaster} from './CloverConnectorBroadcaster';\nimport {CloverDevice} from './device/CloverDevice';\nimport {CloverDeviceConfiguration} from './device/CloverDeviceConfiguration';\nimport {CloverDeviceFactory} from './device/CloverDeviceFactory';\nimport {CloverDeviceObserver} from './CloverDeviceObserver';\nimport {Logger} from './util/Logger';\n\nimport {PayIntent} from '../../util/PayIntent/Builder';\n\n/**\n * Clover Connector\n *\n * The clover connector implements the ICloverConnector interface. This is where\n * we define how the connector interacts with remote pay adapters.\n */\nexport class CloverConnector implements sdk.remotepay.ICloverConnector {\n\n    public static CANCEL_INPUT_OPTION: sdk.remotemessage.InputOption;\n\n    // manual is not enabled by default\n    private cardEntryMethods: number = CardEntryMethods.DEFAULT;\n\n    // Create a logger\n    protected logger: Logger = Logger.create();\n\n    // The device we are connected to\n    public device: CloverDevice;\n\n    // Hold the current merchant info\n    public merchantInfo: sdk.remotepay.MerchantInfo;\n\n    // The device observer for this connector\n    private deviceObserver: CloverConnector.InnerDeviceObserver; //sdk.remotepay.ICloverConnectorListener;\n\n    // List of listeners to broadcast notifications to\n    public broadcaster: CloverConnectorBroadcaster = new CloverConnectorBroadcaster();\n\n    // Device Configuration for this connector\n    private configuration: CloverDeviceConfiguration;\n\n    // Flag indicating whether the device is ready or not\n    public isReady: boolean = false;\n\n    public static MAX_PAYLOAD_SIZE: number = 10000000; // maximum size of the payload of a full message.  if the payload exceeds this, the message will not be sent.\n\n    // Hold the last request\n    public lastRequest: any;\n\n    constructor(config: CloverDeviceConfiguration) {\n        // Set the cancel input option\n        CloverConnector.CANCEL_INPUT_OPTION = new sdk.remotemessage.InputOption();\n        CloverConnector.CANCEL_INPUT_OPTION.setKeyPress(sdk.remotemessage.KeyPress.ESC);\n        CloverConnector.CANCEL_INPUT_OPTION.setDescription(\"Cancel\");\n\n        // Try to load the configuration.\n        if (config) {\n            this.configuration = config;\n        }\n    }\n\n    /**\n     * Initialize the connector with a new config\n     *\n     * @param {CloverDeviceConfiguration} config - the configuration for the connector\n     */\n    public initialize(config: CloverDeviceConfiguration): void {\n        this.configuration = config;\n        this.deviceObserver = new CloverConnector.InnerDeviceObserver(this);\n\n        // Get the device and subscribe to it.\n        this.device = CloverDeviceFactory.get(config);\n        if (this.device) {\n            this.device.subscribe(this.deviceObserver);\n        }\n    }\n\n    public initializeConnection(): void {\n        if (!this.device) {\n            this.initialize(this.configuration);\n        }\n    }\n\n    /**\n     * Add new listener to receive broadcast notifications\n     *\n     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to add\n     */\n    public addCloverConnectorListener(connectorListener: sdk.remotepay.ICloverConnectorListener): void {\n        this.broadcaster.push(connectorListener);\n    }\n\n    /**\n     * Remove a listener\n     *\n     * @param {sdk.remotepay.ICloverConnectorListener} connectorListener - the listener to remove\n     */\n    public removeCloverConnectorListener(connectorListener: sdk.remotepay.ICloverConnectorListener): void {\n        var indexOfListener = this.broadcaster.indexOf(connectorListener);\n        if (indexOfListener != -1) {\n            this.broadcaster.splice(indexOfListener, 1);\n        }\n    }\n\n    public sale(request: sdk.remotepay.SaleRequest): void {\n        this.lastRequest = request;\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onFinishCancelSale(sdk.remotepay.ResponseCode.ERROR,\n                \"Device Connection Error\",\n                \"In sale: SaleRequest - The Clover device is not connected.\");\n        }\n        else if (request == null) {\n            this.deviceObserver.onFinishCancelSale(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In sale: SaleRequest - The request that was passed in for processing is null.\");\n        }\n        else if (request.getAmount() == null || request.getAmount() <= 0) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, \"Request Validation Error\", \"In sale: SaleRequest - The request amount cannot be zero. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);\n        }\n        else if (request.getTipAmount() && request.getTipAmount() < 0) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, \"Request Validation Error\", \"In sale: SaleRequest - The tip amount cannot be less than zero. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);\n        }\n        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 || request.getExternalId().trim().length > 32) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In sale: SaleRequest - The externalId is required and the max length is 32 characters. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);\n        }\n        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, \"Merchant Configuration Validation Error\", \"In sale: SaleRequest - Vault Card support is not enabled for the payment gateway. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);\n        } else {\n            if (request.getTipAmount() == null) {\n                request.setTipAmount(0);\n            }\n            try {\n                this.saleAuth(request);\n            }\n            catch (e) {\n                this.logger.debug(\"Error in sale\", e);\n                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.SALE_REQUEST);\n            }\n        }\n    }\n\n    /**\n     * A common PayIntent builder method for Sale, Auth and PreAuth\n     *\n     * @param request\n     * @param suppressTipScreen\n     */\n    private saleAuth(request: sdk.remotepay.TransactionRequest): void {\n        if (this.device && this.isReady) {\n            this.lastRequest = request;\n\n            let builder: PayIntent.Builder = new PayIntent.Builder();\n            let transactionSettings: sdk.payments.TransactionSettings = new sdk.payments.TransactionSettings();\n\n            builder.setTransactionType(request.getType()); // difference between sale, auth and auth(preAuth)\n            builder.setAmount(request.getAmount());\n            builder.setVaultedCard(request.getVaultedCard());\n            builder.setExternalPaymentId(request.getExternalId().trim());\n            builder.setRequiresRemoteConfirmation(true);\n            if (request.getCardNotPresent()) {\n                builder.setCardNotPresent(request.getCardNotPresent());\n            }\n            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);\n            if (request.getDisablePrinting()) {\n                transactionSettings.setCloverShouldHandleReceipts(!request.getDisablePrinting());\n            }\n            if (request.getDisableRestartTransactionOnFail()) {\n                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());\n            }\n            transactionSettings.setSignatureEntryLocation(request.getSignatureEntryLocation());\n            transactionSettings.setSignatureThreshold(request.getSignatureThreshold());\n            transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());\n            transactionSettings.setDisableDuplicateCheck(request.getDisableDuplicateChecking());\n            transactionSettings.setAutoAcceptPaymentConfirmations(request.getAutoAcceptPaymentConfirmations());\n            transactionSettings.setAutoAcceptSignature(request.getAutoAcceptSignature());\n\n            let paymentRequestType = null;\n            if (request instanceof sdk.remotepay.PreAuthRequest) {\n                paymentRequestType = CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST;\n            }\n            else if (request instanceof sdk.remotepay.AuthRequest) {\n                paymentRequestType = CloverConnector.TxTypeRequestInfo.AUTH_REQUEST;\n                let req: sdk.remotepay.AuthRequest = <sdk.remotepay.AuthRequest> request;\n                if (req.getTaxAmount()) {\n                    builder.setTaxAmount(req.getTaxAmount());\n                }\n\n                if (req.getTippableAmount()) {\n                    transactionSettings.setTippableAmount(req.getTippableAmount());\n                }\n                if (req.getAllowOfflinePayment()) {\n                    transactionSettings.setAllowOfflinePayment(req.getAllowOfflinePayment());\n                }\n                if (req.getApproveOfflinePaymentWithoutPrompt()) {\n                    transactionSettings.setApproveOfflinePaymentWithoutPrompt(req.getApproveOfflinePaymentWithoutPrompt());\n                }\n                if (req.getDisableCashback()) {\n                    transactionSettings.setDisableCashBack(req.getDisableCashback());\n                }\n                transactionSettings.setTipMode(sdk.payments.TipMode.ON_PAPER); // overriding TipMode, since it's an Auth request\n            }\n            else if (request instanceof sdk.remotepay.SaleRequest) {\n                paymentRequestType = CloverConnector.TxTypeRequestInfo.SALE_REQUEST;\n                let req: sdk.remotepay.SaleRequest = <sdk.remotepay.SaleRequest> request;\n                // shared with AuthRequest\n                if (req.getAllowOfflinePayment()) {\n                    transactionSettings.setAllowOfflinePayment(req.getAllowOfflinePayment());\n                }\n                if (req.getApproveOfflinePaymentWithoutPrompt()) {\n                    transactionSettings.setApproveOfflinePaymentWithoutPrompt(req.getApproveOfflinePaymentWithoutPrompt());\n                }\n                if (req.getDisableCashback()) {\n                    transactionSettings.setDisableCashBack(req.getDisableCashback());\n                }\n                if (req.getTaxAmount()) {\n                    builder.setTaxAmount(req.getTaxAmount());\n                }\n                // SaleRequest\n                if (req.getTippableAmount()) {\n                    transactionSettings.setTippableAmount(req.getTippableAmount());\n                }\n                if (req.getTipAmount() !== undefined) { // In javascript, 0 is false.  We must test for undefined explicitly. SEMI-864\n                    builder.setTipAmount(req.getTipAmount());\n                }\n                if (req.getTipMode()) {\n                    transactionSettings.setTipMode(CloverConnector.getV3TipModeFromRequestTipMode(req.getTipMode()));\n                } else if (req.getDisableTipOnScreen()) {\n                    transactionSettings.setTipMode(sdk.payments.TipMode.NO_TIP);\n                }\n            }\n            builder.setTransactionSettings(transactionSettings);\n            let payIntent: sdk.remotemessage.PayIntent = builder.build();\n            this.device.doTxStart(payIntent, null, paymentRequestType);\n        }\n    }\n\n    private static getV3TipModeFromRequestTipMode(saleTipMode: sdk.payments.TipMode): sdk.payments.TipMode {\n        let allowedTipModes: Array<sdk.payments.TipMode> = [\n            sdk.payments.TipMode.TIP_PROVIDED,\n            sdk.payments.TipMode.ON_SCREEN_BEFORE_PAYMENT,\n            sdk.payments.TipMode.NO_TIP];\n        if (allowedTipModes.indexOf(saleTipMode) > -1) {\n            return saleTipMode;\n        }\n        return null;\n    }\n\n    public notifyDeviceNotConnected(message: string): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.COMMUNICATION,\n            sdk.remotepay.DeviceErrorEventCode.NotConnected,\n            null,\n            message + \": Device is not connected.\");\n    }\n\n    public notifyInvalidData(message: string): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.VALIDATION,\n            sdk.remotepay.DeviceErrorEventCode.InvalidParam,\n            null,\n            message);\n    }\n\n    public notifyDeviceError(errorType: sdk.remotepay.ErrorType, errorCode: sdk.remotepay.DeviceErrorEventCode, cause: sdk.remotepay.PlatformError, message: string): void {\n        let deviceErrorEvent: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n        deviceErrorEvent.setType(errorType);\n        deviceErrorEvent.setCode(errorCode);\n        deviceErrorEvent.setCause(cause);\n        deviceErrorEvent.setMessage(message);\n        this.broadcaster.notifyOnDeviceError(deviceErrorEvent);\n    }\n\n    public acceptSignature(request: sdk.remotepay.VerifySignatureRequest): void {\n        let logLocation: string = \"In acceptSignature\";\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(logLocation);\n        } else if (request == null) {\n            this.notifyInvalidData(logLocation + \": VerifySignatureRequest cannot be null.\");\n        } else if (request.getPayment() == null || request.getPayment().getId() == null) {\n            this.notifyInvalidData(logLocation + \": VerifySignatureRequest. Payment must have an ID.\");\n        } else {\n            this.device.doSignatureVerified(request.getPayment(), true);\n        }\n    }\n\n    public rejectSignature(request: sdk.remotepay.VerifySignatureRequest): void {\n        let logLocation: string = \"In rejectSignature\";\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(logLocation);\n        } else if (request == null) {\n            this.notifyInvalidData(logLocation + \": VerifySignatureRequest cannot be null.\");\n        } else if (request.getPayment() == null || request.getPayment().getId() == null) {\n            this.notifyInvalidData(logLocation + \": VerifySignatureRequest. Payment must have an ID.\");\n        } else {\n            this.device.doSignatureVerified(request.getPayment(), false);\n        }\n    }\n\n    public acceptPayment(payment: sdk.payments.Payment): void {\n        let logLocation: string = \"In acceptPayment\";\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(logLocation);\n        } else if (payment == null) {\n            this.notifyInvalidData(logLocation + \": Payment cannot be null.\");\n        } else if (payment.getId() == null) {\n            this.notifyInvalidData(logLocation + \": Payment must have an ID.\");\n        } else {\n            this.device.doAcceptPayment(payment);\n        }\n    }\n\n    public rejectPayment(payment: sdk.payments.Payment, challenge: sdk.base.Challenge): void {\n        let logLocation: string = \"In rejectPayment\";\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(logLocation);\n        } else if (payment == null) {\n            this.notifyInvalidData(logLocation + \": Payment cannot be null.\");\n        } else if (payment.getId() == null) {\n            this.notifyInvalidData(logLocation + \": Payment must have an ID.\");\n        } else if (challenge == null) {\n            this.notifyInvalidData(logLocation + \": Challenge cannot be null.\");\n        } else {\n            this.device.doRejectPayment(payment, challenge);\n        }\n    }\n\n    public auth(request: sdk.remotepay.AuthRequest): void {\n        this.lastRequest = request;\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.ERROR,\n                \"Device connection Error\", \"In auth: Auth Request - The Clover device is not connected.\");\n        } else if (!this.merchantInfo.getSupportsAuths()) {\n            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.UNSUPPORTED,\n                \"Merchant Configuration Validation Error\", \"In auth: AuthRequest - \" +\n                \"Auths are not enabled for the payment gateway. Original Request = \" + request);\n        } else if (request == null) {\n            this.deviceObserver.onFinishCancelAuth(sdk.remotepay.ResponseCode.FAIL,\n                \"Invalid Argument.\", \"In auth: AuthRequest - The request that was passed in for processing is null.\");\n        } else if (request.getAmount() == null || request.getAmount() <= 0) {\n            this.deviceObserver.onFinishCancel_rmm(\n                sdk.remotepay.ResponseCode.FAIL, \"Request Validation Error\", \"In auth: AuthRequest - \" +\n                \"The request amount cannot be zero. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);\n        } else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 ||\n            request.getExternalId().trim().length > 32) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL,\n                \"Invalid Argument.\", \"In auth: AuthRequest - The externalId is invalid. It is \" +\n                \"required and the max length is 32. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);\n        } else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED,\n                \"Merchant Configuration Validation Error\", \"In auth: AuthRequest - \" +\n                \"Vault Card support is not enabled for the payment gateway. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);\n        } else {\n            try {\n                this.saleAuth(request);\n            }\n            catch (e) {\n                this.logger.debug(\"Error in auth\", e);\n                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.AUTH_REQUEST);\n            }\n        }\n    }\n\n    public preAuth(request: sdk.remotepay.PreAuthRequest): void {\n        this.lastRequest = request;\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.ERROR,\n                \"Device connection Error\", \"In preAuth: PreAuthRequest - The Clover device is not connected.\");\n        }\n        else if (!this.merchantInfo.getSupportsPreAuths()) {\n            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.UNSUPPORTED,\n                \"Merchant Configuration Validation Error\", \"In preAuth: PreAuthRequest - \" +\n                \"PreAuths are not enabled for the payment gateway. Original Request = \" + request);\n        }\n        else if (request == null) {\n            this.deviceObserver.onFinishCancelPreAuth(sdk.remotepay.ResponseCode.FAIL,\n                \"Invalid Argument.\", \"In preAuth: PreAuthRequest - \" +\n                \"The request that was passed in for processing is null.\");\n        }\n        else if (request.getAmount() == null || request.getAmount() <= 0) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL,\n                \"Request Validation Error\", \"In preAuth: PreAuthRequest - \" +\n                \"The request amount cannot be zero. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);\n        }\n        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 ||\n            request.getExternalId().trim().length > 32) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL,\n                \"Invalid Argument.\", \"In preAuth: PreAuthRequest - The externalId is invalid. \" +\n                \"It is required and the max length is 32. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);\n        }\n        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED,\n                \"Merchant Configuration Validation Error\", \"In preAuth: PreAuthRequest - \" +\n                \"Vault Card support is not enabled for the payment gateway. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);\n        }\n        else {\n            try {\n                this.saleAuth(request);\n            }\n            catch (e) {\n                this.lastRequest = null;\n                this.logger.debug(\"Error in preAuth\", e);\n                this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.ERROR, e, null, CloverConnector.TxTypeRequestInfo.PREAUTH_REQUEST);\n            }\n        }\n    }\n\n    public capturePreAuth(request: sdk.remotepay.CapturePreAuthRequest): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.ERROR,\n                \"Device connection Error\",\n                \"In capturePreAuth: CapturePreAuth - The Clover device is not connected.\", null, null);\n        }\n        else if (!this.merchantInfo.getSupportsPreAuths()) {\n            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.UNSUPPORTED,\n                \"Merchant Configuration Validation Error\",\n                \"In capturePreAuth: PreAuth Captures are not enabled for the payment gateway. Original Request = \" +\n                request, null, null);\n        }\n        else if (request == null) {\n            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL,\n                \"Invalid Argument.\", \"In capturePreAuth: CapturePreAuth - \" +\n                \"The request that was passed in for processing is null.\", null, null);\n        }\n        else if (request.getAmount() < 0 || request.getTipAmount() < 0) {\n            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL,\n                \"Request Validation Error\", \"In capturePreAuth: CapturePreAuth - \" +\n                \"The request amount must be greater than zero and the tip must be greater \" +\n                \"than or equal to zero. Original Request = \" + request, null, null);\n        }\n        else if (!request.getPaymentId()) {\n            this.deviceObserver.onCapturePreAuth(sdk.remotepay.ResponseCode.FAIL,\n                \"Request Validation Error\", \"In capturePreAuth: CapturePreAuth - \" +\n                \"The paymentId is null. Original Request = \" + request, null, null);\n        }\n        else {\n            try {\n                this.device.doCaptureAuth(request.getPaymentId(), request.getAmount(), request.getTipAmount());\n            }\n            catch (e) {\n                let response: sdk.remotepay.CapturePreAuthResponse =\n                    new sdk.remotepay.CapturePreAuthResponse();\n                CloverConnector.populateBaseResponse(response, false, sdk.remotepay.ResponseCode.UNSUPPORTED,\n                    \"Pre Auths unsupported\",\n                    \"The currently configured merchant gateway does not support Capture Auth requests.\");\n                this.broadcaster.notifyOnCapturePreAuth(response);\n            }\n        }\n    }\n\n    public tipAdjustAuth(request: sdk.remotepay.TipAdjustAuthRequest): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.ERROR, \"Device connection Error\", \"In tipAdjustAuth: TipAdjustAuthRequest - The Clover device is not connected.\");\n        }\n        else if (!this.merchantInfo.getSupportsTipAdjust()) {\n            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.UNSUPPORTED, \"Merchant Configuration Validation Error\", \"In tipAdjustAuth: TipAdjustAuthRequest - Tip Adjustments are not enabled for the payment gateway. Original Request = \" + request);\n        }\n        else if (request == null) {\n            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In tipAdjustAuth: TipAdjustAuthRequest - The request that was passed in for processing is null.\");\n        }\n        else if (request.getPaymentId() == null) {\n            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In tipAdjustAuth: TipAdjustAuthRequest - The paymentId is required.\");\n        }\n        else if (request.getTipAmount() < 0) {\n            this.deviceObserver.onAuthTipAdjusted(sdk.remotepay.ResponseCode.FAIL, \"Request Validation Error\", \"In tipAdjustAuth: TipAdjustAuthRequest - The request amount cannot be less than zero. Original Request = \" + request);\n        }\n        else {\n            this.device.doTipAdjustAuth(request.getOrderId(), request.getPaymentId(), request.getTipAmount());\n        }\n    }\n\n    public vaultCard(cardEntryMethods: number): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onVaultCardResponseInternal(false, sdk.remotepay.ResponseCode.ERROR, \"Device connection Error\", \"In vaultCard: The Clover device is not connected.\", null);\n        }\n        else if (!this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onVaultCardResponseInternal(false, sdk.remotepay.ResponseCode.UNSUPPORTED, \"Merchant Configuration Validation Error\", \"In vaultCard: VaultCard/Payment Tokens are not enabled for the payment gateway.\", null);\n        }\n        else {\n            this.device.doVaultCard(cardEntryMethods ? cardEntryMethods : this.getCardEntryMethods());\n        }\n    }\n\n    public voidPayment(request: sdk.remotepay.VoidPaymentRequest): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.ERROR, \"Device connection Error\", \"In voidPayment: VoidPaymentRequest - The Clover device is not connected.\");\n        }\n        else if (request == null) {\n            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In voidPayment: VoidPaymentRequest - The request that was passed in for processing is null.\");\n        }\n        else if (request.getPaymentId() == null) {\n            this.deviceObserver.onPaymentVoided_responseCode(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In voidPayment: VoidPaymentRequest - The paymentId is required.\");\n        }\n        else {\n            let payment: sdk.payments.Payment = new sdk.payments.Payment();\n            payment.setId(request.getPaymentId());\n            payment.setOrder(new sdk.base.Reference());\n            payment.getOrder().setId(request.getOrderId());\n            payment.setEmployee(new sdk.base.Reference());\n            payment.getEmployee().setId(request.getEmployeeId());\n            let reason: sdk.order.VoidReason = sdk.order.VoidReason[request.getVoidReason()];\n            this.device.doVoidPayment(payment, reason);\n        }\n    }\n\n    public refundPayment(request: sdk.remotepay.RefundPaymentRequest): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL,\n                \"Device Connection Error\",\n                \"In refundPayment: RefundPaymentRequest - The Clover device is not connected.\",\n                CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);\n        }\n        else if (request == null) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL,\n                \"Request Validation Error\",\n                \"In refundPayment: RefundPaymentRequest - The request that was passed in for processing is empty.\",\n                CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);\n        }\n        else if (request.getPaymentId() == null) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL,\n                \"Request Validation Error\",\n                \"In refundPayment: RefundPaymentRequest PaymentID cannot be empty. \" + request,\n                CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);\n        }\n        else if ((request.getAmount() == null || request.getAmount() <= 0) && !request.getFullRefund()) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL,\n                \"Request Validation Error\",\n                \"In refundPayment: RefundPaymentRequest Amount must be greater than zero when FullRefund is set to false. \" + request,\n                CloverConnector.TxTypeRequestInfo.REFUND_REQUEST);\n        }\n        else {\n            this.device.doPaymentRefund(request.getOrderId(), request.getPaymentId(), request.getAmount(), request.getFullRefund());\n        }\n    }\n\n    public manualRefund(request: sdk.remotepay.ManualRefundRequest): void { // NakedRefund is a Transaction, with just negative amount\n        let transactionSettings: sdk.payments.TransactionSettings = new sdk.payments.TransactionSettings();\n        this.lastRequest = request;\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.ERROR, \"Device connection Error\", \"In manualRefund: ManualRefundRequest - The Clover device is not connected.\");\n        }\n        else if (!this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.UNSUPPORTED, \"Merchant Configuration Validation Error\", \"In manualRefund: ManualRefundRequest - Manual Refunds are not enabled for the payment gateway. Original Request = \" + request);\n        }\n        else if (request == null) {\n            this.deviceObserver.onFinishCancelManualRefund(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In manualRefund: ManualRefundRequest - The request that was passed in for processing is null.\");\n        }\n        else if (request.getAmount() == null || request.getAmount() <= 0) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, \"Request Validation Error\", \"In manualRefund: ManualRefundRequest - The request amount cannot be zero. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);\n        }\n        else if (request.getExternalId() == null || request.getExternalId().trim().length == 0 || request.getExternalId().trim().length > 32) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In manualRefund: ManualRefundRequest - The externalId is invalid. It is required and the max length is 32. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);\n        }\n        else if (request.getVaultedCard() && !this.merchantInfo.getSupportsVaultCards()) {\n            this.deviceObserver.onFinishCancel_rmm(sdk.remotepay.ResponseCode.UNSUPPORTED, \"Merchant Configuration Validation Error\", \"In manualRefund: ManualRefundRequest - Vault Card support is not enabled for the payment gateway. Original Request = \" + request, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);\n        }\n        else {\n            let builder: PayIntent.Builder = new PayIntent.Builder();\n            builder.setAmount(-Math.abs(request.getAmount()))\n                .setTransactionType(sdk.remotepay.TransactionType.CREDIT)\n                .setVaultedCard(request.getVaultedCard())\n                .setExternalPaymentId(request.getExternalId());\n\n            transactionSettings.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);\n            if (request.getDisablePrinting()) {\n                transactionSettings.setCloverShouldHandleReceipts(request.getDisablePrinting());\n            }\n\n            if (request.getDisableRestartTransactionOnFail()) {\n                transactionSettings.setDisableRestartTransactionOnFailure(request.getDisableRestartTransactionOnFail());\n            }\n            if (request.getSignatureEntryLocation()) {\n                transactionSettings.setSignatureEntryLocation(request.getSignatureEntryLocation());\n            }\n            if (request.getSignatureThreshold()) {\n                transactionSettings.setSignatureThreshold(request.getSignatureThreshold());\n            }\n            if (request.getDisableReceiptSelection()) {\n                transactionSettings.setDisableReceiptSelection(request.getDisableReceiptSelection());\n            }\n            builder.setTransactionSettings(transactionSettings);\n\n            let payIntent: sdk.remotemessage.PayIntent = builder.build();\n            this.device.doTxStart(payIntent, null, CloverConnector.TxTypeRequestInfo.CREDIT_REQUEST);\n        }\n    }\n\n    public retrievePendingPayments(): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onPendingPaymentsResponse(false, null, \"Device connection Error\", \"In retrievePendingPayments: The Clover device is not connected.\");\n        }\n        else {\n            this.device.doRetrievePendingPayments();\n        }\n    }\n\n    public readCardData(request: sdk.remotepay.ReadCardDataRequest): void {\n        if (!this.device || !this.isReady) {\n            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.ERROR, \"Device connection Error\", \"In readCardData: The Clover device is not connected.\");\n        }\n        else if (request == null) {\n            this.deviceObserver.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, \"Invalid Argument.\", \"In readCardData: ReadCardDataRequest - The request that was passed in for processing is null.\");\n        }\n        else {\n            // create pay intent...\n            let builder: PayIntent.Builder = new PayIntent.Builder();\n            builder.setTransactionType(sdk.remotepay.TransactionType.DATA);\n            builder.setCardEntryMethods(request.getCardEntryMethods() ? request.getCardEntryMethods() : this.cardEntryMethods);\n            builder.setForceSwipePinEntry(request.getIsForceSwipePinEntry());\n\n            let pi: sdk.remotemessage.PayIntent = builder.build();\n            this.device.doReadCardData(pi);\n        }\n    }\n\n    public sendMessageToActivity(request: sdk.remotepay.MessageToActivity): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In sendMessageToActivity\");\n        } else if (request == null) {\n            this.notifyInvalidData(\"In sendMessageToActivity: Invalid argument. Null is not allowed.\");\n        }\n        else {\n            this.device.doSendMessageToActivity(request.getAction(), request.getPayload());\n        }\n    }\n\n    public retrievePayment(request: sdk.remotepay.RetrievePaymentRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In retrievePayment\");\n        } else if (request == null) {\n            this.notifyInvalidData(\"In retrievePayment: Invalid argument. Null is not allowed.\");\n        } else if (!request.getExternalPaymentId()) {\n            this.notifyInvalidData(\"In retrievePayment: RetrievePaymentRequest - The externalPaymentId is null.  It must be set.\");\n        }\n        else {\n            this.device.doRetrievePayment(request.getExternalPaymentId());\n        }\n    }\n\n    public retrievePrinters(request: sdk.remotepay.RetrievePrintersRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In retrievePrinters\");\n        } else if (!request) {\n            this.notifyInvalidData(\"In retrievePrinters: Invalid argument. Null is not allowed.\");\n        } else {\n            this.device.doRetrievePrinters(request.getCategory());\n        }\n    }\n\n    public retrievePrintJobStatus(request: sdk.remotepay.PrintJobStatusRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In retrievePrintJobStatus\");\n        } else if (!request || !request.getPrintRequestId()) {\n            this.notifyInvalidData(\"In retrievePrintJobStatus: Invalid argument. Null is not allowed.\");\n        } else {\n            this.device.doRetrievePrintJobStatus(request.getPrintRequestId());\n        }\n    }\n\n    public closeout(request: sdk.remotepay.CloseoutRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In closeout\");\n        }\n        else {\n            this.device.doCloseout(request.getAllowOpenTabs(), request.getBatchId());\n        }\n    }\n\n    public cancel(): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In cancel\");\n        }\n        else {\n            this.invokeInputOption(CloverConnector.CANCEL_INPUT_OPTION);\n        }\n    }\n\n    public printText(messages: Array<string>): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In printText\");\n        } else if (messages == null) {\n            this.notifyInvalidData(\"In printText: Invalid argument. Null is not allowed.\");\n        } else {\n            this.device.doPrintText(messages);\n        }\n    }\n\n    public printImage(bitmap: any): void { //Bitmap img\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In printImage\");\n        }\n        else if (bitmap == null) {\n            this.notifyInvalidData(\"In printImage: Invalid argument.  Null is not allowed.\");\n        }\n        else {\n            this.device.doPrintImageObject(bitmap);\n        }\n    }\n\n    public printImageFromURL(url: string): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In printImageFromURL\");\n        }\n        else if (url == null) {\n            this.notifyInvalidData(\"In printImageFromURL: Invalid argument.  Null is not allowed.\");\n        }\n        else {\n            this.device.doPrintImageUrl(url);\n        }\n    }\n\n    public print(request: sdk.remotepay.PrintRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In print\");\n        } else if (!request) {\n            this.notifyInvalidData(\"In print: Invalid argument. Null is not allowed.\");\n        } else if (!this.validatePrintRequest(request)) {\n            return;\n        } else {\n            if (request.getImage()) {\n                if (Array.isArray(request.getImage()) && request.getImage().length > 1) {\n                    this.notifyInvalidData(\"In print: Invalid argument. Only one image can be printed at a time in the current API.\");\n                }\n                let singleOrArr: any = (Array.isArray(request.getImage()) ? request.getImage()[0] : request.getImage());\n                this.device.doPrintImageObject(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());\n            } else if (request.getText()) {\n                this.device.doPrintText(request.getText(), request.getPrintRequestId(), request.getPrintDeviceId());\n            } else if (request.getImageUrl()) {\n                if (Array.isArray(request.getImageUrl()) && request.getImageUrl().length > 1) {\n                    this.notifyInvalidData(\"In print: Invalid argument. Only one imageUrl can be printed at a time in the current API.\");\n                }\n                let singleOrArr: any = (Array.isArray(request.getImageUrl()) ? request.getImageUrl()[0] : request.getImageUrl());\n                this.device.doPrintImageUrl(singleOrArr, request.getPrintRequestId(), request.getPrintDeviceId());\n            } else {\n                this.notifyInvalidData(\"In print: Invalid argument. PrintRequest element was not formatted correctly.\");\n            }\n        }\n    }\n\n    public validatePrintRequest(request: sdk.remotepay.PrintRequest): boolean {\n        if (!request.getImage() && !request.getText() && !request.getImageUrl()) {\n            this.notifyInvalidData(\"In validatePrintRequest: There are no items to print.\");\n            return false;\n        } else if ((request.getImage() && request.getText()) ||\n            (request.getImage() && request.getImageUrl()) ||\n            (request.getText() && request.getImageUrl())) {\n            this.notifyInvalidData(\"In validatePrintRequest: There are too may different kinds of items to print.  Can only have one.\");\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public showMessage(message: string): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In showMessage\");\n        }\n        else if (message == null) {\n            this.notifyInvalidData(\"In showMessage: Invalid argument.  Null is not allowed.\");\n        }\n        else {\n            this.device.doTerminalMessage(message);\n        }\n    }\n\n    public showWelcomeScreen(): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In showWelcomeScreen\");\n        } else {\n            this.device.doShowWelcomeScreen();\n        }\n    }\n\n    public showThankYouScreen(): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In showThankYouScreen\");\n        } else {\n            this.device.doShowThankYouScreen();\n        }\n    }\n\n    /**\n     * Incompatibility between sdks!  Old cloud had this.\n     *\n     * @deprecated\n     *\n     * @param orderId\n     * @param paymentId\n     */\n    public showPaymentReceiptOptions(orderId: string, paymentId: string): void {\n        this.displayPaymentReceiptOptions(orderId, paymentId);\n    }\n\n    public displayPaymentReceiptOptions(orderId: string, paymentId: string): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In displayPaymentReceiptOptions\");\n        }\n        else if (orderId == null) {\n            this.notifyInvalidData(\"In displayPaymentReceiptOptions: Invalid argument.  The orderId cannot be null.\");\n        }\n        else if (paymentId == null) {\n            this.notifyInvalidData(\"In displayPaymentReceiptOptions: Invalid argument.  The paymentId cannot be null.\");\n        }\n        else {\n            this.device.doShowPaymentReceiptScreen(orderId, paymentId);\n        }\n    }\n\n    public openCashDrawer(request: sdk.remotepay.OpenCashDrawerRequest | string): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In openCashDrawer\");\n        }\n        else if (!request) {\n            this.notifyInvalidData(\"In openCashDrawer: Invalid argument. The request cannot be null.\");\n        } else if (typeof request === \"string\") {\n            this.device.doOpenCashDrawer(<string>request);\n        } else {\n            this.device.doOpenCashDrawer(request.getReason(), request.getDeviceId());\n        }\n    }\n\n    public showDisplayOrder(order: sdk.order.DisplayOrder): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In showDisplayOrder\");\n        }\n        else if (order == null) {\n            this.notifyInvalidData(\"In showDisplayOrder: Invalid argument.  The order cannot be null.\");\n        }\n        else {\n            this.device.doOrderUpdate(order, null);\n        }\n    }\n\n    public removeDisplayOrder(order: sdk.order.DisplayOrder): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In removeDisplayOrder\");\n        }\n        else if (order == null) {\n            this.notifyInvalidData(\"In removeDisplayOrder: Invalid argument.  The order cannot be null.\");\n        }\n        else {\n            let dao: sdk.order.operation.OrderDeletedOperation = new sdk.order.operation.OrderDeletedOperation();\n            dao.setId(order.getId());\n            this.device.doOrderUpdate(order, dao);\n        }\n    }\n\n    // I spoke to Hammer about this, there are no plans to implement it.\n    public discountAddedToDisplayOrder(discount: sdk.order.DisplayDiscount, order: sdk.order.DisplayOrder): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION,\n            sdk.remotepay.DeviceErrorEventCode.NotSupported,\n            null,\n            \"discountAddedToDisplayOrder has not been implemented.\");\n    }\n\n    // I spoke to Hammer about this, there are no plans to implement it.\n    public discountRemovedFromDisplayOrder(discount: sdk.order.DisplayDiscount, order: sdk.order.DisplayOrder): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION,\n            sdk.remotepay.DeviceErrorEventCode.NotSupported,\n            null,\n            \"discountRemovedFromDisplayOrder has not been implemented.\");\n    }\n\n    // I spoke to Hammer about this, there are no plans to implement it.\n    public lineItemAddedToDisplayOrder(lineItem: sdk.order.DisplayLineItem, order: sdk.order.DisplayOrder): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION,\n            sdk.remotepay.DeviceErrorEventCode.NotSupported,\n            null,\n            \"lineItemAddedToDisplayOrder has not been implemented.\");\n    }\n\n    // I spoke to Hammer about this, there are no plans to implement it.\n    public lineItemRemovedFromDisplayOrder(lineItem: sdk.order.DisplayLineItem, order: sdk.order.DisplayOrder): void {\n        this.notifyDeviceError(sdk.remotepay.ErrorType.EXCEPTION,\n            sdk.remotepay.DeviceErrorEventCode.NotSupported,\n            null,\n            \"lineItemRemovedFromDisplayOrder has not been implemented.\");\n    }\n\n    public dispose(): void {\n        this.broadcaster.clear();\n        if (this.device) {\n            this.device.dispose();\n        }\n    }\n\n    public invokeInputOption(io: sdk.remotepay.InputOption): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In invokeInputOption\");\n        }\n        else {\n            this.device.doKeyPress(io.getKeyPress());\n        }\n    }\n\n    public resetDevice(): void {\n        this.lastRequest = null;\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In resetDevice\");\n        }\n        else {\n            this.device.doResetDevice();\n        }\n    }\n\n    public retrieveDeviceStatus(request: sdk.remotepay.RetrieveDeviceStatusRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In retrieveDeviceStatus\");\n        }\n        else {\n            this.device.doRetrieveDeviceStatus(request);\n        }\n    }\n\n    private getCardEntryMethods(): number {\n        return this.cardEntryMethods;\n    }\n\n    public startCustomActivity(request: sdk.remotepay.CustomActivityRequest): void {\n        if (!this.device || !this.isReady) {\n            this.notifyDeviceNotConnected(\"In invokeInputOption\");\n        }\n        else {\n            this.device.doStartActivity(request.getAction(), request.getPayload(), request.getNonBlocking());\n        }\n    }\n\n\n    static populateBaseResponse(response: sdk.remotepay.BaseResponse,\n                                success: boolean,\n                                result: sdk.remotepay.ResponseCode,\n                                reason?: string,\n                                message?: string): void {\n        response.setSuccess(success);\n        response.setResult(result);\n        response.setReason(reason);\n        response.setMessage(message);\n\n    }\n\n    static populatePaymentResponse(response: sdk.remotepay.PaymentResponse,\n                                   success: boolean,\n                                   result: sdk.remotepay.ResponseCode,\n                                   payment: sdk.payments.Payment,\n                                   signature?: sdk.base.Signature,\n                                   reason?: string,\n                                   message?: string): void {\n        CloverConnector.populateBaseResponse(response, success, result, reason, message);\n        response.setPayment(payment);\n        response.setSignature(signature);\n        const cardTransaction = payment.getCardTransaction();\n        if (cardTransaction) {\n            const transactionType = cardTransaction.getType();\n            response.setIsSale(\n                sdk.payments.CardTransactionType.AUTH == transactionType &&\n                sdk.payments.Result.SUCCESS == payment.getResult());\n            response.setIsAuth(\n                sdk.payments.CardTransactionType.PREAUTH == transactionType &&\n                sdk.payments.Result.SUCCESS == payment.getResult());\n            response.setIsPreAuth(\n                sdk.payments.CardTransactionType.PREAUTH == transactionType &&\n                sdk.payments.Result.AUTH == payment.getResult());\n        }\n    }\n}\n\nexport namespace CloverConnector {\n    export class TxTypeRequestInfo {\n        public static SALE_REQUEST: string = \"SALE\";\n        public static AUTH_REQUEST: string = \"AUTH\";\n        public static PREAUTH_REQUEST: string = \"PREAUTH\";\n        public static CREDIT_REQUEST: string = \"CREDIT\";\n        public static REFUND_REQUEST: string = \"REFUND\";\n    }\n\n    export class InnerDeviceObserver implements CloverDeviceObserver {\n        // Create a logger\n        logger: Logger = Logger.create();\n\n        // Clover connector we are using\n        cloverConnector: CloverConnector;\n\n        // Hold the last Payment Refund Response\n        lastPRR: sdk.remotepay.RefundPaymentResponse; //still in use until orderRef is populated on refund objects\n\n        constructor(cc: CloverConnector) {\n            this.cloverConnector = cc;\n        }\n\n        public onTxState(txState: sdk.remotemessage.TxState): void {\n        }\n\n        private getMessageTypeFromLastRequest(lastRequest: any): string {\n            if (lastRequest instanceof sdk.remotepay.PreAuthRequest) {\n                return TxTypeRequestInfo.PREAUTH_REQUEST;\n            }\n            else if (lastRequest instanceof sdk.remotepay.AuthRequest) {\n                return TxTypeRequestInfo.AUTH_REQUEST;\n            }\n            else if (lastRequest instanceof sdk.remotepay.SaleRequest) {\n                return TxTypeRequestInfo.SALE_REQUEST;\n            }\n            else if (lastRequest instanceof sdk.remotepay.ManualRefundRequest) {\n                return TxTypeRequestInfo.CREDIT_REQUEST;\n            }\n            return null;\n        }\n\n        public onTxStartResponse(result: sdk.remotemessage.TxStartResponseResult, externalId: string, requestInfo: string): void {\n            if (result == sdk.remotemessage.TxStartResponseResult.SUCCESS) return;\n\n            let duplicate: boolean = (result == sdk.remotemessage.TxStartResponseResult.DUPLICATE);\n            let code: sdk.remotepay.ResponseCode = duplicate ? sdk.remotepay.ResponseCode.CANCEL : sdk.remotepay.ResponseCode.FAIL;\n            let message: string = duplicate ? \"The provided transaction id of \" + externalId + \" has already been processed and cannot be resubmitted.\" : null;\n            try {\n                // The old (deprecated) way to get the type.  Here for backwards compatibility\n                if (requestInfo == null) {\n                    requestInfo = this.getMessageTypeFromLastRequest(this.cloverConnector.lastRequest);\n                }\n                // Use the requestInfo if it exists, to determine the request type\n                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {\n                    let response: sdk.remotepay.PreAuthResponse = new sdk.remotepay.PreAuthResponse();\n                    CloverConnector.populateBaseResponse(response, false, code, result, message);\n                    this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);\n                }\n                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {\n                    let response: sdk.remotepay.AuthResponse = new sdk.remotepay.AuthResponse();\n                    CloverConnector.populateBaseResponse(response, false, code, result, message);\n                    this.cloverConnector.broadcaster.notifyOnAuthResponse(response);\n                }\n                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {\n                    let response: sdk.remotepay.SaleResponse = new sdk.remotepay.SaleResponse();\n                    CloverConnector.populateBaseResponse(response, false, code, result, message);\n                    this.cloverConnector.broadcaster.notifyOnSaleResponse(response);\n                }\n                else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {\n                    let response: sdk.remotepay.ManualRefundResponse = new sdk.remotepay.ManualRefundResponse();\n                    CloverConnector.populateBaseResponse(response, false, code, result, message);\n                    this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);\n                } else {\n                    this.logger.error(\"Could not determine request type. requestInfo = \" + requestInfo + \" lastRequest = \" + this.cloverConnector.lastRequest);\n                }\n            }\n            finally {\n                this.cloverConnector.lastRequest = null;\n            }\n        }\n\n        public onUiState(uiState: sdk.remotemessage.UiState, uiText: string, uiDirection: sdk.remotemessage.UiDirection, inputOptions: Array<sdk.remotemessage.InputOption>): void {\n            let deviceEvent: sdk.remotepay.CloverDeviceEvent = new sdk.remotepay.CloverDeviceEvent();\n            deviceEvent.setInputOptions(inputOptions);\n            deviceEvent.setEventState(sdk.remotepay.DeviceEventState[uiState.toString()]);\n            deviceEvent.setMessage(uiText);\n            if (uiDirection == sdk.remotemessage.UiDirection.ENTER) {\n                this.cloverConnector.broadcaster.notifyOnDeviceActivityStart(deviceEvent);\n            }\n            else if (uiDirection == sdk.remotemessage.UiDirection.EXIT) {\n                this.cloverConnector.broadcaster.notifyOnDeviceActivityEnd(deviceEvent);\n                if (uiState.toString() == sdk.remotepay.DeviceEventState.RECEIPT_OPTIONS.toString()) {\n                    this.cloverConnector.device.doShowWelcomeScreen();\n                }\n            }\n        }\n\n        public onTipAdded(tip: number): void {\n            this.cloverConnector.broadcaster.notifyOnTipAdded(tip);\n        }\n\n        public onAuthTipAdjusted(paymentId: string, tipAmount: number, success: boolean): void;\n        public onAuthTipAdjusted(result: sdk.remotepay.ResponseCode, reason: string, message: string): void;\n        // Weird mechanism to overload via TypeScript - https://blog.mariusschulz.com/2016/08/18/function-overloads-in-typescript\n        public onAuthTipAdjusted(resultStatusOrPaymentId: any, reasonOrTipAmount: any, messageOrSuccess: any): void {\n            if (typeof resultStatusOrPaymentId == 'string') {\n                if (messageOrSuccess) {\n                    this.onAuthTipAdjustedHandler(resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess, sdk.remotepay.ResponseCode.SUCCESS, null, null);\n                }\n                else {\n                    this.onAuthTipAdjustedHandler(resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess, sdk.remotepay.ResponseCode.FAIL, 'Failure', 'TipAdjustAuth failed to process for payment ID: ' + resultStatusOrPaymentId);\n                }\n            } else {\n                this.onAuthTipAdjustedHandler(null, 0, false, resultStatusOrPaymentId, reasonOrTipAmount, messageOrSuccess);\n            }\n        }\n\n        private onAuthTipAdjustedHandler(paymentId: string, tipAmount: number, success: boolean, result: sdk.remotepay.ResponseCode, reason: string, message: string): void {\n            let response: sdk.remotepay.TipAdjustAuthResponse = new sdk.remotepay.TipAdjustAuthResponse();\n            response.setPaymentId(paymentId);\n            response.setTipAmount(tipAmount);\n            CloverConnector.populateBaseResponse(response, success, result, reason, message);\n            this.cloverConnector.broadcaster.notifyOnTipAdjustAuthResponse(response);\n        }\n\n        public onCashbackSelected(cashbackAmount: number): void {\n            //TODO: For future use\n        }\n\n        public onPartialAuth(partialAmount: number): void {\n            //TODO: For future use\n        }\n\n        public onFinishOkPayment(payment: sdk.payments.Payment, signature: sdk.base.Signature, requestInfo: string): void {\n            try {\n                this.cloverConnector.device.doShowThankYouScreen(); //need to do this first, so Listener implementation can replace the screen as desired\n                let lastRequest: any = this.cloverConnector.lastRequest;\n                this.cloverConnector.lastRequest = null;\n                if (!requestInfo) {\n                    // This is deprecated logic and should be removed at some point in the future\n                    // when we are comfortable that there are no longer any backward compatibility issues\n                    requestInfo = this.getMessageTypeFromLastRequest(lastRequest);\n                }\n                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {\n                    let response: sdk.remotepay.PreAuthResponse = new sdk.remotepay.PreAuthResponse();\n                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);\n                    this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);\n                    this.cloverConnector.lastRequest = null;\n                }\n                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {\n                    let response: sdk.remotepay.AuthResponse = new sdk.remotepay.AuthResponse();\n                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);\n                    this.cloverConnector.broadcaster.notifyOnAuthResponse(response);\n                    this.cloverConnector.lastRequest = null;\n                }\n                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {\n                    let response: sdk.remotepay.SaleResponse = new sdk.remotepay.SaleResponse();\n                    CloverConnector.populatePaymentResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS, payment, signature);\n                    this.cloverConnector.broadcaster.notifyOnSaleResponse(response);\n                    this.cloverConnector.lastRequest = null;\n                }\n                else {\n                    this.logger.error(\"Failed to pair this response: \" + payment);\n                }\n            }\n            finally {\n                // do nothing for now...\n            }\n        }\n\n        public onFinishOkCredit(credit: sdk.payments.Credit): void {\n            try {\n                this.cloverConnector.device.doShowWelcomeScreen();\n                this.cloverConnector.lastRequest = null;\n                let response: sdk.remotepay.ManualRefundResponse = new sdk.remotepay.ManualRefundResponse();\n                CloverConnector.populateBaseResponse(response, true, sdk.remotepay.ResponseCode.SUCCESS);\n                response.setCredit(credit);\n                this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);\n            }\n            finally {\n            }\n        }\n\n        public onFinishOkRefund(refund: sdk.payments.Refund): void {\n            try {\n                this.cloverConnector.device.doShowWelcomeScreen();\n                this.cloverConnector.lastRequest = null;\n                // NOTE: these two lines can eventually be removed (once refunds have the orderRef populated correctly):\n                let lastRefundResponse: sdk.remotepay.RefundPaymentResponse = this.lastPRR; //only needed for the order ID\n                this.lastPRR = null;\n                if (refund.getOrderRef() != null) {\n                    let success: boolean = true;\n                    let response: sdk.remotepay.RefundPaymentResponse = new sdk.remotepay.RefundPaymentResponse();\n                    CloverConnector.populateBaseResponse(response, success,\n                        success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);\n                    response.setOrderId(refund.getOrderRef().getId());\n                    if (refund.getPayment()) {\n                        response.setPaymentId(refund.getPayment().getId());\n                    }\n                    response.setRefund(refund);\n                    this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);\n                } else {\n                    if (lastRefundResponse && lastRefundResponse.getRefund().getId() == refund.getId()) { //need to make sure it's the same refund before sending\n                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(lastRefundResponse);\n                    } else {\n                        let success: boolean = true;\n                        let response: sdk.remotepay.RefundPaymentResponse = new sdk.remotepay.RefundPaymentResponse();\n                        CloverConnector.populateBaseResponse(response, success,\n                            success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);\n                        if (refund.getPayment()) {\n                            response.setPaymentId(refund.getPayment().getId());\n                        }\n                        response.setRefund(refund);\n                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);\n                    }\n                }\n            }\n            finally {\n            }\n        }\n\n        public onFinishOk(payment: sdk.payments.Payment, signature: sdk.base.Signature, requestInfo: string): void;\n        public onFinishOk(credit: sdk.payments.Credit): void;\n        public onFinishOk(refund: sdk.payments.Refund): void;\n        // Weird mechanism to overload via TypeScript - https://blog.mariusschulz.com/2016/08/18/function-overloads-in-typescript\n        public onFinishOk(paymentCreditOrRefund: any, signature?: sdk.base.Signature, requestInfo?: string): void {\n            if (paymentCreditOrRefund instanceof sdk.payments.Payment /* && signature */) {\n                this.onFinishOkPayment(paymentCreditOrRefund, signature, requestInfo);\n            }\n            else if (paymentCreditOrRefund instanceof sdk.payments.Credit) {\n                this.onFinishOkCredit(paymentCreditOrRefund);\n            }\n            else {\n                this.onFinishOkRefund(paymentCreditOrRefund);\n            }\n        }\n\n        public onFinishCancel_rmm(result: sdk.remotepay.ResponseCode, reason: string, message: string, requestInfo: string) {\n            try {\n                if (this.cloverConnector.device) {\n                    this.cloverConnector.device.doShowWelcomeScreen();\n                }\n                let lastReq: any = this.cloverConnector.lastRequest;\n                this.cloverConnector.lastRequest = null;\n                if (!requestInfo) {\n                    // Backwards compatibility, attempt to get the message type from the last request.\n                    requestInfo = this.getMessageTypeFromLastRequest(lastReq);\n                }\n                if (requestInfo == TxTypeRequestInfo.PREAUTH_REQUEST) {\n                    this.onFinishCancelPreAuth(result, reason, message);\n                }\n                else if (requestInfo == TxTypeRequestInfo.SALE_REQUEST) {\n                    this.onFinishCancelSale(result, reason, message);\n                }\n                else if (requestInfo == TxTypeRequestInfo.AUTH_REQUEST) {\n                    this.onFinishCancelAuth(result, reason, message);\n                }\n                else if (requestInfo == TxTypeRequestInfo.CREDIT_REQUEST) {\n                    this.onFinishCancelManualRefund(result, reason, message);\n                }\n                else if (requestInfo == TxTypeRequestInfo.REFUND_REQUEST) {\n                    this.onFinishCancelRefund(result, reason, message);\n                }\n                else {\n                    // Complete any un-resolved payment refund requests.\n                    if (this.lastPRR) {\n                        this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(this.lastPRR);\n                        this.lastPRR = null;\n                    }\n                    else {\n                        if (!requestInfo) {\n                            this.logger.error('onFinishCancel called, requestInfo was null, and ' +\n                                'could not determine the type of the message from the last request',\n                                arguments);\n                        }\n                        else {\n                            this.logger.error('onFinishCancel called, but could not determine how to respond!', arguments);\n                        }\n                    }\n                }\n            }\n            finally {\n                // do nothing\n            }\n        }\n\n        public onFinishCancel(requestInfo: string): void {\n            this.onFinishCancel_rmm(sdk.remotepay.ResponseCode.CANCEL, null, null, requestInfo);\n        }\n\n        public onFinishCancelPreAuth(result: sdk.remotepay.ResponseCode, reason?: string, message?: string): void {\n            let response: sdk.remotepay.PreAuthResponse = new sdk.remotepay.PreAuthResponse();\n            CloverConnector.populateBaseResponse(response, false, result,\n                reason ? reason : \"Request Canceled\",\n                message ? message : \"The PreAuth Request was canceled.\");\n            this.cloverConnector.broadcaster.notifyOnPreAuthResponse(response);\n        }\n\n        public onFinishCancelSale(result: sdk.remotepay.ResponseCode, reason?: string, message?: string): void {\n            let response: sdk.remotepay.SaleResponse = new sdk.remotepay.SaleResponse();\n            CloverConnector.populateBaseResponse(response, false, result,\n                reason ? reason : \"Request Canceled\",\n                message ? message : \"The Sale Request was canceled.\");\n            this.cloverConnector.broadcaster.notifyOnSaleResponse(response);\n        }\n\n        public onFinishCancelAuth(result: sdk.remotepay.ResponseCode, reason?: string, message?: string): void {\n            let response: sdk.remotepay.AuthResponse = new sdk.remotepay.AuthResponse();\n            CloverConnector.populateBaseResponse(response, false, result,\n                reason ? reason : \"Request Canceled\",\n                message ? message : \"The Auth Request was canceled.\");\n            this.cloverConnector.broadcaster.notifyOnAuthResponse(response);\n        }\n\n        public onFinishCancelManualRefund(result: sdk.remotepay.ResponseCode, reason?: string, message?: string): void {\n            let response: sdk.remotepay.ManualRefundResponse = new sdk.remotepay.ManualRefundResponse();\n            CloverConnector.populateBaseResponse(response, false, result,\n                reason ? reason : \"Request Canceled\",\n                message ? message : \"The Manual Refund Request was canceled.\");\n            this.cloverConnector.broadcaster.notifyOnManualRefundResponse(response);\n        }\n\n        public onFinishCancelRefund(result: sdk.remotepay.ResponseCode, reason?: string, message?: string): void {\n            let response: sdk.remotepay.RefundPaymentResponse = new sdk.remotepay.RefundPaymentResponse();\n            CloverConnector.populateBaseResponse(response, false, result,\n                reason ? reason : \"Request Canceled\",\n                message ? message : \"The Refund Request was canceled.\");\n            this.cloverConnector.broadcaster.notifyOnRefundPaymentResponse(response);\n        }\n\n        public onVerifySignature(payment: sdk.payments.Payment, signature: sdk.base.Signature): void {\n            let request: InnerDeviceObserver.SVR = new InnerDeviceObserver.SVR(this.cloverConnector.device);\n            request.setSignature(signature);\n            request.setPayment(payment);\n            this.cloverConnector.broadcaster.notifyOnVerifySignatureRequest(<any>request);\n        }\n\n        public onConfirmPayment(payment: sdk.payments.Payment, challenges: sdk.base.Challenge[]): void {\n            let cpr: sdk.remotepay.ConfirmPaymentRequest = new sdk.remotepay.ConfirmPaymentRequest();\n            cpr.setPayment(payment);\n            cpr.setChallenges(challenges);\n            this.cloverConnector.broadcaster.notifyOnConfirmPaymentRequest(cpr);\n        }\n\n        public onPaymentVoided(payment: sdk.payments.Payment, voidReason: sdk.order.VoidReason,\n                               resultStatus: sdk.remotemessage.ResultStatus, reason: string, message: string): void {\n            let success: boolean = (resultStatus == sdk.remotemessage.ResultStatus.SUCCESS);\n            let result: sdk.remotepay.ResponseCode = (success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);\n            reason = reason != null ? reason : result.toString();\n            message = message ? message : \"No extended information provided.\";\n\n            let response: sdk.remotepay.VoidPaymentResponse = new sdk.remotepay.VoidPaymentResponse();\n            response.setPaymentId(payment != null ? payment.getId() : null);\n            CloverConnector.populateBaseResponse(response, success, result, reason, message);\n            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);\n        }\n\n        public onPaymentVoided_responseCode(code: sdk.remotepay.ResponseCode, reason: string, message: string): void {\n            let success: boolean = (code == sdk.remotepay.ResponseCode.SUCCESS);\n            reason = reason ? reason : code.toString();\n            message = message ? message : \"No extended information provided.\";\n\n            let response: sdk.remotepay.VoidPaymentResponse = new sdk.remotepay.VoidPaymentResponse();\n            CloverConnector.populateBaseResponse(response, success, code, reason, message);\n            this.cloverConnector.broadcaster.notifyOnVoidPaymentResponse(response);\n        }\n\n        public onKeyPressed(keyPress: sdk.remotemessage.KeyPress): void {\n            //TODO: For future use\n        }\n\n        public onPaymentRefundResponse(orderId: string, paymentId: string, refund: sdk.payments.Refund, code: sdk.remotemessage.TxState, reason: sdk.remotemessage.ErrorCode, message: string): void {\n            // hold the response for finishOk for the refund. See comments in onFinishOk(Refund)\n            let success: boolean = (code == sdk.remotemessage.TxState.SUCCESS);\n            let response: sdk.remotepay.RefundPaymentResponse = new sdk.remotepay.RefundPaymentResponse();\n            CloverConnector.populateBaseResponse(response, success,\n                success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL);\n            response.setOrderId(orderId);\n            response.setPaymentId(paymentId);\n            response.setRefund(refund);\n            if (reason !== undefined) {\n                response.setReason(reason.toString());\n            }\n            response.setMessage(message);\n            //NOTE: While this is currently needed, we are attempting to move away from this requirement\n            this.lastPRR = response; // set this so we have the appropriate information for when onFinish(Refund) is called\n        }\n\n        public onVaultCardResponse(vaultedCard: sdk.payments.VaultedCard, code: string, reason: string): void {\n            let success: boolean = (code == sdk.remotepay.ResponseCode.SUCCESS);\n            this.onVaultCardResponseInternal(success, success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL, null, null, vaultedCard);\n        }\n\n        public onVaultCardResponseInternal(success: boolean, code: sdk.remotepay.ResponseCode, reason: string, message: string, vaultedCard: sdk.payments.VaultedCard): void {\n            this.cloverConnector.device.doShowWelcomeScreen();\n            let response: sdk.remotepay.VaultCardResponse = new sdk.remotepay.VaultCardResponse();\n            response.setCard(vaultedCard);\n            CloverConnector.populateBaseResponse(response, success, code, reason, message);\n            this.cloverConnector.broadcaster.notifyOnVaultCardRespose(response);\n        }\n\n        public onCapturePreAuth(statusOrCode: any,\n                                reason: string,\n                                paymentId: string, amount: number, tipAmount: number): void {\n            let success: boolean = (sdk.remotemessage.ResultStatus.SUCCESS == statusOrCode);\n            let response: sdk.remotepay.CapturePreAuthResponse = new sdk.remotepay.CapturePreAuthResponse();\n            CloverConnector.populateBaseResponse(response, success, statusOrCode, reason);\n            response.setPaymentId(paymentId);\n            response.setAmount(amount);\n            response.setTipAmount(tipAmount);\n            this.cloverConnector.broadcaster.notifyOnCapturePreAuth(response);\n        }\n\n        public onCloseoutResponse(status: sdk.remotemessage.ResultStatus, reason: string, batch: sdk.payments.Batch): void {\n            let success: boolean = (status == sdk.remotemessage.ResultStatus.SUCCESS);\n            let result: sdk.remotepay.ResponseCode = (status == sdk.remotemessage.ResultStatus.SUCCESS ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL); //type is irrelevant, but we changed it for clarity sake\n            let response: sdk.remotepay.CloseoutResponse = new sdk.remotepay.CloseoutResponse();\n            CloverConnector.populateBaseResponse(response, success, result, reason, null);\n            response.setBatch(batch);\n            this.cloverConnector.broadcaster.notifyCloseout(response);\n        }\n\n        private onCloseoutResponseHandler(batch: sdk.payments.Batch, result: sdk.remotepay.ResponseCode, reason: string, message: string): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n            let response: sdk.remotepay.CloseoutResponse = new sdk.remotepay.CloseoutResponse();\n            CloverConnector.populateBaseResponse(response, success, result, reason, message);\n            response.setBatch(batch);\n            this.cloverConnector.broadcaster.notifyCloseout(response);\n        }\n\n        public onDeviceDisconnected(device: CloverDevice, message?: string): void {\n            this.logger.debug('Disconnected ', message);\n            this.cloverConnector.isReady = false;\n            this.cloverConnector.broadcaster.notifyOnDisconnect(message);\n        }\n\n        public onDeviceConnected(): void {\n            this.logger.debug('Connected');\n            this.cloverConnector.isReady = false;\n            this.cloverConnector.broadcaster.notifyOnConnect();\n        }\n\n        public onDeviceReady(device: CloverDevice, drm: sdk.remotemessage.DiscoveryResponseMessage): void {\n            this.logger.debug('Ready');\n            this.cloverConnector.isReady = drm.getReady();\n\n            // Build merchant info from the discoveryrequest\n            let merchantInfo: sdk.remotepay.MerchantInfo = new sdk.remotepay.MerchantInfo();\n            merchantInfo.setMerchantID(drm.getMerchantId());\n            merchantInfo.setMerchantMID(drm.getMerchantMId());\n            merchantInfo.setMerchantName(drm.getMerchantName());\n            let deviceInfo: sdk.remotepay.DeviceInfo = new sdk.remotepay.DeviceInfo();\n            merchantInfo.setDeviceInfo(deviceInfo);\n            deviceInfo.setName(drm.getName());\n            deviceInfo.setModel(drm.getModel());\n            deviceInfo.setSerial(drm.getSerial());\n            deviceInfo.setSupportsAcks(drm.getSupportsAcknowledgement());\n            merchantInfo.setSupportsPreAuths(drm.getSupportsTipAdjust());\n            merchantInfo.setSupportsManualRefunds(drm.getSupportsManualRefund());\n            merchantInfo.setSupportsTipAdjust(drm.getSupportsTipAdjust());\n            merchantInfo.setSupportsAuths(drm.getSupportsTipAdjust());\n            merchantInfo.setSupportsVaultCards(drm.getSupportsManualRefund());\n\n            this.cloverConnector.merchantInfo = merchantInfo;\n            this.cloverConnector.device.setSupportsAcks(merchantInfo.getDeviceInfo().getSupportsAcks());\n\n            if (drm.getReady()) {\n                this.cloverConnector.broadcaster.notifyOnReady(merchantInfo);\n            }\n            else {\n                this.cloverConnector.broadcaster.notifyOnConnect();\n            }\n        }\n\n        public onDeviceError(errorEvent: sdk.remotepay.CloverDeviceErrorEvent): void {\n            this.cloverConnector.broadcaster.notifyOnDeviceError(errorEvent);\n        }\n\n        // TODO: The Print Message objects are missing from the api\n        public onPrintRefundPayment(payment: sdk.remotepay.Payment, order: sdk.order.Order, refund: sdk.payments.Refund): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintRefundPaymentReceipt(new PrintRefundPaymentReceiptMessage(payment, order, refund));\n        }\n\n        public onPrintMerchantReceipt(payment: sdk.remotepay.Payment): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintPaymentMerchantCopyReceipt(new PrintPaymentMerchantCopyReceiptMessage(payment));\n        }\n\n        public onPrintPaymentDecline(payment: sdk.remotepay.Payment, reason: string): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintPaymentDeclineReceipt(new PrintPaymentDeclineReceiptMessage(payment, reason));\n        }\n\n        public onPrintPayment(payment: sdk.remotepay.Payment, order: sdk.order.Order): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintPaymentReceipt(new PrintPaymentReceiptMessage(payment, order));\n        }\n\n        public onPrintCredit(credit: sdk.remotepay.Credit): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintCreditReceipt(new PrintManualRefundReceiptMessage(credit));\n        }\n\n        public onPrintCreditDecline(credit: sdk.remotepay.Credit, reason: string): void {\n            // this.cloverConnector.broadcaster.notifyOnPrintCreditDeclineReceipt(new PrintManualRefundDeclineReceiptMessage(credit, reason));\n        }\n\n        public onMessageAck(messageId: string): void {\n            // TODO: for future use\n        }\n\n        public onPendingPaymentsResponse(success: boolean, pendingPayments: Array<sdk.base.PendingPaymentEntry>, reason?: string, message?: string): void {\n            let result: sdk.remotepay.ResponseCode = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.ERROR;\n            let response: sdk.remotepay.RetrievePendingPaymentsResponse = new sdk.remotepay.RetrievePendingPaymentsResponse();\n            CloverConnector.populateBaseResponse(response, success, result, reason, message);\n            if (pendingPayments) {\n                response.setPendingPaymentEntries(pendingPayments);\n            } else {\n                this.cloverConnector.device.doShowWelcomeScreen();\n            }\n            this.cloverConnector.broadcaster.notifyOnRetrievePendingPaymentResponse(response);\n        }\n\n        private onPendingPaymentsResponseHandler(success: boolean, pendingPayments: Array<sdk.base.PendingPaymentEntry>, result: sdk.remotepay.ResponseCode, reason: string, message: string): void {\n            let response: sdk.remotepay.RetrievePendingPaymentsResponse = new sdk.remotepay.RetrievePendingPaymentsResponse();\n            CloverConnector.populateBaseResponse(response, success, result, reason, message);\n            response.setPendingPaymentEntries(pendingPayments);\n            this.cloverConnector.broadcaster.notifyOnRetrievePendingPaymentResponse(response);\n        }\n\n        public onReadCardResponse(status: sdk.remotemessage.ResultStatus, reason: string, cardData: sdk.base.CardData): void {\n            let success: boolean = (status == sdk.remotemessage.ResultStatus.SUCCESS);\n            if (success) {\n                let response: sdk.remotepay.ReadCardDataResponse = new sdk.remotepay.ReadCardDataResponse();\n                CloverConnector.populateBaseResponse(response, success,\n                    success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.FAIL,\n                    reason);\n                response.setCardData(cardData);\n                this.cloverConnector.device.doShowWelcomeScreen();\n                this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);\n            }\n            else if (status == sdk.remotemessage.ResultStatus.CANCEL) {\n                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.CANCEL, reason, '');\n            }\n            else {\n                this.onReadCardDataResponse(sdk.remotepay.ResponseCode.FAIL, reason, '');\n            }\n        }\n\n        public onMessageFromActivity(actionId: string, payload: string): void {\n            let message: sdk.remotepay.MessageFromActivity = new sdk.remotepay.MessageFromActivity();\n            message.setAction(actionId);\n            message.setPayload(payload);\n            this.cloverConnector.broadcaster.notifyOnActivityMessage(message);\n        }\n\n        public onReadCardDataResponse(result: sdk.remotepay.ResponseCode, reason: string, message: string): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n            this.cloverConnector.device.doShowWelcomeScreen();\n            let response: sdk.remotepay.ReadCardDataResponse = new sdk.remotepay.ReadCardDataResponse();\n            CloverConnector.populateBaseResponse(response, success, result,\n                reason, message);\n            this.cloverConnector.broadcaster.notifyOnReadCardDataResponse(response);\n        }\n\n        public onActivityResponse(status: sdk.remotemessage.ResultStatus, payload: string, reason: string, actionId: string): void {\n            let success: boolean = (status == sdk.remotemessage.ResultStatus.SUCCESS);\n            let result: sdk.remotepay.ResponseCode = success ? sdk.remotepay.ResponseCode.SUCCESS : sdk.remotepay.ResponseCode.CANCEL;\n            let response: sdk.remotepay.CustomActivityResponse = new sdk.remotepay.CustomActivityResponse();\n            CloverConnector.populateBaseResponse(response, success, result,\n                reason);\n            response.setPayload(payload);\n            response.setAction(actionId);\n            this.cloverConnector.broadcaster.notifyOnActivityResponse(response);\n        }\n\n        public onDeviceStatusResponse(result: sdk.remotepay.ResponseCode, reason: string, state: sdk.remotemessage.ExternalDeviceState, data: sdk.remotemessage.ExternalDeviceStateData): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n\n            let response: sdk.remotepay.RetrieveDeviceStatusResponse = new sdk.remotepay.RetrieveDeviceStatusResponse();\n            CloverConnector.populateBaseResponse(response, success, result,\n                reason);\n            response.setState(state);\n            response.setData(data);\n            this.cloverConnector.broadcaster.notifyOnRetrieveDeviceStatusResponse(response);\n        }\n\n        public onResetDeviceResponse(result: sdk.remotepay.ResponseCode, reason: string, state: sdk.remotemessage.ExternalDeviceState): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n\n            let response: sdk.remotepay.ResetDeviceResponse = new sdk.remotepay.ResetDeviceResponse();\n            CloverConnector.populateBaseResponse(response, success, result,\n                reason);\n            response.setState(state);\n            this.cloverConnector.broadcaster.notifyOnResetDeviceResponse(response);\n        }\n\n        public onRetrievePaymentResponse(result: sdk.remotepay.ResponseCode, reason: string, externalPaymentId: string, queryStatus: sdk.remotepay.QueryStatus, payment: sdk.payments.Payment): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n\n            let response: sdk.remotepay.RetrievePaymentResponse = new sdk.remotepay.RetrievePaymentResponse();\n            CloverConnector.populateBaseResponse(response, success, result,\n                reason);\n            response.setExternalPaymentId(externalPaymentId);\n            response.setQueryStatus(queryStatus);\n            response.setPayment(payment);\n            this.cloverConnector.broadcaster.notifyOnRetrievePaymentResponse(response);\n        }\n\n        public onRetrievePrintersResponse(result: sdk.remotepay.ResponseCode, printers: Array<sdk.printer.Printer>): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n            let response: sdk.remotepay.RetrievePrintersResponse = new sdk.remotepay.RetrievePrintersResponse();\n            CloverConnector.populateBaseResponse(response, success, result, null);\n            response.setPrinters(printers);\n            this.cloverConnector.broadcaster.notifyOnRetrievePrintersResponse(response);\n        }\n\n        public onPrintJobStatusResponse(result: sdk.remotepay.ResponseCode, printRequestId: string, printStatus: sdk.printer.PrintJobStatus): void {\n            let success: boolean = (result == sdk.remotepay.ResponseCode.SUCCESS);\n            let response: sdk.remotepay.PrintJobStatusResponse = new sdk.remotepay.PrintJobStatusResponse();\n            CloverConnector.populateBaseResponse(response, success, result, <any>printStatus);\n            response.setStatus(printStatus);\n            response.setPrintRequestId(printRequestId);\n            this.cloverConnector.broadcaster.notifyOnPrintJobStatusResponse(response);\n        }\n    }\n\n    export namespace InnerDeviceObserver {\n        export class SVR extends sdk.remotepay.VerifySignatureRequest {\n            cloverDevice: CloverDevice;\n\n            constructor(device: CloverDevice) {\n                super();\n                this.cloverDevice = device;\n            }\n\n            public accept(): void {\n                this.cloverDevice.doSignatureVerified(super.getPayment(), true);\n            }\n\n            public reject(): void {\n                this.cloverDevice.doSignatureVerified(super.getPayment(), false);\n            }\n\n            public setSignature(signature: sdk.base.Signature): void {\n                super.setSignature(signature);\n            }\n\n            public setPayment(payment: sdk.payments.Payment): void {\n                super.setPayment(payment);\n            }\n        }\n    }\n}\n"]}