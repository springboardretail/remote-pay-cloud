{"version":3,"sources":["com/clover/remote/client/CloverConnectorFactory.ts"],"names":[],"mappings":"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","file":"../../../../../com/clover/remote/client/CloverConnectorFactory.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\nimport {WebSocketCloudCloverDeviceConfiguration} from './device/WebSocketCloudCloverDeviceConfiguration';\nimport {Endpoints} from '../../util/Endpoints';\nimport {HttpSupport} from '../../util/HttpSupport';\nimport {ICloverConnectorFactory} from './ICloverConnectorFactory';\nimport {CloverConnector} from './CloverConnector';\nimport {BrowserWebSocketImpl} from '../../websocket/BrowserWebSocketImpl';\nimport {IImageUtil} from '../../util/IImageUtil';\nimport {ImageUtil} from '../../util/ImageUtil';\n\n/**\n * This is for backwards compatibility.  It will not work for non-browser!!!\n *\n * This is the equivalent of the old way we created and ran the cloud.\n */\nexport class CloverConnectorFactory implements ICloverConnectorFactory {\n    constructor() {\n    }\n\n    public createICloverConnector(configuration: any): sdk.remotepay.ICloverConnector {\n        return new LegacyCloverConnector(configuration);\n    }\n}\n\n/**\n * This connector uses Browser specific objects to work in a manner compatible with the\n * 1.1.0 implementation of the ICloverConnector.\n *\n * It uses the domain && clientId to get the oauthtoken, then gets the merchantId,\n * and the deviceId.  This process may involve redirection of the page, and XHR requests,\n * all of which are performed using default Browser objects.\n *\n * Once these values have been obtained, a new WebSocketCloudCloverDeviceConfiguration is\n * generated using the default Browser WebSocket implementation, and the connector is initialized.\n *\n */\nexport class LegacyCloverConnector extends CloverConnector {\n\n    legacyConfiguration: any;\n\n    private urlParamsInfo: { [key: string]: string } = null;\n    static _accessTokenKey: string = 'access_token';\n    static accessTokenKey: string = '#' + LegacyCloverConnector._accessTokenKey;\n    static URL_MERCHANT_ID_KEY: string = \"merchant_id\";\n    private httpSupport: HttpSupport;\n    private imageUtil: IImageUtil;\n\n    constructor(legacyConfiguration: any) {\n        super(null);\n\n        this.httpSupport = new HttpSupport(XMLHttpRequest);\n        this.imageUtil = new ImageUtil();\n        this.legacyConfiguration = legacyConfiguration;\n    }\n\n    public initializeConnection(): void {\n        if (this.device == null) {\n            this.initializeLegacyConnection(this.legacyConfiguration);\n        }\n    }\n\n    /**\n     * Generates a WebSocketCloudCloverDeviceConfiguration with a \"raw\" configuration\n     * @param rawConfiguration - a Json object that has values that can be used to construct the\n     *  object configuration.\n     */\n    protected generateNewConfigurationAndInitialize(rawConfiguration: any): void {\n        let newConfig: WebSocketCloudCloverDeviceConfiguration = new WebSocketCloudCloverDeviceConfiguration(\n            rawConfiguration.remoteApplicationId,\n            BrowserWebSocketImpl.createInstance,\n            this.imageUtil,\n            rawConfiguration.domain,\n            rawConfiguration.oauthToken,\n            this.httpSupport,\n            rawConfiguration.merchantId,\n            rawConfiguration.deviceId,\n            rawConfiguration.friendlyId,\n            rawConfiguration.forceConnect);\n        if (this.device == null) {\n            this.initialize(newConfig);\n        }\n    }\n\n    /**\n     * Checks for a oauth token, does a redirect based on the configuration domain and\n     * clientid if necessary, then moves on to #onceWeHaveTheAccessToken(...)\n     *\n     * @param configuration - the raw configuration object\n     */\n    protected initializeLegacyConnection(configuration: any) {\n\n        if (configuration.oauthToken) {\n            this.onceWeHaveTheAccessToken(configuration);\n        } else {\n            // We MUST have the domain and clientId, or we are unable to go on.\n            if (configuration.domain && configuration.clientId) {\n                // The following will return the token, or else the page will redirect.\n                configuration.oauthToken = this.getAccessToken(configuration);\n                this.onceWeHaveTheAccessToken(configuration);\n            } else {\n                let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n                errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n                errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n                errorResponse.setMessage(\"Both 'clientId' and 'domain' are unset.  Cannot initialize.\");\n                this.broadcaster.notifyOnDeviceError(errorResponse);\n            }\n        }\n    }\n\n    /**\n     * Gets the merchantId, redirecting if necessary, then moves on to #getDeviceId(...)\n     *\n     * @param configuration - the raw configuration object\n     */\n    private onceWeHaveTheAccessToken(configuration: any) {\n        // If we had the oauth token, but we do not have the merchantId, this will redirect\n        configuration.merchantId = this.getMerchantId(configuration);\n        // We need the deviceId in order to send the notification.\n        if (configuration.deviceId) {\n            this.generateNewConfigurationAndInitialize(configuration);\n        } else {\n            this.getDeviceId(configuration);\n        }\n    }\n\n    /**\n     * Gets the deviceId, calling the webservice to get the device list if necessary.\n     * If the deviceId is not set, and the deviceSerialId is not set, then this will call\n     * notify of an error. If the deviceId is not set, and the deviceSerialId is set then\n     * the call to get the devices is made the result is used to build a mapping that is\n     * passed to handleDeviceResult.\n     *\n     * @param configuration - the raw configuration object\n     */\n    private getDeviceId(configuration: any): void {\n        if (configuration.deviceSerialId || configuration.deviceId) {\n            if (configuration.deviceId) {\n                this.generateNewConfigurationAndInitialize(configuration);\n            } else {\n                let devicesEndpoint: string = Endpoints.getDevicesEndpoint(\n                    configuration.domain, configuration.merchantId, configuration.oauthToken);\n                this.httpSupport.getData(devicesEndpoint,\n                    function (devices) {\n                        this.handleDeviceResult(LegacyCloverConnector.buildMapOfSerialToDevice(devices), configuration)\n                    }.bind(this),\n                    function (error) {\n                        let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n                        errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n                        errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n                        errorResponse.setMessage(JSON.stringify({\"Error retreiving devices:\": error}, null, '\\t'));\n                        this.broadcaster.notifyOnDeviceError(errorResponse);\n                    }.bind(this)\n                );\n            }\n        } else {\n            let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n            errorResponse.setMessage(\"Neither 'deviceId' or 'deviceSerialId' passed, one must be set.  Cannot initialize.\");\n            this.broadcaster.notifyOnDeviceError(errorResponse);\n        }\n    }\n\n    /**\n     * Builds a mapping of the passed set of devices, from the device serial number to the device.\n     *\n     * @param devicesVX\n     * @returns {{}} the mapping from the device serial number to the device\n     */\n    protected static buildMapOfSerialToDevice(devicesVX): any {\n        let devices = null;\n        let deviceBySerial: { [key: string]: string } = {};\n        // depending on the version of the call, the devices might be in a slightly different format.\n        // We would need to determine what devices were capable of doing what we want.  This means we\n        // need to know if the device has the websocket connection enabled.  The best way to do this is\n        // to make a different REST call, but we could filter the devices here.\n        if (devicesVX['devices']) {\n            devices = devicesVX.devices;\n        }\n        else if (devicesVX['elements']) {\n            devices = devicesVX.elements;\n        }\n        if (devices) {\n            var i;\n            for (i = 0; i < devices.length; i++) {\n                deviceBySerial[devices[i].serial] = devices[i];\n            }\n        }\n        return deviceBySerial;\n    }\n\n    /**\n     * Uses the mapping of devices to find the correct deviceId to use in the configuration.\n     * This then moves on to generateNewConfigurationAndInitialize.\n     *\n     * @param devices\n     * @param configuration\n     */\n    protected handleDeviceResult(devices, configuration): void {\n        let myDevice = devices[configuration.deviceSerialId];\n        if (null == myDevice) {\n            let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n            errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n            errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n            errorResponse.setMessage(\"Cannot determine device to use.  \" +\n                \"Device \" + configuration.deviceSerialId + \" not in set returned.\");\n            this.broadcaster.notifyOnDeviceError(errorResponse);\n        } else {\n            // Stations do not support the kiosk/pay display.\n            // If the user has selected one, then print out a (loud) warning\n            if (myDevice.model == \"Clover_C100\") {\n                this.logger.warn(\n                    \"Warning - Selected device model (\" +\n                    devices[configuration.deviceSerialId].model +\n                    \") does not support pay display.\" +\n                    \"  Will attempt to send notification to device, but no response\" +\n                    \" should be expected.\");\n            }\n            configuration.deviceId = myDevice.id;\n            this.generateNewConfigurationAndInitialize(configuration);\n        }\n    }\n\n    /**\n     * Get the merchantId or redirect.\n     *\n     * @param configuration\n     * @returns {string|any}\n     */\n    private getMerchantId(configuration: any): string {\n        if (!configuration.merchantId) {\n            if (!this.urlParamsInfo) {\n                if (configuration.domain && configuration.clientId) {\n                    // We must have the merchant id.  This will make the merchant log in again.\n                    this.getAccessToken(configuration);\n                    let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n                    errorResponse.setMessage(\"Neither 'merchantId' or '\" +\n                        LegacyCloverConnector.URL_MERCHANT_ID_KEY + \"' specified. Cannot initialize.\");\n                    this.broadcaster.notifyOnDeviceError(errorResponse);\n                } else {\n                    let errorResponse: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n                    errorResponse.setCode(sdk.remotepay.DeviceErrorEventCode.InvalidConfig);\n                    errorResponse.setType(sdk.remotepay.ErrorType.EXCEPTION);\n                    errorResponse.setMessage(\"Both 'clientId' and 'domain' are unset.  Cannot initialize.\");\n                    this.broadcaster.notifyOnDeviceError(errorResponse);\n                }\n            } else {\n                configuration.merchantId = this.urlParamsInfo[LegacyCloverConnector.URL_MERCHANT_ID_KEY];\n            }\n        }\n        return configuration.merchantId;\n    }\n\n    /**\n     * Get the access token, either from the configuration or from the window URL, or redirect.\n     *\n     * @param configuration\n     * @returns {null}\n     */\n    private getAccessToken(configuration: any): string {\n        this.parseWindowURL();\n\n        var token = null;\n        if (this.urlParamsInfo) {\n            token = this.urlParamsInfo[LegacyCloverConnector.accessTokenKey];\n        }\n        if (token == null) {\n            // There is no token attempt to redirect\n            LegacyCloverConnector.redirect(configuration);\n        }\n        return token;\n    }\n\n    private static redirect(configuration: any): void {\n        let finalRedirect: string = window.location.href.replace(window.location.hash, '');\n        let oAuthRedirectUrl: string = Endpoints.getOAuthURL(configuration.domain, configuration.clientId, null, finalRedirect);\n        window.location.href = oAuthRedirectUrl;\n    }\n\n    private parseWindowURL(): void {\n        if (!this.urlParamsInfo) {\n            this.parseURL(window.location);\n        }\n    }\n\n    private parseURL(windowLocationObject: Location): void {\n        this.urlParamsInfo = {};\n\n        let params: string[] = windowLocationObject.hash.split('&');\n        this.parseStuff(params);\n\n        var params2 = windowLocationObject.search.substr(1).split('&');\n        this.parseStuff(params2);\n    }\n\n    private parseStuff(params: string[]) {\n        let i: number = 0;\n        let param: string = null;\n        while (param = params[i++]) {\n            let multiParam: string[] = param.split(\"=\");\n            this.urlParamsInfo[multiParam[0]] = multiParam[1];\n            // Make sure the access_token is mapped with the hash infront,\n            // and without.\n            if (multiParam[0] === LegacyCloverConnector._accessTokenKey) {\n                this.urlParamsInfo[LegacyCloverConnector.accessTokenKey] = multiParam[1];\n            }\n        }\n    }\n}"]}