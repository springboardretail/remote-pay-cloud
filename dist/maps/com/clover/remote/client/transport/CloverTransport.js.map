{"version":3,"sources":["com/clover/remote/client/transport/CloverTransport.ts"],"names":[],"mappings":";;AAGA;;;;;GAKG;AACH;IAUI;QATA,8BAA8B;QACpB,cAAS,GAA8B,EAAE,CAAC;QAKpD,2CAA2C;QACjC,UAAK,GAAY,KAAK,CAAC;IAGjC,CAAC;IAED;;OAEG;IACO,+CAAqB,GAA/B;QAAA,iBAIC;QAHG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YACvB,GAAG,CAAC,iBAAiB,CAAC,KAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,2CAAiB,GAA3B;QAAA,iBAKC;QAJG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YACvB,GAAG,CAAC,aAAa,CAAC,KAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACO,kDAAwB,GAAlC;QAAA,iBAKC;QAJG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YACvB,GAAG,CAAC,oBAAoB,CAAC,KAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACO,mCAAS,GAAnB,UAAoB,OAAe;QAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;YACvB,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAUD;;;;OAIG;IACI,mCAAS,GAAhB,UAAiB,QAAiC;QAAlD,iBAOC;QANG,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG;gBACvB,GAAG,CAAC,aAAa,CAAC,KAAI,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,qCAAW,GAAlB,UAAmB,QAAiC;QAChD,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,eAAe,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IAED;;OAEG;IACI,wCAAc,GAArB;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC;IAGM,gDAAsB,GAA7B,UAA8B,mBAAwC;QAClE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACnD,CAAC;IAWL,sBAAC;AAAD,CA7GA,AA6GC,IAAA;AA7GqB,0CAAe","file":"../../../../../../com/clover/remote/client/transport/CloverTransport.js","sourcesContent":["import {CloverTransportObserver} from './CloverTransportObserver';\nimport {ObjectMessageSender} from './ObjectMessageSender';\n\n/**\n * Clover Transport\n *\n * The clover transport facilitates notification distribution\n * from the device to a list of observers.\n */\nexport abstract class CloverTransport {\n    // List of observers to notify\n    protected observers: CloverTransportObserver[] = [];\n\n    // Used to send remote messages, like pairing messages\n    protected objectMessageSender: ObjectMessageSender;\n\n    // Flag to determine if the device is ready\n    protected ready: Boolean = false;\n\n    constructor() {\n    }\n\n    /**\n     * Notify observers that the device is connected\n     */\n    protected notifyDeviceConnected(): void {\n        this.observers.forEach((obs) => {\n            obs.onDeviceConnected(this);\n        });\n    }\n\n    /**\n     * Notify observers that the device is ready\n     */\n    protected notifyDeviceReady(): void {\n        this.ready = true;\n        this.observers.forEach((obs) => {\n            obs.onDeviceReady(this);\n        });\n    }\n\n    /**\n     * Notify observers that the device has disconnected\n     */\n    protected notifyDeviceDisconnected(): void {\n        this.ready = false;\n        this.observers.forEach((obs) => {\n            obs.onDeviceDisconnected(this);\n        });\n    }\n\n    /**\n     * Should be called by subclasses (_super.onMessage) when a message is received\n     * in order to forward to all observers\n     *\n     * @param {string} message - The message we received\n     */\n    protected onMessage(message: string): void {\n        this.observers.forEach((obs) => {\n            obs.onMessage(message);\n        });\n    }\n\n    /**\n     * Send a message\n     *\n     * @param {string} message - the message to send\n     * @return int - status indicator of 0 or -1 where 0 is success and -1 is failure\n     */\n    public abstract sendMessage(message: string): number;\n\n    /**\n     * Add new observer to receive notifications from the device\n     *\n     * @param {CloverTransportObserver} observer - the observer to notify\n     */\n    public subscribe(observer: CloverTransportObserver): void {\n        if (this.ready) {\n            this.observers.forEach((obs) => {\n                obs.onDeviceReady(this);\n            });\n        }\n        this.observers.push(observer);\n    }\n\n    /**\n     * Remove an observer from the list of observers\n     *\n     * @param {CloverTransportObserver} observer - the observer to remove\n     */\n    public unsubscribe(observer: CloverTransportObserver): void {\n        var indexOfObserver = this.observers.indexOf(observer);\n        if (indexOfObserver !== -1) {\n            this.observers.splice(indexOfObserver, 1);\n        }\n    }\n\n    /**\n     * Clear the observers list\n     */\n    public clearListeners(): void {\n        this.observers.splice(0, this.observers.length);\n    }\n\n\n    public setObjectMessageSender(objectMessageSender: ObjectMessageSender): void {\n        this.objectMessageSender = objectMessageSender;\n    }\n\n    /**\n     * Properly dispose of this object\n     */\n    public abstract dispose(): void;\n\n    /**\n     * Request a disconnect then reconnect\n     */\n    public abstract reset(): void\n}\n"]}