{"version":3,"sources":["com/clover/remote/client/transport/websocket/WebSocketPairedCloverTransport.ts"],"names":[],"mappings":"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","file":"../../../../../../../com/clover/remote/client/transport/websocket/WebSocketPairedCloverTransport.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\n\nimport {PairingDeviceConfiguration} from '../PairingDeviceConfiguration';\nimport {CloverWebSocketClient} from './CloverWebSocketClient';\nimport {WebSocketCloverTransport} from \"./WebSocketCloverTransport\";\n\n/**\n * WebSocket Paired Clover Transport\n *\n * Implements code that is used to pair with a device.  Depending on the application running on a device,\n * a pairing protocol may be needed to successfully connect.  This implementation sends the pairing request\n * when the websocket is opened.\n */\nexport class WebSocketPairedCloverTransport extends WebSocketCloverTransport {\n\n    private endpoint: string\n    private posName: string;\n    private serialNumber: string;\n    private authToken: string;\n    pairingDeviceConfiguration: PairingDeviceConfiguration; // Network Pay display specific\n    isPairing: boolean = true;\n\n    public constructor(endpoint: string,\n                       heartbeatInterval: number,\n                       reconnectDelay: number,\n                       retriesUntilDisconnect: number,\n                       posName: string,\n                       serialNumber: string,\n                       authToken: string,\n                       webSocketImplClass: any) {\n        super(heartbeatInterval, reconnectDelay, retriesUntilDisconnect, webSocketImplClass);\n        this.endpoint = endpoint;\n        this.posName = posName;\n        this.serialNumber = serialNumber;\n        this.authToken = authToken;\n\n        this.initialize();\n    }\n\n    protected initialize(): void {\n        this.initializeWithUri(this.endpoint);\n    }\n\n    /**\n     *\n     * @override\n     * @param ws\n     */\n    public onOpen(ws: CloverWebSocketClient): void {\n        if (this.cloverWebSocketClient == ws) {\n            super.onOpen(ws);\n            this.sendPairRequest();\n        }\n    }\n\n    private sendPairRequest(): void {\n        this.isPairing = true;\n        let prm: sdk.remotemessage.PairingRequestMessage = new sdk.remotemessage.PairingRequestMessage();\n        prm.setName(this.posName);\n        prm.setSerialNumber(this.serialNumber);\n        prm.setApplicationName(this.posName);\n        prm.setAuthenticationToken(this.authToken);\n        this.objectMessageSender.sendObjectMessage(prm);\n    }\n\n    /**\n     * Handles routing pairing messages.  Routes PAIRING_CODE and PairingResponse PAIRED/INITIAL messages to the\n     * configured PairingDeviceConfiguration\n     *\n     * @param ws\n     * @param message\n     */\n    public onMessage_cwscl(ws: CloverWebSocketClient, message: string): void { // CloverWebSocketClientListener\n        if (this.cloverWebSocketClient == ws) {\n            if (this.isPairing) {\n                let remoteMessage: sdk.remotemessage.RemoteMessage = this.messageParser.parseToRemoteMessage(message);\n                var sdkMessage: sdk.remotemessage.Message = this.messageParser.parseMessageFromRemoteMessageObj(remoteMessage);\n\n                if (sdkMessage) {\n                    if (sdk.remotemessage.Method.PAIRING_CODE == sdkMessage.getMethod()) {\n                        this.logger.debug(\"Got PAIRING_CODE\");\n                        var pcm: sdk.remotemessage.PairingCodeMessage = <sdk.remotemessage.PairingCodeMessage> sdkMessage;\n                        var pairingCode: string = pcm.getPairingCode();\n                        this.pairingDeviceConfiguration.onPairingCode(pairingCode);\n                    } else if (sdk.remotemessage.Method.PAIRING_RESPONSE == sdkMessage.getMethod()) {\n                        this.logger.debug(\"Got PAIRING_RESPONSE\");\n                        var response: sdk.remotemessage.PairingResponseMessage = <sdk.remotemessage.PairingResponseMessage> sdkMessage;\n                        if (sdk.remotemessage.PairingState.PAIRED == response.getPairingState() ||\n                            sdk.remotemessage.PairingState.INITIAL == response.getPairingState()) {\n                            this.logger.debug(\"Got PAIRED pair response\");\n                            this.isPairing = false;\n                            this.authToken = response.getAuthenticationToken();\n\n                            try {\n                                this.pairingDeviceConfiguration.onPairingSuccess(this.authToken);\n                            } catch (e) {\n                                this.logger.debug(\"Error:\" + e);\n                            }\n                            this.notifyDeviceReady();\n                        } else if (sdk.remotemessage.PairingState.FAILED == response.getPairingState()) {\n                            this.logger.debug(\"Got FAILED pair response\");\n                            this.isPairing = true;\n                            this.sendPairRequest();\n                        }\n                    } else if (sdk.remotemessage.Method.ACK != sdkMessage.getMethod() || sdk.remotemessage.Method.UI_STATE != sdkMessage.getMethod()) {\n                        this.logger.debug(\"Unexpected method: '\" + sdkMessage.getMethod() + \"' while in pairing mode.\");\n                    }\n                } else {\n                    this.logger.warn(\"Unrecognized message\", message)\n                }\n            } else {\n                super.onMessage_cwscl(ws, message);\n            }\n        }\n    }\n\n    public setPairingDeviceConfiguration(pairingDeviceConfiguration: PairingDeviceConfiguration): void {\n        this.pairingDeviceConfiguration = pairingDeviceConfiguration;\n    }\n\n}\n\n"]}