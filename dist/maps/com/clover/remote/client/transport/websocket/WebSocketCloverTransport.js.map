{"version":3,"sources":["com/clover/remote/client/transport/websocket/WebSocketCloverTransport.ts"],"names":[],"mappings":"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","file":"../../../../../../../com/clover/remote/client/transport/websocket/WebSocketCloverTransport.js","sourcesContent":["import * as sdk from 'remote-pay-cloud-api';\n\nimport {RemoteMessageParser} from '../../../../json/RemoteMessageParser';\nimport {CloverWebSocketClient} from './CloverWebSocketClient';\nimport {CloverTransport} from '../CloverTransport';\nimport {Logger} from '../../util/Logger';\nimport {CloverWebSocketClientListener} from \"./CloverWebSocketClientListener\";\n\n/**\n * WebSocket Clover Transport\n *\n * This is a websocket implementation of the Clover Transport.\n */\nexport abstract class WebSocketCloverTransport extends CloverTransport implements CloverWebSocketClientListener {\n\n    // Create a logger\n    protected logger: Logger = Logger.create();\n\n    private reconnectDelay: number = 3000;\n\n    /**\n     * We do not wantto start up multiple reconnect threads.  This should alleviate that\n     * @type {boolean}\n     */\n    private reconnecting: boolean = false;\n\n    /**\n     * Subclasses need to set this at times.\n     *\n     * @param newValue\n     */\n    protected setReconnecting(newValue: boolean): void {\n        this.reconnecting = newValue;\n    }\n\n    cloverWebSocketClient: CloverWebSocketClient;\n\n    private messageQueue: Array<string> = new Array<string>();\n\n    /**\n     * This is the WebSocket implementation.  This is odd,\n     * but it is how we can keep ourselves from being tied to a browser.\n     *\n     * A NodeJS app that uses this library would pass in a different\n     * object than a browser implementation.  NodeJS has an object that\n     * satisfies the requirements of the WebSocket (looks the same).\n     *\n     * https://www.npmjs.com/package/websocket\n     */\n    webSocketImplClass: any;\n\n    status: string = \"Disconnected\";\n    /**\n     * prevent reconnects if shutdown was requested\n     */\n    shutdown: boolean = false;\n\n    messageParser: RemoteMessageParser;\n\n    reconnector = function () {\n        if (!this.shutdown) {\n            try {\n                this.initialize();\n            } catch (e) {\n                this.reconnect();\n            }\n        }\n    }.bind(this);\n\n    public reconnect(): void {\n        // If we are already reconnecting, do not start another.\n        if (!this.reconnecting) {\n            this.setReconnecting(true);\n            if (this.shutdown) {\n                this.logger.debug(\"Not attempting to reconnect, shutdown...\");\n                return;\n            }\n            setTimeout(this.reconnector, this.reconnectDelay);\n        } else {\n            this.logger.debug(\"Already attempting to reconnect, will ignore additional request\");\n        }\n    }\n\n    public reset(): void {\n        try {\n            // By sending this close, the \"onClose\" will be fired, which will try to reconnect.\n            this.cloverWebSocketClient.close(\n                WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.code,\n                WebSocketCloverTransport.CloverWebSocketCloseCode.RESET_CLOSE_CODE.reason);\n        } catch (e) {\n            this.logger.error('error resetting transport.', e);\n        }\n    }\n\n    public static METHOD: string = \"method\";\n    public static PAYLOAD: string = \"payload\";\n\n    public constructor(heartbeatInterval: number,\n                       reconnectDelay: number,\n                       retriesUntilDisconnect: number,\n                       webSocketImplClass: any) {\n        super();\n        this.reconnectDelay = Math.max(0, reconnectDelay);\n        this.webSocketImplClass = webSocketImplClass;\n        // from WebSocketCloverDeviceConfiguration.getMessagePackageName, which needs to be changeable\n        // 'com.clover.remote_protocol_broadcast.app'\n        this.messageParser = RemoteMessageParser.getDefaultInstance();\n        const messageSenderId = setInterval(() => {\n            if (!this.shutdown) {\n                this.sendMessageThread();\n            } else {\n                clearInterval(messageSenderId);\n            }\n        }, 100);\n    }\n\n    /**\n     * Since this is javascript, this is not an actual thread, but it\n     * represents threading the sending of the messages.\n     *\n     * This just checks the message queue for elements, then sends using\n     * a FIFO pattern.\n     */\n    private sendMessageThread(): void {\n        // If we do not have any messages, then don't try to send them\n        if (this.messageQueue.length > 0) {\n            // let's see if we have connectivity\n            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {\n                // Hold the message in case we need to put it back on the queue\n                let nextMsg: string = this.messageQueue.shift();\n                try {\n                    if (this.cloverWebSocketClient.getBufferedAmount() > 0) {\n                        this.messageQueue.unshift(nextMsg);\n                    } else {\n                        this.cloverWebSocketClient.send(nextMsg);\n                    }\n                } catch (e) {\n                    // Failed to send, put it back\n                    this.messageQueue.unshift(nextMsg);\n                    this.reconnect();\n                }\n            } else {\n                this.reconnect();\n            }\n        }\n    }\n\n    /**\n     * Pushes the message to the queue for sending by the send 'thread'\n     *\n     * @param message - a string message to send on the websocket\n     * @returns {number} negative 1 (-1)\n     */\n    public sendMessage(message: string): number {\n        if (!this.shutdown) {\n            this.messageQueue.push(message);\n        } else {\n            this.logger.debug('In process of shutting down, ignoring ' + message);\n        }\n        return -1;\n    }\n\n    private clearWebsocket(): void { // synchronized\n        if (this.cloverWebSocketClient != null) {\n            this.cloverWebSocketClient.clearListener();\n        }\n        this.cloverWebSocketClient = null;\n    }\n\n\n    protected abstract initialize(): void\n\n    /**\n     * Called from subclasses at the end of the constructor.\n     *\n     * @param deviceEndpoint\n     */\n    protected initializeWithUri(deviceEndpoint: string): void { // synchronized\n        // Primary end to the reconnect attempts\n        this.setReconnecting(false);\n        if (this.cloverWebSocketClient != null) {\n            if (this.cloverWebSocketClient.isOpen() || this.cloverWebSocketClient.isConnecting()) {\n                return;\n            } else {\n                this.clearWebsocket();\n            }\n        }\n        this.cloverWebSocketClient = new CloverWebSocketClient(deviceEndpoint, this, 5000, this.webSocketImplClass);\n        this.cloverWebSocketClient.connect();\n        this.logger.debug('connection attempt done.');\n    }\n\n    public dispose(): void {\n        this.shutdown = true;\n\n        // Attempt to clear out messages already in the send queue\n        this.drainQueue();\n\n        if (this.cloverWebSocketClient != null) {\n            this.notifyDeviceDisconnected();\n            this.cloverWebSocketClient.close();\n        }\n        this.clearWebsocket();\n    }\n\n    private drainQueue(): void {\n        // Attempt to finish off the queue\n        while (this.messageQueue.length > 0) {\n            // let's see if we have connectivity\n            if (this.cloverWebSocketClient != null && this.cloverWebSocketClient.isOpen()) {\n                let nextMsg: string = this.messageQueue.shift();\n                try {\n                    this.cloverWebSocketClient.send(nextMsg);\n                } catch (e) {\n                    this.logger.debug('In process of shutting down, an error occurred trying to drain the message queue.  The messages unsent are ' + this.messageQueue);\n                    break;\n                }\n            } else {\n                this.logger.debug('In process of shutting down, the websocket became disconnected.  The messages unsent are ' + this.messageQueue);\n                break;\n            }\n        }\n    }\n\n    public connectionError(ws: CloverWebSocketClient, message?: string): void {\n        this.logger.debug('Connection error...');\n        if (this.cloverWebSocketClient == ws) {\n            for (let observer of this.observers) {\n                observer.onDeviceDisconnected(this, message);\n                let deviceErrorEvent: sdk.remotepay.CloverDeviceErrorEvent = new sdk.remotepay.CloverDeviceErrorEvent();\n                deviceErrorEvent.setType(sdk.remotepay.ErrorType.COMMUNICATION);\n                deviceErrorEvent.setCode(sdk.remotepay.DeviceErrorEventCode.NotConnected);\n                deviceErrorEvent.setCause(null);\n                deviceErrorEvent.setMessage(message);\n                observer.onDeviceError(deviceErrorEvent)\n            }\n        }\n    }\n\n    public onNotResponding(ws: CloverWebSocketClient): void {\n        this.logger.debug('Not Responding...');\n        if (this.cloverWebSocketClient == ws) {\n            for (let observer of this.observers) {\n                this.logger.debug('onNotResponding');\n                observer.onDeviceDisconnected(this);\n            }\n        }\n    }\n\n    public onPingResponding(ws: CloverWebSocketClient): void {\n        this.logger.debug(\"Ping Responding\");\n        if (this.cloverWebSocketClient == ws) {\n            for (let observer of this.observers) {\n                this.logger.debug(\"onPingResponding\");\n                observer.onDeviceReady(this);\n            }\n        }\n    }\n\n    public onOpen(ws: CloverWebSocketClient): void {\n        this.logger.debug(\"Open...\");\n        if (this.cloverWebSocketClient == ws) {\n            // notify connected\n            this.notifyDeviceConnected();\n        }\n    }\n\n    public onClose(ws: CloverWebSocketClient, code: number, reason: string, remote: boolean): void {\n        this.logger.debug(\"onClose: \" + reason + \", remote? \" + remote);\n\n        if (this.cloverWebSocketClient == ws) {\n            if (!this.cloverWebSocketClient.isClosing()) {\n                this.cloverWebSocketClient.clearListener();\n                if (!this.cloverWebSocketClient.isClosed()) {\n                    this.cloverWebSocketClient.close();\n                }\n            }\n            this.clearWebsocket();\n            for (let observer of this.observers) {\n                this.logger.debug(\"onClose\");\n                observer.onDeviceDisconnected(this);\n            }\n            if (!this.shutdown) {\n                this.reconnect();\n            }\n        }\n    }\n\n    /**\n     * Messed up way ts/js does function overloading\n     *\n     * @param ws\n     * @param message\n     */\n    public onMessage(ws: CloverWebSocketClient, message: string): void;\n    public onMessage(message: string): void;\n    public onMessage(wsOrMessage: any, messageOnly?: string): void {\n        if (typeof wsOrMessage == 'string') {\n            super.onMessage(wsOrMessage);\n        } else {\n            this.onMessage_cwscl(wsOrMessage, messageOnly);\n        }\n    }\n\n    public onMessage_cwscl(ws: CloverWebSocketClient, message: string): void { // CloverWebSocketClientListener\n        if (this.cloverWebSocketClient == ws) {\n            for (let observer of this.observers) {\n                this.logger.debug(\"Got message: \" + message);\n                observer.onMessage(message);\n            }\n        }\n    }\n\n    public onSendError(payloadText: string): void {\n       this.logger.error(\"WebSocketCloverTransport: An error occurred sending a message.\");\n    }\n}\n\nexport namespace WebSocketCloverTransport {\n    export class CloverWebSocketCloseCode {\n        // See https://tools.ietf.org/html/rfc6455#section-7.4\n        public code: number;\n        public reason: string;\n\n        // Using 4000 as a reset code.\n        static RESET_CLOSE_CODE: CloverWebSocketCloseCode = new CloverWebSocketCloseCode(4000, \"Reset requested\");\n\n        constructor(code: number, reason: string) {\n            this.code = code;\n            this.reason = reason;\n        }\n    }\n}\n\n"]}