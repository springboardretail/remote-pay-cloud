{"version":3,"sources":["com/clover/remote/client/transport/websocket/CloverWebSocketClient.ts"],"names":[],"mappings":"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","file":"../../../../../../../com/clover/remote/client/transport/websocket/CloverWebSocketClient.js","sourcesContent":["import {CloverWebSocketInterface} from '../../../../websocket/CloverWebSocketInterface';\nimport {WebSocketListener} from '../../../../websocket/WebSocketListener';\nimport {CloverWebSocketClientListener} from './CloverWebSocketClientListener';\nimport {WebSocketState} from '../../../../websocket/WebSocketState';\nimport {Logger} from '../../util/Logger';\n\n/**\n * The implementation of the websocket listener.  The websocket connection is\n * initiated from this class, and many of the low level functionality is housed here.\n */\nexport class CloverWebSocketClient implements WebSocketListener {\n    private endpoint: string; // URI\n    listener: CloverWebSocketClientListener;\n    heartbeatInterval: number;\n    // private WebSocketFactory factory;\n    private webSocketImplClass: any;\n    private socket: CloverWebSocketInterface;\n    private notifyClose: boolean;\n\n    private logger: Logger = Logger.create();\n\n    constructor(endpoint: string, listener: CloverWebSocketClientListener, heartbeatInterval: number, webSocketImplClass: any) {\n        this.listener = listener;\n        this.heartbeatInterval = heartbeatInterval >= 0 ? Math.min(100, heartbeatInterval) : heartbeatInterval; // can be negative, but > than 100 ms\n        this.endpoint = endpoint;\n        this.webSocketImplClass = webSocketImplClass;\n    }\n\n    public getWebSocketState(): WebSocketState {\n        return (this.socket) ? this.socket.getReadyState() : null;\n    }\n\n    public getBufferedAmount(): number {\n        return (this.socket ? this.socket.getBufferedAmount(): 0);\n    }\n\n    public connect(): void {\n        if (this.socket != null) {\n            throw new Error(\"Socket already created. Must create a new CloverWebSocketClient\");\n        }\n        try {\n            // Kind of odd.  webSocketImplClass is the class definition, we are creating a new one here.\n            this.socket = this.webSocketImplClass(this.endpoint);\n            // socket.setAutoFlush(true);\n            this.socket.addListener(this);\n            this.socket.connect();\n        } catch (e) {\n            this.logger.error('connect, connectionError', e);\n            this.listener.connectionError(this, e.message);\n        }\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.socket.sendClose(code, reason);\n    }\n\n    public isConnecting(): boolean {\n        return this.socket.getState() == WebSocketState.CONNECTING;\n    }\n\n    public isOpen(): boolean {\n        return this.socket.isOpen();\n    }\n\n    public isClosing(): boolean {\n        return this.socket.getState() == WebSocketState.CLOSING;\n    }\n\n    public isClosed(): boolean {\n        return this.socket.getState() == WebSocketState.CLOSED;\n    }\n\n    public onTextMessage(websocket: CloverWebSocketInterface, text: string): void {\n        this.listener.onMessage(this, text);\n    }\n\n    public onConnected(websocket: CloverWebSocketInterface): void {\n        this.listener.onOpen(this);\n    }\n\n    /**\n     *\n     * @param {CloverWebSocketInterface} websocket\n     * @param event - A simple error event is passed per the websocket spec - https://www.w3.org/TR/websockets/#concept-websocket-close-fail\n     * It doesn't appear that an exact typing for the websocket error event is available, so I am using any.\n     */\n    public onConnectError(websocket: CloverWebSocketInterface, event: any): void {\n        let eventMessage: string = event.message || \"Not available\";\n        let message: string = `A websocket connection error has occurred.  Details: ${eventMessage}`;\n        this.logger.error(message);\n        this.listener.connectionError(this, message);\n    }\n\n    public onDisconnected(websocket: CloverWebSocketInterface): void {\n        this.listener.onClose(this, 1000, \"\", false);\n    }\n\n    public onCloseFrame(websocket: CloverWebSocketInterface, closeCode: number, reason: string): void {\n        this.listener.onClose(this, closeCode, reason, true);\n    }\n\n    public onError(websocket: CloverWebSocketInterface): void {\n        this.logger.error('A websocket error has occurred.');\n    }\n\n    public onPingFrame(websocket: CloverWebSocketInterface): void {\n        this.socket.sendPong();\n    }\n\n    public onSendError(websocket: CloverWebSocketInterface): void {\n        this.listener.onSendError(\"\");// frame.getPayloadText());\n    }\n\n    public onUnexpectedError(websocket: CloverWebSocketInterface): void {\n        this.logger.error('An unexpected websocket error has occurred.');\n    }\n\n    public send(message: string): void {\n        this.socket.sendText(message);\n    }\n\n    public clearListener(): void {\n        this.socket.removeListener(this);\n    }\n\n    public setNotifyClose(b: boolean): void {\n        this.notifyClose = b;\n    }\n\n    public shouldNotifyClose(): boolean {\n        return this.notifyClose;\n    }\n}"]}